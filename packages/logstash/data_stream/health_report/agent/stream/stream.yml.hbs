config_version: "1"
interval: {{period}}
resource.url: "{{url}}/_health_report"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

{{#if username}}
auth.basic.user: {{escape_string username}}
{{/if}}
{{#if password}}
auth.basic.password: {{escape_string password}}
{{/if}}
{{#if condition}}
condition: {{ condition }}
{{/if}}

redact: 
  fields: ~

program: |
  get(state.url)
  .as(resp, bytes(resp.Body)
  .decode_json().as(body,
    {
      "logstash":{
        "node": has(body.host)
        ? {
            "host":body.host,
            "ephemeral_id":body.ephemeral_id,
            "http_address":body.http_address,
            "name":body.name,
            "uuid":body.id,
            "version":body.version,
            "health_report":{
              "status":body.status,
              "indicators":has(body.indicators)
              ? {
                  "pipelines":
                    body.indicators.pipelines.indicators.keys().map(key, has(body.indicators.pipelines), {
                      "pipeline_id":key,
                      "status":body.indicators.pipelines.indicators[key].status,
                      "symptom":body.indicators.pipelines.indicators[key].symptom,
                      "details":has(body.indicators.pipelines.indicators[key].details)
                      ? {
                          "state":body.indicators.pipelines.indicators[key].details.status.state,
                          "flow": body.indicators.pipelines.indicators[key].details.flow,
                      	  "diagnosis":has(body.indicators.pipelines.indicators[key].diagnosis)
                          ? body.indicators.pipelines.pipelines.indicators[key].diagnosis
                          : {},
                      } : {},
                    } )
                } : {},
            } 
        }: {},
      }  
    }
    )
  ).as(eve, {
    "events":[eve]
  })


