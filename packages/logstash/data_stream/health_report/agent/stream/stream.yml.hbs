config_version: "1"
interval: {{period}}
resource.url: "{{url}}/_health_report"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

{{#if username}}
auth.basic.user: {{escape_string username}}
{{/if}}
{{#if password}}
auth.basic.password: {{escape_string password}}
{{/if}}
{{#if condition}}
condition: {{ condition }}
{{/if}}

redact: 
  fields: ~

program: |
  get("http://localhost:9600/_health_report")
  .as(resp, bytes(resp.Body)
  .decode_json().as(body,
    {   
        "node": {
            "name":body.name,
            "address":body.http_address,
            "uuid":body.id,
            "version":body.version,
            "status":body.status,
            "description":body.symptom,
            "timestamp":now()
            },
        "pipelines": 
            body.indicators.pipelines.indicators.keys().map(key, has(body.indicators.pipelines), {
                "pipeline_id":key,
                "status":body.indicators.pipelines.indicators[key].status,
                "symptom":body.indicators.pipelines.indicators[key].symptom,
                "state":body.indicators.pipelines.indicators[key].details.status.state,
                "flow": body.indicators.pipelines.indicators[key].details.flow,
                "diagnosis": has(body.indicators.pipelines.indicators[key].diagnosis) 
                ? body.indicators.pipelines.pipelines.indicators[key].diagnosis: {},
                "impacts": has(body.indicators.pipelines.indicators[key].impacts) 
                ? body.indicators.pipelines.pipelines.indicators[key].impacts: {},
            })
    }).as(entries, {
        "events": entries.map(entry, {"logstash":
        {entry:entries[entry]}})
    }
  )
  )