dest:
  index: ".alerts-security.user-risk-score"
  pipeline: 0.1.0-ml_userriskscore_ingest_pipeline
frequency: 1h
pivot:
  aggregations:
    "@timestamp":
      max:
        field: "@timestamp"
    risk_stats:
      scripted_metric:
        combine_script: return state
        init_script: |-
          state.rule_risk_stats = new HashMap();;
        map_script: |-
          // Get running sum of risk score per rule name per shard
          String rule_name = doc["signal.rule.name"].value;
          def stats = state.rule_risk_stats.getOrDefault(rule_name, 0.0);
          stats = doc["signal.rule.risk_score"].value;
          state.rule_risk_stats.put(rule_name, stats);
        params:
          max_risk: 100
          p: 1.5
          zeta_constant: 2.612
        reduce_script: "// Consolidating time decayed risks from across all shards\nMap total_risk_stats = new HashMap();\nfor (state in states) {\n    for (key in state.rule_risk_stats.keySet()) {\n    def rule_stats = state.rule_risk_stats.get(key);\n    def stats = total_risk_stats.getOrDefault(key, 0.0);\n    stats = rule_stats;\n    total_risk_stats.put(key, stats);\n    }\n}\n// Consolidating individual rule risks and arranging them in decreasing order\nList risks = new ArrayList();\nfor (key in total_risk_stats.keySet()) {\n    risks.add(total_risk_stats[key])\n}\nCollections.sort(risks, Collections.reverseOrder());\n// Calculating total risk and normalizing it to a range\ndouble total_risk = 0.0;\ndouble risk_cap = params.max_risk * params.zeta_constant;\nfor (int i=0;i<risks.length;i++) {\n    total_risk += risks[i] / Math.pow((1+i), params.p);\n}\ndouble total_norm_risk = 100 * total_risk / risk_cap;\nif (total_norm_risk < 40) {\n    total_norm_risk =  2.125 * total_norm_risk;\n}\nelse if (total_norm_risk >= 40 && total_norm_risk < 50) {\n    total_norm_risk = 85 + (total_norm_risk - 40);\n}\nelse {\n    total_norm_risk = 95 + (total_norm_risk - 50) / 10;\n}\n\nList rule_stats = new ArrayList();\nfor (key in total_risk_stats.keySet()) {\n    Map temp = new HashMap();\n    temp[\"rule_name\"] = key;\n    temp[\"rule_risk\"] = total_risk_stats[key];\n    rule_stats.add(temp);\n}\n\nreturn [\"calculated_score_norm\": total_norm_risk, \"rule_risks\": rule_stats];"
  group_by:
    user.name:
      terms:
        field: user.name
source:
  index:
    - ".alerts-security.alerts-default"
  query:
    bool:
      filter:
        - range:
            "@timestamp":
              gte: now-5d
sync:
  time:
    delay: 120s
    field: "@timestamp"
_meta:
  fleet_transform_version: 0.1.0
  order: 1