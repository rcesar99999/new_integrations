---
script:
  lang: painless
  source: |
  // Consolidating time decayed risks and tactics from across all shardsMap
    total_risk_stats = new HashMap();String host_variant = new String();def tactic_ids
    = new HashSet();for (state in states) {    for (key in state.rule_risk_stats.keySet())
    {        def rule_stats = state.rule_risk_stats.get(key);        def stats
    = total_risk_stats.getOrDefault(key, [0.0,\"\",false]);        stats[0] = Math.max(stats[0],
    rule_stats[0]);        if (stats[2] == false) {            stats[1] = rule_stats[1];
    \           stats[2] = true;        }         total_risk_stats.put(key, stats);
    \   }    if (host_variant.length() == 0) {        host_variant = state.host_variant;
    \   }    tactic_ids.addAll(state.tactic_ids);}// Consolidating individual
    rule risks and arranging them in decreasing orderList risks = new ArrayList();for
    (key in total_risk_stats.keySet()) {    risks.add(total_risk_stats[key][0])}Collections.sort(risks,
    Collections.reverseOrder());// Calculating total host risk scoredouble total_risk
    = 0.0;double risk_cap = params.max_risk * params.zeta_constant;for (int i=0;i<risks.length;i++)
    {    total_risk += risks[i] / Math.pow((1+i), params.p);}// Normalizing
    the host risk scoredouble total_norm_risk = 100 * total_risk / risk_cap;if
    (total_norm_risk < 40) {    total_norm_risk =  2.125 * total_norm_risk;}else
    if (total_norm_risk >= 40 && total_norm_risk < 50) {    total_norm_risk = 85
    + (total_norm_risk - 40);}else {    total_norm_risk = 95 + (total_norm_risk
    - 50) / 10;}// Calculating multipliers to the host risk scoredouble risk_multiplier
    = 1.0;List multipliers = new ArrayList();// Add a multiplier if host is a
    serverif (host_variant.toLowerCase().contains(\"server\")) {    risk_multiplier
    *= params.server_multiplier;    multipliers.add(\"Host is a server\");}//
    Add multipliers based on number and diversity of tactics seen on the hostfor
    (String tactic : tactic_ids) {    multipliers.add(\"Tactic \"+tactic);    risk_multiplier
    *= 1 + params.tactic_base_multiplier * params.tactic_weights.getOrDefault(tactic,
    0);}// Calculating final riskdouble final_risk = total_norm_risk;if (risk_multiplier
    > 1.0) {    double prior_odds = (total_norm_risk) / (100 - total_norm_risk);
    \   double updated_odds = prior_odds * risk_multiplier;     final_risk = 100
    * updated_odds / (1 + updated_odds);}// Adding additional metadataList rule_stats
    = new ArrayList();for (key in total_risk_stats.keySet()) {    Map temp = new
    HashMap();    temp[\"rule_name\"] = key;    temp[\"rule_risk\"] = total_risk_stats[key][0];
    \   temp[\"rule_id\"] = total_risk_stats[key][1];    rule_stats.add(temp);}return
    [\"risk_score\": final_risk, \"rule_risks\": rule_stats, \"risk_multipliers\":
    multipliers];"
