---
description: Pipeline for processing HPE Aruba logs.

processors:
  - set:
      field: event.original
      copy_from: message
  - remove:
      field: message
      ignore_missing: true
  - redact:
      field: "event.original"
      tag: redact_passkey
      description: "Reacting passkey updates"
      prefix: "passkey update:   -> "
      patterns:
        - "passkey %{GREEDYDATA:reacted}"
  - set:
      field: ecs.version
      value: "8.11.0"
  - set:
      field: event.category
      value: [network]
  #
  # Parse the syslog message
  # This grok pattern is based on the syslog message format used by HPE Aruba CX switches.
  #
  - grok:
      field: event.original
      tag: grok_event_original
      if: ctx.event?.original != null
      patterns:
        - "%{SYSLOG_HEADER}%{GREEDYDATA:message}"
      pattern_definitions:
        SYSLOG_HEADER: "%{TIMESTAMP_ISO8601:@timestamp}\\s+%{USER:aruba.hardware.device}\\s+%{DATA:log.syslog.appname}\\[%{POSINT:log.syslog.procid}\\]:\\s+%{WORD:aruba.event_type}\\|(?:%{OPTIONAL_HEADER})?"
        OPTIONAL_HEADER: "%{POSINT:event.code}\\|%{USER:log.level}\\|(?:%{USER:aruba.component.category})?\\|(?:%{DATA:aruba.sequence})?\\|"
  - grok:
      field: aruba.sequence
      if: ctx.aruba?.sequence != null && ctx.aruba.sequence.contains("/")
      tag: parse_sequence
      patterns:
        - "%{POSINT:event.sequence:long}\\/%{POSINT}"
  - lowercase:
      field: event.kind
      tag: lowercase_event_kind
      ignore_missing: true

    # LLDP events (1xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LLDP.htm
  - grok:
      field: message
      tag: lldp_event_103_through_113
      description: "Logs event when LLDP (Link Layer Discovery Protocol) feature"
      if: "['103','104','105','106','107','108','109','110','113'].contains(ctx.event?.code)"
      patterns:
        - "^LLDP neighbor %{DATA:aruba.instance.id} (added|updated|deleted) on %{GREEDYDATA:aruba.interface.id}"
        - "^Configured LLDP (%{TX_TIMER}|%{TX_HOLD}|%{TX_DELAY}|%{REINIT_DELAY}|%{MANAGEMENT_IP})"
        - "^PVID mismatch on %{DATA:aruba.interface.id} pvid = %{NUMBER:aruba.lldp.pvid:long}, Neighbor %{DATA:aruba.instance.id} port_id = %{DATA:aruba.lldp.ninterface} pvid = %{NUMBER:aruba.lldp.npvid:long}"
      pattern_definitions:
        TX_TIMER: "tx-timer to %{NUMBER:aruba.lldp.tx_timer:long}"
        TX_HOLD: "tx-hold to %{NUMBER:aruba.lldp.tx_hold:long}"
        TX_DELAY: "tx-delay to %{NUMBER:aruba.lldp.tx_delay:long}"
        REINIT_DELAY: "reinit-delay to %{NUMBER:aruba.lldp.reinit_delay:long}"
        MANAGEMENT_IP: "Management IP %{IP:server.ip}"
  
  # Fan Events (2xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/FAN.htm
  # * 212 is not included as it does not require further processing.
  - grok:
      field: message
      tag: fan_event_201
      description: "Log the total number of fans in the subsystem"
      if: "ctx.event?.code == '201'"
      patterns:
        - "^There are %{INT:aruba.fan.count:long} total fans in subsystem %{DATA:aruba.subsystem}\\.?$"
  - grok:
      field: message
      tag: fan_event_202
      description: "Log the fan speed set"
      if: "ctx.event?.code == '202'"
      patterns:
        - "^Subsystem %{DATA:aruba.subsystem} setting fan speed control register to %{DATA:aruba.fan.speedval}: %{FAN_VALUE:aruba.fan.value}"
      pattern_definitions:
        FAN_VALUE: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_203
      description: "Log the air flow direction"
      if: "ctx.event?.code == '203'"
      patterns:
        - "^Air flow direction: %{FAN_VALUE:aruba.fan.value}"
      pattern_definitions:
        FAN_VALUE: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_204_205
      description: "log event when a fan tray is removed|inserted from|into the chassis"
      if: "['204', '205'].contains(ctx.event?.code)"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_num} was (removed|inserted)"
  - grok:
      field: message
      tag: fan_event_206_207
      description: "log event when a fan module is removed|inserted from|into a fan tray"
      if: "['206', '207'].contains(ctx.event?.code)"
      patterns:
        - "^Fan module %{DATA:aruba.fan.fmod_num}( in fan tray %{DATA:aruba.fan.ft_num})? was (removed|inserted)"
  - grok:
      field: message
      tag: fan_event_208
      description: "Log event when an unsupported fan tray is inserted"
      if: "ctx.event?.code == '208'"
      patterns:
        - "^Unsupported fan tray %{DATA:aruba.fan.ft_num} detected. Please insert a standard fan tray"
  - grok:
      field: message
      tag: fan_event_209
      description: "Log error when system shutdown is initiated due to critical fan faults"
      if: "ctx.event?.code == '209'"
      patterns:
        - "^Shutting down system now because %{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{NUMBER:aruba.limit.threshold}"
  - grok:
      field: message
      tag: fan_event_211
      description: "Log error when the number of failures exceed the allowable limit"
      if: "ctx.event?.code == '211'"
      patterns:
        - "^Shutting down system in %{NUMBER:aruba.time.seconds:long} seconds because %{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{GREEDYDATA:aruba.limit.threshold}"
  - grok:
      field: message
      tag: fan_event_213
      description: "Log error when there are fan faults"
      if: "ctx.event?.code == '213'"
      patterns:
        - "^%{NUMBER:aruba.error.count:long} %{DATA:error.type} in the system"
  - grok:
      field: message
      tag: fan_event_214
      description: "List out the faulty or missing fan names"
      if: "ctx.event?.code == '214'"
      patterns:
        - "^%{DATA:aruba.fan.function}: Fan fault in tray %{DATA:aruba.fan.tray_idx:long}, module %{NUMBER:aruba.fan.index:long}, reason: %{EVENT_REASON:event.reason}"
      pattern_definitions:
        EVENT_REASON: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_215
      description: "Log the fan status"
      if: "ctx.event?.code == '215'"
      patterns:
        - "^%{DATA:aruba.fan.name} fan is %{FAN_STATUS:aruba.fan.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_216
      description: "Log the change in fan status"
      if: "ctx.event?.code == '216'"
      patterns:
        - "^Status of fan %{NUMBER:aruba.fan.module_idx:long} in tray %{NUMBER:aruba.fan.tray_idx:long} has changed from %{DATA:aruba.fan.old_status} to %{FAN_STATUS:aruba.fan.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_217
      description: "Log when minimum number of fans are not present"
      if: "ctx.event?.code == '217'"
      patterns:
        - "^Operational fan count below minimum. %{NUMBER:aruba.fan.count:long} fans operating, but %{NUMBER:aruba.fan.minimum:long} are required"
  - grok:
      field: message
      tag: fan_event_218
      description: "Log when the fan speed index changes to and from the maximum for each thermal zone"
      if: "ctx.event?.code == '218'"
      patterns:
        - "^Fan speed index for thermal zone %{NUMBER:aruba.fan.zone_idx:long} is %{SPEED_STATUS:aruba.fan.speed_idx_status}"
      pattern_definitions:
        SPEED_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_219
      description: "Log event when a fan tray is powered on or off"
      if: "ctx.event?.code == '219'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_num} powered %{FAN_STATUS:aruba.fan.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_220
      description: "Log event when a fan tray is inserted specifying its airflow direction"
      if: "ctx.event?.code == '220'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_num} airflow is %{FAN_DIRECTION:aruba.fan.ft_dir}"
      pattern_definitions:
        FAN_DIRECTION: "[-_0-9a-zA-Z]+"
  - dissect:
      field: message
      tag: fan_event_221
      description: "Log event when a fan tray airflow is not matching with system airflow"
      if: "ctx.event?.code == '221'"
      pattern: "%{aruba.fan.ft_air_curr} airflow fan tray %{aruba.fan.ft_num} unsupported; this system requires %{aruba.fan.ft_air_req} airflow"
  - grok:
      field: message
      tag: fan_event_222
      description: "Log error when number of faulty/supported fans does not meet the allowable limit"
      if: "ctx.event?.code == '222'"
      patterns:
        - "^%{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{GREEDYDATA:aruba.limit.threshold}"
  - dissect:
      field: message
      tag: fan_event_223
      description: "Log when fan tray SKU ID in FRU is mismatched"
      if: "ctx.event?.code == '223'"
      pattern: "Fan tray %{aruba.fan.ft_num} FRU EPPROM is incorrectly programmed"
  - dissect:
      field: message
      tag: fan_event_224
      description: "Log event when a fan tray airflow is not matching with system airflow and is disabled"
      if: "ctx.event?.code == '224'"
      pattern: "%{aruba.fan.ft_air_curr} airflow fan tray %{aruba.fan.ft_num} disabled; this system requires %{aruba.fan.ft_air_req} airflow"
  - grok:
      field: message
      tag: fan_event_225
      description: "Log event when a misconfigured fan tray is enabled or disabled"
      if: "ctx.event?.code == '225'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_num} misconfigured; this fan tray has been %{FAN_STATUS:aruba.fan.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"

    # Power events (3xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POWER.htm
  - dissect:
      field: message
      tag: power_event_301
      description: ""
      if: "ctx.event?.code == '301'"
      pattern: "PSU %{aruba.power.name} changed state to %{aruba.state}"
  - dissect:
      field: message
      tag: power_event_302
      description: ""
      if: "ctx.event?.code == '302'"
      pattern: "PSUs inserted in the system are of %{aruba.power.type} types. This is %{aruba.power.support} configuration."
  - grok:
      field: message
      tag: power_event_303_304
      description: ""
      if: "['303','304'].contains(ctx.event?.code)"
      patterns: 
        - "^PSU %{DATA:aruba.power.name} (encountered a warning|faulted). Total (warning|fault) count: %{NUMBER:aruba.count:long}"
  - grok:
      field: message
      tag: power_event_305_309
      description: ""
      if: "['305','309'].contains(ctx.event?.code)"
      patterns: 
        - "^PSU %{DATA:aruba.power.name}: (Internal communication|Output current) %{GREEDYDATA:aruba.status}( threshold limit)?"
  - grok:
      field: message
      tag: power_event__307_308
      description: ""
      if: "['306','307','308'].contains(ctx.event?.code)"
      patterns:
        - "^PSU %{DATA:aruba.power.name}: Fan-%{INT:aruba.power.fanidx:long} %{GREEDYDATA:aruba.status}"
        - "^PSU %{DATA:aruba.power.name}: %{DATA:aruba.power.sensorid} sensor %{DATA:aruba.status} threshold limit"
        - "^PSU %{DATA:aruba.power.name} has shutdown due to over temperature in %{DATA:aruba.power.sensorid} sensor"
  - grok:
      field: message
      tag: power_event_310_311_314_315_317
      description: ""
      if: "['310','311','314','315','317'].contains(ctx.event?.code)"
      patterns:
        - "^PSU %{DATA:aruba.power.name} "
  - grok:
      field: message
      tag: power_event_312_313
      description: ""
      if: "['312','313'].contains(ctx.event?.code)"
      patterns:
        - "^PSU Redundancy (set to|operating at) %{GREEDYDATA:aruba.power.redund}"
  - dissect:
      field: message
      tag: power_event_316
      description: "There is insufficient power to power a card. Power can be removed from configured PoE PDs to be able to power the card."
      if: "ctx.event?.code == '316'"
      pattern: "%{aruba.power.type} module %{aruba.power.name} denied power due to insufficient power. Configured PoE power can be deconfigured to allow card to be granted power."

    # Interface events (40x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/INTERFACE.htm
  - grok:
      field: message
      tag: copp_event_401_402
      description: "Log when interface port_admin set to [up|down]"
      if: "['401', '402'].contains(ctx.event?.code)"
      patterns:
        - "^Interface port_admin set to (up|down) for %{DATA:aruba.interface.id} interface"
  - grok:
      field: message
      tag: copp_event_403_404
      description: "Log when interface link status is [up|down]"
      if: "['403', '404'].contains(ctx.event?.code)"
      patterns:
        - "^Link status for interface %{DATA:aruba.interface.id} is (up|%{GREEDYDATA:aruba.interface.state})"
  - grok:
      field: message
      tag: copp_event_406_407_408
      description: "Log when interface encountered an error that requires user intervention | a downshift | is down due to incompatible MACsec and PFC configutration"
      if: "['406', '407', '408'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} %{407_PATTERN}?"
      pattern_definitions:
        407_PATTERN: "downshifted to speed %{NUMBER:aruba.interface.port_speed:long} Mbps because link attempt failed at higher speed"

    # LED events (50x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LED.htm
  - grok:
      field: message
      tag: led_event_501_502
      description: "Log about number of LED [types|config] in subsystem"
      if: "['501','502'].contains(ctx.event?.code)"
      patterns:
        - "^There are %{NUMBER:aruba.count:long} LED (types|configs) in subsystem %{GREEDYDATA:aruba.subsystem}"

    # Port events (60x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LED.htm
  - grok:
      field: message
      tag: port_event_601_602
      description: "Log when netlink socket [creation|bind] failed"
      if: "['601','602'].contains(ctx.event?.code)"
      patterns:
        - "^Netlink socket (creation|bind) failed %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: port_event_603_604
      description: "Log when netlink failed to set mtu for interface | failed to change the interface status"
      if: "['603','604'].contains(ctx.event?.code)"
      patterns:
        - "^Netlink failed to (set mtu %{DATA:aruba.mtu} for|bring %{DATA:aruba.status} the) interface %{GREEDYDATA:aruba.interface.id}"
  - dissect:
      field: message
      tag: port_event_605
      description: "Unknown internal vlan policy"
      if: "ctx.event?.code == '605'"
      pattern: "Unknown internal vlan policy %{aruba.policy.name}"
  - dissect:
      field: message
      tag: port_event_606
      description: "Log when allocation failed for internal vlan for port"
      if: "ctx.event?.code == '606'"
      pattern: "Error allocating internal vlan for port %{network.vlan.id}"
  - dissect:
      field: message
      tag: port_event_607
      description: "Log when a duplicate address is received on a port"
      if: "ctx.event?.code == '607'"
      pattern: "Overlapping networks observed for %{client.ip}"

    # SYS events (7xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SYS.htm
  - grok:
      field: message
      tag: sys_event_705_711
      description: "Log when  failed to allocate memory | Indicates that the system has detected DDR errors during uboot BIST"
      if: "['705','711'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to allocate memory for %{GREEDYDATA:aruba.sys.name}"
        - "^Detected DDR errors during uboot BIST, module %{DATA:aruba.sys.module} reported %{GREEDYDATA:aruba.error.description}"

    # Loopback events (90x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LOOPBACK.htm
  - grok:
      field: message
      tag: loop_901_902_903
      description: "Log when loopback interface event is triggered"
      if: "['901','902','903'].contains(ctx.event?.code)"
      patterns:
        - "^Loopback Interface %{DATA:aruba.interface.id}, (created|deleted|configured administratively %{GREEDYDATA:aruba.interface.state})"

    # Supportability events (12xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SUPPORTABILITY.htm
  - grok:
      field: message
      tag: supportability_event_1201
      description: "A daemon has crashed and generated core dump"
      if: "ctx.event?.code == '1201'"
      patterns: 
        # Documentation doesn't align with actual logs, accounting for both formats
        - "^%{DATA:process.name} crashed due to %{NUMBER:process.exit_code:long},%{GREEDYDATA:process.end}"
        - "^%{DATA:process.name} crashed due to signal:%{NUMBER:process.exit_code:long}"
  - grok:
      field: message
      tag: supportability_event_1203_1204
      description: "Logs kernel failed to compress vmcore | occurred and secondary kernel core failed to save uncompressed core"
      if: "['1203','1204'].contains(ctx.event?.code)"
      patterns:
        - "Error log:%{GREEDYDATA:aruba.error.description}"
  - dissect:
      field: message
      tag: supportability_event_1206
      description: "Logs reboot information"
      if: "ctx.event?.code == '1206'"
      pattern: "Module rebooted. Reason: %{event.reason}, Boot-ID: %{host.boot.id}"
  - dissect:
      field: message
      tag: supportability_event_1208
      description: "Event raised when system memory usage goes beyond high threshold."
      if: "ctx.event?.code == '1208'"
      # <daemons> could be an array, need real logs to warrant parsing as array
      pattern: "High system memory usage detected. High memory usage daemons are %{aruba.supportability.daemons}"
  - grok:
      field: message
      tag: supportability_event_1213_1214
      description: "Event raised when the sampled value has reached the [rising|falling] threshold "
      if: "['1213','1214'].contains(ctx.event?.code)"
      patterns:
        - "^RMON alarm %{DATA:aruba.supportability.alarm_index} - (Rising|Falling) threshold value of %{DATA:aruba.limit.threshold} reached for %{GREEDYDATA:aruba.supportability.oid}."
  - dissect:
      field: message
      tag: supportability_event_1215_1216
      description: "A (critical)? process is exiting due to an unrecoverable error"
      if: "['1215','1216'].contains(ctx.event?.code)"
      pattern: "%{process.name} exiting. Reason: %{event.reason}"
  - grok:
      field: message
      tag: supportability_event_1218_1219_1220
      description: "Event raised when a new syslog server is added for remote logging | when a syslog server is removed from remote logging | when an existing syslog server configuration is modified"
      if: "['1218','1219','1220'].contains(ctx.event?.code)"
      patterns:
        - "logging to %{DATA:client.address} over %{DATA:aruba.vrf.id} vrf"
  - grok:
      field: message
      tag: supportability_event_1223_1224
      description: "Event raised the log buffer is almost full. User can copy these logs before the logs being overwritten | log buffer has wrapped; older logs will be overwritten."
      if: "['1223','1224'].contains(ctx.event?.code)"
      patterns:
        - "^The %{DATA:aruba.supportability.log_type} buffer"
  - dissect:
      field: message
      tag: supportability_event_1225
      description: "Event raised when suppuort-files collection is requested"
      if: "ctx.event?.code == '1225'"
      pattern: "Collection of support-files named %{file.name} of type %{file.type} is requested for the module %{aruba.supportability.module}."
  - grok:
      field: message
      tag: supportability_event_1226_1227
      description: "Event raised when a requst received to delete given support-files | when support-files is deleted"
      if: "['1226','1227'].contains(ctx.event?.code)"
      patterns:
        - "^Support-files named %{DATA:file.name} is"
  - grok:
      field: message
      tag: supportability_event_1228_1229_1230
      description: "Event raised when collection support-files failed | failed to delete a given support-files | collection of support-files state changes"
      if: "['1228','1229','1230'].contains(ctx.event?.code)"
      patterns:
        - "^(Collection|Deletion) of support-files named %{DATA:file.name} failed due to %{GREEDYDATA:event.reason}."
        - "^Collection of support-files named %{DATA:file.name} is %{GREEDYDATA:aruba.state}."
  - dissect:
      field: message
      tag: supportability_event_1235
      description: "Logs reboot count information"
      if: "ctx.event?.code == '1235'"
      pattern: "Switch boot count is : %{aruba.status}"

    # LACP events (13xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LACP.htm
  - grok:
      field: message
      tag: lacp_event_1301_1302_1312_1313
      description: "Dynamic LAG|VSX has been created|deleted"
      if: "['1301','1302', '1312', '1313'].contains(ctx.event?.code)"
      patterns:
        - "^(Dynamic )?LAG %{DATA:aruba.instance.id} (created|deleted|set as VSX)"
        - "^Failed to create LAG %{GREEDYDATA:aruba.instance.id}"
  - dissect:
      field: message
      tag: lacp_event_1305
      description: "Log when LACP system priority is set"
      if: "['1305'].contains(ctx.event?.code)"
      pattern: "LACP system priority set to %{aruba.lacp.system_priority}"
  - dissect:
      field: message
      tag: lacp_event_1307
      description: "Log when LACP system ID is set"
      if: "['1307'].contains(ctx.event?.code)"
      pattern: "LACP system ID set to %{aruba.lacp.system_id}"
  - grok:
      field: message
      tag: lacp_event_1303_1304_1311_1314_1318
      description: "Log when interface has been added|removed to LAG"
      if: "['1303','1304','1311','1314','1318'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} added to LAG %{DATA:aruba.instance.id}. Existing configuration on interface %{DATA:aruba.interface.prev_id} will be removed"
        - "^Interface %{DATA:aruba.interface.id} removed from LAG %{DATA:aruba.instance.id}. It will be set with default configuration with admin down state"
        - "^Partner is lost \\(timed out\\) for interface %{DATA:aruba.interface.id} LAG %{DATA:aruba.instance.id}. State: %{GREEDYDATA:aruba.lacp.fsm_state}"
        - "^LAG %{DATA:aruba.instance.id} not sending LACPDUs through interface %{DATA:aruba.interface.id} because VSX information is not complete"
        - "^Interface %{DATA:aruba.interface.id} enabled by fallback for lag %{GREEDYDATA:aruba.instance.id}"
  - grok:
      field: message
      tag: lacp_event_1306_1308_1315_1316_1317_1320_1323
      description: "Log when LACP mode|rate|mode|timeout is set|expired | Logs to set global load balancing mode for LAG interfaces | Logs to capture if fallback is changed for LAG interface"
      if: "['1306','1308','1315','1316','1317','1320','1323'].contains(ctx.event?.code)"
      patterns:
        - "^LACP (mode set to %{DATA:aruba.lacp.mode}|rate set to %{DATA:aruba.lacp.rate}) for %{LAG_ID_GREEDY}"
        - "^LACP fallback mode set to %{DATA:aruba.lacp.fallback_mode} for %{LAG_ID_GREEDY}"
        - "^LACP fallback timeout( set to)? %{NUMBER:aruba.timeout:long}( expired)? for %{LAG_ID_GREEDY}"
        - "^LAG load balancing mode is set to %{DATA:aruba.lacp.mode} for %{LAG_ID_GREEDY}"
        - "^Fallback is %{DATA:aruba.lacp.fallback} for %{LAG_ID_GREEDY}"
      pattern_definitions:
        LAG_ID_GREEDY: "(LAG|lag) %{GREEDYDATA:aruba.instance.id}"
  - grok:
      field: message
      tag: lacp_event_1309_1310_1319_1321_1322
      description: "Dynamic LAG has event has been raised"
      if: "['1309','1310','1319','1321','1322'].contains(ctx.event?.code)"
      patterns:
        - "^Partner is detected for %{INTF_ID} %{LAG_ID}\\s?: %{DATA:aruba.lacp.partner_sys_id}. %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^Partner is out of sync for %{INTF_ID} %{LAG_ID}. %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^LAG global load balancing mode is set to %{GREEDYDATA:aruba.lacp.mode}"
        - "^%{LAG_ID} State change for interface %{DATA:aruba.interface.id}: %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^%{INTF_NAME} cannot be part of Lag %{NUMBER:aruba.lacp.lag_number:long}. Speed mismatched \\(Interface speed %{NUMBER:aruba.lacp.port_speed:long}Mbps Lag base speed %{NUMBER:aruba.lacp.lag_speed:long}Mbps\\)."
      pattern_definitions:
        LAG_ID: "(LAG|lag) %{DATA:aruba.instance.id}"
        INTF_ID: "(I|i)nterface %{DATA:aruba.interface.id}"
        INTF_NAME: "(I|i)nterface %{DATA:aruba.interface.name}"
        ACTOR_STATE: "Actor state: %{DATA:aruba.lacp.actor_state}"
        PARTNER_STATE: "(P|p)artner state %{GREEDYDATA:aruba.lacp.partner_state}"

    # LAG events (14xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LAG.htm
  - grok:
      field: message
      tag: lacp_event_1401_through_1414
      description: "Dynamic LAG has event has been raised"
      if: "['1401','1402','1403','1404','1405','1406','1407','1408','1409','1410','1411','1412','1413','1414'].contains(ctx.event?.code)"
      patterns:
        - "^Trunk set succeeds %{UNIT} %{LAG_ID_GREEDY}"
        - "^(Lag creation|Destroy lag) failed( on)? %{UNIT} %{LAG_ID} %{RC} %{ERROR}"
        - "^Trunk member add port succeeds on %{UNIT} %{PORT} %{TID}"
        - "^(Trunk port attach error on|Failed to set egress enable on|Failed to delete) %{PORT}( from)? %{TID} %{RC} %{ERROR}"
        - "^Trunk psc set failed on %{UNIT} %{LAG_ID} psc %{DATA:aruba.lag.psc} %{RC} %{ERROR}"
        - "^%{LAG_INTERFACE}, set to load balance mode to %{GREEDYDATA:aruba.lag.mode}"
        - "^(Remove|Add) %{PORT} (from|to) %{LAG_INTERFACE_GREEDY}"
        - "^(Remove|Add) %{PORT} to vlan %{DATA:network.vlan.id} for L3 %{LAG_INTERFACE_GREEDY}"
        - "^Destroy L3 %{LAG_INTERFACE_GREEDY}"
      pattern_definitions:
        ERROR: "(error )?%{GREEDYDATA:event.reason}"
        LAG_ID: "lag_id %{DATA:aruba.instance.id}"
        LAG_ID_GREEDY: "lag_id %{GREEDYDATA:aruba.instance.id}"
        LAG_INTERFACE: "LAG( interface)? %{DATA:aruba.interface.id}"
        LAG_INTERFACE_GREEDY: "LAG( interface)? %{GREEDYDATA:aruba.interface.id}"
        PORT: "(hw_)?port %{DATA:aruba.port}"
        RC: "rc %{DATA:error.code}"
        TID: "tid %{NUMBER:process.thread.id:long}"
        UNIT: "unit %{DATA:aruba.unit}"

    # CoPP Events (15xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/COPP.htm
    # The following Event IDs do not need further processing
    # * 1501
    # * 1502
    # * 1503
    # * 1504
    # * 1505
  - dissect:
      field: message
      tag: copp_event_1506
      description: "Logs failure of programming queue for a CoPP packet class"
      if: "ctx.event?.code == '1506'"
      pattern: "Packet class programming failed for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1507
      description: "Logs failure of programming ingress field processor for a COPP class"
      if: "ctx.event?.code == '1507'"
      pattern: "Failed to program ingress field processor rule for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1508
      description: "Logs failure of programming egress field processor for a COPP class"
      if: "ctx.event?.code == '1508'"
      pattern: "Failed to program egress rule for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1509
      description: "Logs CoPP initial initialization failure on a slot"
      if: "ctx.event?.code == '1509'"
      pattern: "CoPP initial initialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1510
      description: "Logs CoPP final initialization failure on a slot"
      if: "ctx.event?.code == '1510'"
      pattern: "CoPP final initialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1511
      description: "Logs CoPP deinitialization failure on a slot"
      if: "ctx.event?.code == '1511'"
      pattern: "CoPP deinitialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1512
      description: "Logs failure while configuring hardware on a slot for a CoPP class"
      if: "ctx.event?.code == '1512'"
      pattern: "Failed to configure hardware for CoPP on slot %{aruba.slot} class %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1513
      description: "Logs failure while retrieving statistics on a slot for a CoPP class"
      if: "ctx.event?.code == '1513'"
      pattern: "Failed to retrieve CoPP statistics from slot %{aruba.slot} class %{aruba.copp.class}"

    # Layer 3 Interface events (17xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/L3INTERFACE.htm
  - grok:
      field: message
      tag: l3_event_1701_1702
      description: "logs to create|deleted L3 interface"
      if: "['1701','1702'].contains(ctx.event?.code)"
      patterns:
        - "^L3-Interface %{DATA:aruba.interface.id}, (created|deleted)"
  - dissect:
      field: message
      tag: l3_event_1703
      description: "logs for admin state of L3 interface"
      if: "['1703'].contains(ctx.event?.code)"
      pattern: "Interface %{aruba.interface.id}, configured administratively %{aruba.state}"
  - dissect:
      field: message
      tag: l3_event_1704
      description: "logs errors while creating vlan for layer 3 interfaces."
      if: "['1704'].contains(ctx.event?.code)"
      pattern: "Failed to create %{network.vlan.id} for layer 3 interface %{aruba.interface.id}"
  - grok:
      field: message
      tag: l3_event_1705_1706
      description: "logs errors while destroying vlan for layer 3 interfaces | logs errors while destroying layer 3 interface."
      if: "['1705','1706'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to (destroy layer |delete an l)3 interface %{DATA:aruba.interface.id}( vlan %{DATA:network.vlan.id})?, error: %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: l3_event_1707_1708_1709_1710_1711_1712_1715_1716_1717_1718_1719_1720_1722
      description: "adding l3 hosts | deleting l3 hosts | [adding|deleted|failed] to get l3 hosts | "
      if: "['1707','1708','1709','1710','1711','1712','1715','1716','1717','1718','1719','1720','1722'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to (delete|add) %{HOST_IP}, %{ERROR}"
        - "^(Added|Deleted|Failed to get) %{HOST_IP}"
        - "^L3 interface %{ERROR}"
        # Note: sequence matters here, putting greedy data at the end
        - "^(Delete|Added|Add) route (%{DATA:aruba.prefix}, %{ERROR}|%{GREEDYDATA:aruba.prefix})"
        - "^Update: route state: %{GREEDYDATA:aruba.state}"
        - "^Error (deleting|creating) egress object for port %{DATA:aruba.port}, %{ERROR}"
      pattern_definitions:
        HOST_IP: "L3 host (entry|hit) for ip %{IP:host.ip}"
        ERROR: "error: %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: l3_event_1713_1714_1721_1723_1724_1725_1726_1727_1728_1729_1730_1731
      description: "nexthop [addition|deletion] | egress object [creation|deletion] | [ipv4|ipv6] address [update|delete] on interface | configuring hardware for IPMTU"
      if: "['1713','1714','1721','1723','1724','1725','1726','1727','1728','1729','1730','1731'].contains(ctx.event?.code)"
      patterns:
        - "^(Delete|Added) Nexthop %{IP:aruba.l3.nexthop}(, egress_id %{DATA:observer.egress.interface.id},)? for route %{GREEDYDATA:aruba.prefix}"
        - "^(Deleted|Created) L3 egress ID %{DATA:observer.egress.interface.id} for port (%{DATA:aruba.port} intf %{GREEDYDATA:aruba.interface.id}|%{GREEDYDATA:aruba.port})"
        - "^%{INTERFACE},( configured with)? %{SERVER_IP}"
        - "^IPv6 Address Status: %{INTERFACE}, address %{IPORHOST:server.address}, status %{GREEDYDATA:aruba.status}"
        - "^%{INTERFACE}, configured with secondary %{SERVER_IP}"
        - "^%{INTERFACE}, secondary %{SERVER_IP}"
        - "^IP MTU %{DATA:aruba.mtu} not applied due to hardware resource limitation"
      pattern_definitions:
        SERVER_IP: "(ipv6|ipv4) address( deleted)? %{IP:server.ip}"
        INTERFACE: "(I|i)nterface %{DATA:aruba.interface.id}"

  # ECMP Events (18xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ECMP.htm
  - grok:
      field: message
      tag: ecmp_event_1801
      description: "logs errors while creating ecmp group."
      if: "ctx.event?.code == '1801'"
      patterns:
        - "Failed to update ecmp object for route %{DATA:aruba.ecmp.route}, error: %{DATA:aruba.ecmp.err}$"
  - grok:
      field: message
      tag: ecmp_event_1802
      description: "logs while creating ecmp group."
      if: "ctx.event?.code == '1802'"
      patterns:
        - "Update ecmp object for route %{DATA:aruba.ecmp.route}$"
  - grok:
      field: message
      tag: ecmp_event_1803
      description: "logs errors while deleting ecmp group."
      if: "ctx.event?.code == '1803'"
      patterns:
        - "Failed to delete ecmp egress object %{DATA:aruba.ecmp.egressid}, error: %{DATA:aruba.ecmp.err}$"
  - dissect:
      field: message
      tag: ecmp_event_1804
      description: "logs while deleting ecmp group."
      if: "ctx.event?.code == '1804'"
      pattern: "Delete ecmp egress object %{aruba.ecmp.egressid}"
  - grok:
      field: message
      tag: ecmp_event_1805
      description: "logs for ECMP setup errors."
      if: "ctx.event?.code == '1805'"
      patterns:
        - "ECMP error: %{DATA:aruba.ecmp.err}$"

  # DHCP Server events (19xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DHCP-SERVER.htm
  - grok:
      field: message
      tag: dhcp_server_event_1901_through_1906
      description: "Logs DHCP lease addition, deletion, or update"
      if: "['1901', '1902', '1903', '1904', '1905', '1906'].contains(ctx.event?.code)"
      patterns:
        - "^DHCP Lease (added|addition|deleted|deletion|update|updated)( failed)? %{DHCP_EXPIRE_TIME_FMT:event.end} %{MAC:host.mac} %{IP:host.ip} %{HOSTNAME:host.name} %{DATA:user.id}$"
      pattern_definitions:
        DHCP_EXPIRE_TIME_FMT: "(?:(?:[0-9]{2}:){2}([0-9]){2})"
  - grok:
      field: message
      tag: dhcp_server_event_1907_1908
      description: "Logs enable or disable of DHCP server on a VRF"
      if: "['1907', '1908'].contains(ctx.event?.code)"
      patterns:
        - "^DHCP server (en|dis)abled on VRF %{DATA:aruba.vrf.name}$"
  - dissect:
      field: message
      tag: dhcp_server_event_1909
      description: "Event raised when user configures an invalid DHCP configuration"
      if: "ctx.event.code == '1909'"
      pattern: "Invalid DHCP configuration: %{aruba.dhcp.config} provided on DHCP Server instance running on VRF %{aruba.vrf.name}. Ignoring this config."
  - grok:
      field: message
      tag: dhcp_server_event_1910_1911
      description: "Event raised when DHCP or DHCPv6 Server Lease on the VRF is cleared"
      if: "['1910', '1911'].contains(ctx.event?.code)"
      patterns:
        - "^(DHCP|DHCPv6) Server Lease cleared on vrf %{DATA:aruba.vrf.name}\\.$"

    # Multiple spanning tree protocol events (20xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MSTP.htm
  - grok:
      field: message
      tag: mstp_event_2003_2004
      description: "the MSTP config parameter is bad | switch received a BPDU with a bad config"
      if: "['2003','2004'].contains(ctx.event?.code)"
      patterns:
        - "^(BPDU has )?%{DATA:aruba.mstp.config_parameter} (should be|from port) %{GREEDYDATA:aruba.mstp.config_value}"
  - dissect:
      field: message
      tag: mstp_event_2005
      description: "the MSTP reconfig parameter is bad"
      if: "['2005'].contains(ctx.event?.code)"
      pattern: "Bad reconfiguration request: %{aruba.mstp.reconfig_parameter}"
  - grok:
      field: message
      tag: mstp_event_2006_2008_2018
      description: "MSTP root has changed | Rx queue is starved in the paticular port | root port has changed"
      if: "['2006','2008','2018'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.mstp.proto} - Root changed from %{DATA:aruba.mstp.old_priority}: %{MAC:aruba.mstp.old_mac} to %{DATA:aruba.priority}: %{MAC:source.mac}"
        # variation between customer logs and documentation
        - "^%{DATA:aruba.mstp.proto} starved for (a)? %{DATA:aruba.mstp.pkt_type} on port %{DATA:aruba.port} from %{GREEDYDATA:aruba.mstp.priority_mac}"
        - "^%{DATA:aruba.mstp.proto} Root Port changed from %{DATA:aruba.mstp.old_port} to %{GREEDYDATA:aruba.port}"
  - grok:
      field: message
      tag: mstp_event_2007_2009_2010_2011_2012_2013_2014_2015_2016_2017
      description: "BPDU was received on protected port | [port|MSTP] is in inconsistent state | topology change is [received|generated] on port | BPDU received on admin edge port | port is blocked"
      if: "['2007','2009','2010','2011','2012','2013','2014','2015','2016','2017'].contains(ctx.event?.code)"
      patterns:
        - "^Port %{DATA:aruba.port} disabled - BPDU received on protected port"
        - "^(BPDU loss- p|P)ort %{DATA:aruba.port} moved (to|out of) inconsistent state for %{GREEDYDATA:aruba.mstp.proto}"
        - "^Topology Change received on port %{DATA:aruba.port} for %{DATA:aruba.mstp.proto} from source: %{MAC:source.mac}"
        - "^%{DATA:aruba.mstp.proto} - Topology Change generated on port %{DATA:aruba.port} going in to %{GREEDYDATA:aruba.state}"
        - "^BPDU received on admin edge port %{GREEDYDATA:aruba.port}"
        - "^Port %{DATA:aruba.port} (un)?blocked on CIST"
        - "^Port %{DATA:aruba.port} (un)?blocked on MST%{GREEDYDATA:aruba.instance.id}"
  - dissect:
      field: message
      tag: mstp_event_2019
      description: "the spanning tree mode is changed"
      if: "['2019'].contains(ctx.event?.code)"
      pattern: "spanning tree mode changed from %{aruba.mstp.old_mode} to %{aruba.mstp.new_mode}, it will trigger the reconvergence"

  # Redundant Management events (220x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/REDUNDANT_MANAGEMENT.htm
  - dissect:
      if: "ctx.event.code == '2201'"
      tag: redundant_mgmt_event_2201
      field: "message"
      description: "This log event informs that failover event is detected"
      pattern: "Failover detected: Reason %{event.reason}"
  - grok:
      if: "['2204','2205'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2204_2205
      field: "message"
      description: "This log event informs about the status of [Active|Standby] mgmt module"
      patterns:
        - "^%{DATA:aruba.redundant.mgmt_module} is (Active|Standby)"
  - grok:
      if: "['2202','2206'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2204_2205
      field: "message"
      description: "This log event informs that standby mgmt module has been removed | added to the system"
      patterns:
        - "^(Lost|Detected) %{DATA:aruba.redundant.mgmt_module} as Standby Management Module, redundancy (disabled|enabled)"
  - grok:
      if: "['2208','2209'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2208_2209
      field: "message"
      description: "This log event informs the user that filesync is in progress | an ISSU operation has begun"
      patterns:
        - "^%{DATA:aruba.redundant.mgmt_module} is (waiting for filesync|starting ISSU operation)"

  # AAA events (23xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/AAA.htm
  - grok:
      if: "ctx.event.code == '2301'"
      tag: aaa_event_2301
      field: "message"
      description: "Logs AAA Authentication/Authorization/Accounting/fail-through"
      patterns:
        - "^AAA %{DATA:aruba.aaa.config_type} update\\s?:\\s?%{GREEDYDATA:aruba.aaa.config_event}"
  - grok:
      if: "ctx.event.code == '2302'"
      tag: aaa_event_2302
      field: "message"
      description: "Logs TACACS+ server update, server group update and global default update"
      patterns:
        - "^TACACS %{GREEDYDATA:aruba.aaa.tacacs_type} %{DATA:aruba.aaa.tacacs_action}:\\s?%{GREEDYDATA:aruba.aaa.tacacs_event}"
  - grok:
      if: "ctx.event.code == '2303'"
      tag: aaa_event_2303
      field: "message"
      description: "Logs RADIUS server update, server group update and global default update"
      patterns:
        - "^RADIUS %{GREEDYDATA:aruba.aaa.radius_type} %{DATA:aruba.aaa.radius_action}:\\s?%{GREEDYDATA:aruba.aaa.radius_event}"
  - dissect:
      if: "ctx.event.code == '2304'"
      tag: aaa_event_2304
      field: "message"
      description: "Logs changes in RADIUS server reachability status"
      pattern: 'RADIUS Server with Address: %{server.address}, Authport:%{aruba.port}, VRF_ID:%{aruba.vrf.id} is "%{aruba.status}"'
  - dissect:
      if: "ctx.event.code == '2305'"
      tag: aaa_event_2305
      field: "message"
      description: "Logs changes in TACACS server reachability status"
      pattern: "TACACS server host %{server.address} port %{aruba.port} vrf %{aruba.vrf.id} %{aruba.status}"

    # OSPFv2 events (2401)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/OSPFv2.htm
  - grok:
      field: message
      tag: ospfv2_event_2401_2402_2404
      description: "Logs the changes in OSPFv2 neighbour state machine | changes in the interface FSM state."
      if: "['2401','2402','2404'].contains(ctx.event?.code)"
      patterns:
        - "%{ADJCHG}%{AREA}: %{STATE_CHANGE}"
        - "%{ADJCHG}: %{STATE_CHANGE} \\(%{DATA:aruba.ospf.event}\\)"
        - "^Interface %{DATA:aruba.interface.id}%{AREA} changed from %{STATE_CHANGE}, input: %{GREEDYDATA:aruba.ospf.input}"
      pattern_definitions:
        ADJCHG: "^AdjChg: Nbr %{DATA:aruba.ospf.router_id} on %{DATA:aruba.interface.id}"
        AREA: "\\(%{DATA:aruba.ospf.area}\\)"
        STATE_CHANGE: "%{DATA:aruba.ospf.old_state} (->|to) %{GREEDYDATA:aruba.state}"
  - dissect:
      field: message
      tag: ospfv2_event_2403
      description: "Logs OSPFv2 route add and delete."
      if: "ctx.event?.code == '2403'"
      pattern: "%{aruba.ospf.event} with %{destination.address} %{aruba.ospf.nexthops}"
  - dissect:
      field: message
      tag: ospfv2_event_2405
      description: "Logs the changes in the router-id."
      if: "['2405'].contains(ctx.event?.code)"
      pattern: "Router-id updated from %{aruba.ospf.old_router_id} to %{aruba.ospf.router_id}"
  - dissect:
      field: message
      tag: ospfv2_event_2406
      description: "Logs failed action with rule error"
      if: "['2406'].contains(ctx.event?.code)"
      pattern: "Failed to %{event.action} %{rule.name} error: %{event.reason}"
  - grok:
      field: message
      tag: ospfv2_event_2407_2408
      description: "Logs for OSPFv2 [FP|DR FP] creation/installation."
      if: "['2407','2408'].contains(ctx.event?.code)"
      patterns:
        - "^OSPF (all|designated) routers field entry added: group_id=%{DATA:group.id} fp_id=%{DATA:aruba.ospf.fp_id} stat_id=%{GREEDYDATA:aruba.ospf.stats_id}"

    # MGMD events (26xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MGMD.htm
  - grok:
      field: message
      tag: mgmd_event_2601_through_2622
      description: "The following are the events related to MGMD"
      if: "['2601','2602','2603','2604','2605','2606','2607','2608','2609','2610','2611','2612','2613','2614','2619','2620','2621','2622'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to alloc a %{DATA:aruba.mgmd.pkt_type} pkt\\(%{VLAN}\\)"
        - "^Received (IGMPv1|IGMPv2|MLDV1|MLDV2) query from %{IP:client.ip} when the device is configured for"
        - "^Unable to alloc a buf of size %{NUMBER:aruba.len:long} for %{GREEDYDATA:aruba.subsystem}"
        - "^%{INTERFACE}: Other Querier detected for %{GREEDYDATA:aruba.mgmd.mgmd_type}"
        - "^%{INTERFACE}: End %{DATA:aruba.mgmd.mgmd_type} Querier role"
        - "^%{DATA:aruba.mgmd.mgmd_type} Querier Election in progress for %{INTERFACE} with IP address %{IP:client.ip}"
        - "^%{INTERFACE}: Start %{DATA:aruba.mgmd.mgmd_type} Querier role addr: %{IP:client.ip}"
        - "^Received packet from %{IP:client.ip}, type %{DATA:aruba.mgmd.mgmd_type}, on invalid port %{GREEDYDATA:aruba.port}"
        - "^%{DATA:aruba.mgmd.mgmd_type} snooping is %{DATA:aruba.status} on %{VLAN}."
        - "^%{DATA:aruba.mgmd.mgmd_type} is %{DATA:aruba.status} on %{INTERFACE_GREEDY}"
        - "^Port %{DATA:aruba.port} on %{VLAN} is set to %{DATA:aruba.status} mode for %{DATA:aruba.mgmd.mgmd_type}."
        - "^%{DATA:aruba.mgmd.mgmd_type} is not operational on VLAN %{DATA:network.vlan.id} due to resource unavailability"
        - "^Received IGMPv3 query from %{IP:client.ip} when the device is configured for IGMPv2"
        - "^Flood mode is temporarily activated on ERPS ports %{DATA:aruba.port} and %{DATA:aruba.mgmd.port1} as ring state for ring id %{DATA:aruba.mgmd.ring_id} changed to %{GREEDYDATA:aruba.state}."
      pattern_definitions:
        VLAN: "(vlan|VLAN|interface) %{DATA:network.vlan.id}"
        VLAN_GREEDY: "(vlan|VLAN|interface) %{GREEDYDATA:network.vlan.id}"
        INTERFACE: "(I|i)nterface %{DATA:aruba.interface.id}"
        INTERFACE_GREEDY: "(I|i)nterface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      field: message
      tag: mgmd_event_2615_2618
      description: "IGMP/MLD is disabled on a L3 interface due to internal errors | IGMP/MLD snooping is operational"
      if: "['2615','2618'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.mgmd.mgmd_type} is not operational on interface %{DATA:aruba.mgmd.l3_port} due to resource unavailability"
        - "^%{DATA:aruba.mgmd.mgmd_type} snooping is %{DATA:aruba.status} on VLAN %{GREEDYDATA:network.vlan.id}."

    # Replication Manager events (270x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/REPLD.htm
  - dissect:
      field: message
      tag: replication_mgr_event_2705
      description: "Log indicates Mutlicast L3 Bridge Control Forwarding entry with uuid has no reference to a VLAN"
      if: "ctx.event?.code == '2705'"
      pattern: "Multicast L3 Bridge Control Forwarding entry with uuid %{aruba.instance.id} has no reference to a VLAN"

    # Loop Protect events (280x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LOOP-PROTECT.htm
  - grok:
      field: message
      tag: loop_protect_event_2801_through_2808
      description: "Logs Loop protect events"
      if: "['2801','2802','2803','2804','2805','2806','2807','2808'].contains(ctx.event?.code)"
      patterns:
        - "^Ports TX %{DATA:aruba.loop.tx_port} and RX %{DATA:aruba.loop.rx_port} are disabled by Loop-protect after loop detection on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^(Loop detected on port|Port) %{DATA:aruba.port}( is disabled by Loop-protection after loop detection)? on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^Port %{DATA:aruba.port} enabled after disable time expired"
        - "^Port %{DATA:aruba.port} (added for|deleted from) loop-protection"
        - "^Loop-Protection stats cleared for port %{GREEDYDATA:aruba.port}"
        - "^Ports TX %{DATA:aruba.loop.tx_port} and RX %{DATA:aruba.loop.rx_port} are involved during TX port disabling"

  # BGP events (29xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/BGP.htm
  - dissect:
      if: "ctx.event.code == '2901'"
      tag: bgp_event_2901
      field: "message"
      description: "Logs the changes in BGP connection state."
      pattern: "%{destination.address}: Peer up. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2902'"
      tag: bgp_event_2902
      field: "message"
      description: "Logs the failure in BGP connection state changes."
      pattern: "%{destination.address}: Peer down. error-code: %{error.code}, error-sub-code: %{aruba.bgp.error_subcode}. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "['2903', '2904'].contains(ctx.event?.code)"
      tag: bgp_event_2903_2904
      field: "message"
      description: "Trap when the number of received prefix reached the [threshold|maximum prefix] value."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer has received prefix equal to (Maximum Prefix|Threshold) value configured. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "['2905', '2906'].contains(ctx.event?.code)"
      tag: bgp_event_2905_2906
      field: "message"
      description: "Logs BGP enable event | Logs BGP disable event"
      patterns:
        - "^BGP AS %{NUMBER:aruba.bgp.as_number:long} %{WORD}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2907'"
      tag: bgp_event_2907
      field: "message"
      description: "Logs BGP router-id change."
      pattern: "BGP router-id changed. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2908'"
      tag: bgp_event_2908
      field: "message"
      description: "Logs creation of BGP peer."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer configured, AS %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2909'"
      tag: bgp_event_2909
      field: "message"
      description: "Logs BGP peer session reset event."
      pattern: "%{destination.address}: User reset request. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2910'"
      tag: bgp_event_2910
      field: "message"
      description: "Logs BGP peer password change event."
      pattern: "%{destination.address}: Peer password changed. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2911'"
      tag: bgp_event_2911
      field: "message"
      description: "Logs deletion of BGP peer."
      pattern: "%{destination.address}: Peer deleted. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "['2912', '2913'].contains(ctx.event?.code)"
      tag: bgp_event_2912_2913
      field: "message"
      description: "Logs BGP peer admin enable/disable event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer admin (dis|en)abled. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2914'"
      tag: bgp_event_2914
      field: "message"
      description: "Logs BGP peer remote-as change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer remote-as changed to %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2915'"
      tag: bgp_event_2915
      field: "message"
      description: "BGP peer local-as change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer local-as changed to %{NUMBER:client.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2916'"
      tag: bgp_event_2916
      field: "message"
      description: "Logs peer source address change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer source-address changed to %{IP:source.ip}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2917'"
      tag: bgp_event_2917
      field: "message"
      description: "Logs configuration of peer remove-private-as."
      pattern: "%{destination.address}: Peer remove-private-as configuration changed. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2918'"
      tag: bgp_event_2918
      field: "message"
      description: "Logs peer identifier has been matched with local identifier."
      pattern: "%{aruba.bgp.id}: BGP identifier sent by Peer %{destination.address} matches ours. BGP session may not established. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2919'"
      tag: bgp_event_2919
      field: "message"
      description: "Trap when the rib size reaches the threshold value."
      patterns:
        - "^The BGP RIB has reached the threshold limit of %{DATA:aruba.limit.threshold} for VRF %{DATA:aruba.vrf.name}': yes"
  - grok:
      if: "ctx.event.code == '2920'"
      tag: bgp_event_2920
      field: "message"
      description: "BGP peer local-as change event."
      patterns:
        - "^%{DATA:aruba.bgp.pg_name}: Peer-group configured with remote-as %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"

  # Hardware Health Monitor events (30xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/HW-HEALTH-MONITOR.htm
  - grok:
      if: "['3001', '3002', '3003', '3004', '3005'].contains(ctx.event?.code)"
      tag: hwhm_event_3001_3002_3003_3004_3005
      field: "message"
      description: "Event raised when hardware diagnostics detects error in management module | line card | fabric card | fan tray | rear display card"
      patterns:
        - "^Diagnostic %{DATA:aruba.hardware.test_name} failed with error code %{DATA:error.code} on (management module|line card|fabric card|fan tray|rear display card) %{GREEDYDATA:aruba.slot:long}"
  - dissect:
      if: "ctx.event.code == '3006'"
      tag: hwhm_event_3006
      field: "message"
      description: "Event raised when hardware diagnostics detects error in the system"
      pattern: 'Diagnostic %{aruba.hardware.test_name} failed with error code %{error.code} for the system'
  - dissect:
      if: "ctx.event.code == '3007'"
      tag: hwhm_event_3007
      field: "message"
      description: "Logs MCE BUS error"
      pattern: 'There are %{aruba.hardware.origin} happening on %{aruba.hardware.location}'
  - grok:
      if: "['3008', '3009'].contains(ctx.event?.code)"
      tag: hwhm_event_3008_3009
      field: "message"
      description: "Logs MCE [IO | unknown] error "
      patterns:
        # Warning: 3009 and 3008 pattern definition sequence matters, as 3009 is more strict than 3008
        - "^There are (IO|unknown) errors on %{DATA:aruba.hardware.location} from (%{3009_UNKNKOWN_FIELDS}|%{3008_IO_FIELDS})"
      pattern_definitions:
        3008_IO_FIELDS: "%{DATA:aruba.hardware.seg}:%{DATA:aruba.hardware.bus}:%{DATA:aruba.hardware.device}:%{GREEDYDATA:aruba.hardware.function}"
        3009_UNKNKOWN_FIELDS: "%{DATA:aruba.status}:%{DATA:aruba.hardware.addr}:%{DATA:aruba.hardware.misc}:%{DATA:aruba.hardware.mcgstatus}:%{GREEDYDATA:aruba.hardware.cap}"
  - grok:
      if: "ctx.event.code == '3010'"
      tag: hwhm_event_3010
      field: "message"
      description: "Logs CPU cache error"
      patterns:
        - "^CPUs %{NUMBER:aruba.hardware.cpus:long} L%{DATA:aruba.hardware.level} %{DATA:aruba.hardware.type} cache error detected. CPUs %{NUMBER:aruba.hardware.offlined:long} offlined"
  - grok:
      if: "['3011', '3012', '3013'].contains(ctx.event?.code)"
      tag: hwhm_event_3011_3012_3013
      field: "message"
      description: "Log when [socket | module | page] correctable memory error count is exceeded threshold"
      patterns:
        - "^Socket %{DATA:aruba.hardware.socket} %{3011_3012_3013_COMMON}"
        - "^Module %{DATA:aruba.hardware.channel} %{3011_3012_3013_COMMON}"
        - "^Page %{DATA:aruba.hardware.page} %{3011_3012_3013_COMMON}"
      pattern_definitions:
        3011_3012_3013_COMMON: "correctable memory error count %{NUMBER:aruba.hardware.cecount:long} exceeded threshold %{NUMBER:aruba.limit.threshold}(?:%{3011_3012_3013_OPTIONAL})?"
        3011_3012_3013_OPTIONAL: " and %{NUMBER:aruba.hardware.offlined:long}"

    # MVRP events (310x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MVRP.htm
  - grok:
      field: message
      tag: mvrp_event_3101_3102_3103_3104_3105
      description: ""
      if: "['3101','3102','3103','3104','3105'].contains(ctx.event?.code)"
      patterns:
        - "^MVRP (en|dis)abled on port %{GREEDYDATA:aruba.port}"
        - "^MVRP failed to create VLAN %{DATA:network.vlan.id}. Maximum VLANs %{DATA:aruba.limit.threshold} already created"
        - "^MVRP statistics have been cleared for (%{3104_PATTERN}|%{3105_PATTERN})"
      pattern_definitions:
        3104_PATTERN: "port %{GREEDYDATA:aruba.port}"
        3105_PATTERN: "%{DATA:aruba.port} ports"

    # Module events (32xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MODULE.htm
  - grok:
      field: message
      tag: module_event_3201_through_3240_common
      description: "The following are the events related to module."
      if: "['3201','3202','3203','3204','3206','3208','3209','3210','3211','3212','3213','3214','3216','3217','3218','3219','3220','3221','3222','3224','3225','3227','3228','3234','3235','3236','3237','3238','3240'].contains(ctx.event?.code)"
      patterns:
        - "%{DATA:aruba.module.type} module %{DATA:aruba.module.name}\\s"
  - grok:
      field: message
      tag: module_event_3205_3207_3215_3223_3226_3229_3230_3231_3232_3233_3239
      description: "The following are the events related to module that exhibit extra fields other than module type and name."
      if: "['3205','3207','3215','3223','3226','3229','3230','3231','3232','3233','3239'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} (is down|has failed): %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} device initialization failed: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} ASIC (denitialization|deinitialization|initialization) failed: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} disabling front-end power: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} configured with product number %{GREEDYDATA:aruba.unit}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} is requesting to power on with priority %{GREEDYDATA:aruba.priority}"
        - "^%{DATA:aruba.module.name} is starting zeroization"
        - "^%{DATA:aruba.module.name} zeroization (completed|failed)"

  # IRDP events (350x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IRDP.htm
  - grok:
      if: "['3501', '3502'].contains(ctx.event?.code)"
      tag: firmware_update_event_3501_3502
      field: "message"
      description: "This command [enables|disable] the IRDP (ICMP Router Discovery Protocol) feature on interface."
      patterns:
        - "^IRDP (en|dis)abled on interface %{GREEDYDATA:aruba.interface.id}"

  # IPv6 Router Advertisement events (39xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IPV6-RA.htm
  - grok:
      if: "['3901', '3902', '3903', '3904', '3905', '3906', '3907', '3908', '3909', '3910', '3911', '3912', '3913', '3914', '3915', '3916', '3917', '3918', '3919'].contains(ctx.event?.code)"
      tag: ipv6_router_event
      field: "message"
      description: "Event raised when ipv6 router changes occurs"
      patterns:
        - "^ipv6 ra (dis|en)abled on interface: %{GREEDYDATA:aruba.interface.id}"
        - "^(Dis|En)abled sending (MTU|RDNSS|DNSSL) in Router-Advertisement messages on %{GREEDYDATA:aruba.interface.id}"
        - "^Interface: %{DATA:aruba.interface.id} is (added to|deleted from) router discovery"
        - "^(Added|Deleted) ipv6 prefix: %{IP:server.ip}/%{NUMBER:aruba.len:long} (on|from) interface: %{GREEDYDATA:aruba.interface.id}"
        - "^(Added|Deleted) RA Prefix: %{DATA:aruba.prefix} on interface: %{DATA:aruba.interface.id} (to|from) prefix list"
        - "^default prefix is configured on interface %{GREEDYDATA:aruba.interface.id}"
        - "^(RDNSS|DNSSL) is (added|deleted) on interface: %{GREEDYDATA:aruba.interface.id}"

    # Multicast Traffic Manager events (400x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MTM.htm
  - dissect:
      field: message
      tag: multicast_traffic_mgr_event_4001
      description: "Event raised when the maximum number of multicast L3 Bridge Control Forwarding entries is reached"
      if: "ctx.event?.code == '4001'"
      pattern: "The Multicast L3 Bridge Control Forwarding entries limit was reached: %{aruba.limit.threshold}"

    # Proxy ARP events (420x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PROXY-ARP.htm
  - grok:
      field: message
      tag: proxy_arp_event_4205_4206_4207_4208
      description: "Logs a message when the feature is [enabled|disable] for a port inside a VRF | Logs a message when the feature [enable|disable] fails for a port inside a VRF"
      if: "['4205','4206','4207','4208'].contains(ctx.event?.code)"
      patterns: 
        - "^Local proxy ARP (enabled|disabled) for port %{DATA:aruba.port} on vrf %{GREEDYDATA:aruba.vrf.id}"
        - "^Failed to (enable|disable) local proxy ARP for port %{DATA:aruba.port} on vrf %{GREEDYDATA:aruba.vrf.id}"

    # Management events (430x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MGMT.htm
  - grok:
      field: message
      tag: mgmt_event_4301
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4301'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_param})"
  - grok:
      field: message
      tag: mgmt_event_4302
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4302'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_err})"
  - grok:
      field: message
      tag: mgmt_event_4303
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4303'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_crit})"
  - json:
      if: "ctx.event?.code == '4301' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_param
  - json:
      if: "ctx.event?.code == '4302' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_err
  - json:
      if: "ctx.event?.code == '4303' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_crit

  # Firmware Update events (44xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/FIRMWARE_UPDATE.htm
  # Following events do not need further processing
  #   * 4405
  #   * 4406
  #   * 4407
  - grok:
      if: "['4401', '4402'].contains(ctx.event?.code)"
      tag: firmware_update_event_4401_4402
      field: "message"
      description: "Indicates that the switch firmware was successfully updated from a remote or local source"
      patterns:
        - "^User %{DATA:user.name}: %{DATA:aruba.firmware.image_profile} image updated via %{DATA:aruba.firmware.dnld_type}( from %{HOSTNAME:source.address})?. Firmware version, Before Update: %{DATA:aruba.firmware.before} After Update: %{DATA:aruba.firmware.after}$"
  - grok:
      if: "['4403', '4404'].contains(ctx.event?.code)"
      tag: firmware_update_event_4403_4404
      field: "message"
      description: "Indicates that a switch firmware update failed from a remote or local source"
      patterns:
        - "^User %{DATA:user.name}: %{DATA:aruba.firmware.image_profile} image update failed via %{DATA:aruba.firmware.dnld_type}( from %{HOSTNAME:source.address})?$"

    # MAC Learning events (480x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MAC-LEARN.htm
  - grok:
      field: message
      tag: mac_learn_event_4801_through_4805
      description: "The following are the events related to MAC learning."
      if: "['4801','4802','4803','4804','4805'].contains(ctx.event?.code)"
      patterns:
        - "^MAC %{MAC:server.mac} moved from port %{DATA:aruba.interface.prev_id} to port %{DATA:aruba.interface.id} on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^All dynamic MAC addresses on VLAN %{DATA:network.vlan.id} were flushed"
        - "^All dynamic MAC addresses on port %{DATA:aruba.interface.id} were flushed"

    # OSPFv3 events (490x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/OSPFv3.htm
  - dissect:
      field: message
      tag: ospfv3_event_4901
      description: "Logs errors for OSPFv3 FP creation/installation."
      if: "['4901'].contains(ctx.event?.code)"
      pattern: "Failed to %{event.action} %{rule.name} error: %{event.reason}"
  - grok:
      field: message
      tag: ospfv3_event_4902
      description: "[DR FP|FP] creation/installation | changes to neighbour state machine | changes in the interface FSM state"
      if: "['4902','4903','4904','4905'].contains(ctx.event?.code)"
      patterns:
        - "^OSPF3 (all|designated) routers field entry added: group_id=%{DATA:group.id} fp_id=%{DATA:aruba.ospf.fp_id} stat_id=%{GREEDYDATA:aruba.ospf.stats_id}"
        - "^AdjChg: Nbr%{DATA:aruba.ospf.router_id} on %{INTERFACE_AREA}: %{STATE_CHANGE}"
        - "^%{INTERFACE_AREA} changed from %{STATE_CHANGE}, input: %{GREEDYDATA:aruba.ospf.input}"
      pattern_definitions:
        INTERFACE_AREA: "(I|i)nterface %{DATA:aruba.ospf.link_local} on %{DATA:aruba.interface.id}\\(%{DATA:aruba.ospf.area}\\)"
        STATE_CHANGE: "%{DATA:aruba.ospf.old_state} (->|to) %{GREEDYDATA:aruba.state}"

  # Rapid per VLAN Spanning Tree Protocol events (500x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/RPVST.htm
  - dissect:
      if: "ctx.event?.code == '5003'"
      tag: rpvst_event_5003
      field: "message"
      description: "This log event indicates that RPVST root on a VLAN has changed"
      pattern: "RPVST - Root changed from %{aruba.rpvst.old_priority}: %{aruba.rpvst.old_mac} to %{aruba.priority}: %{client.mac} on VLAN %{network.vlan.id}."
  - dissect:
      if: "ctx.event?.code == '5004'"
      tag: rpvst_event_5004
      field: "message"
      description: "This log event informs the user BPDU received on protected port"
      pattern: "Port %{aruba.port} disabled - BPDU received on protected port on VLAN %{network.vlan.id}."
  - dissect:
      if: "ctx.event?.code == '5005'"
      tag: rpvst_event_5005
      field: "message"
      description: "This log event informs the user that the Rx is starved in paticular port"
      pattern: "%{aruba.rpvst.proto} starved for %{aruba.rpvst.pkt_type} on port %{aruba.port} from %{client.mac} on VLAN %{network.vlan.id}."
  - grok:
      if: "['5006','5007'].contains(ctx.event?.code)"
      tag: rpvst_event_5006_5007
      field: "message"
      description: "This log event informs the user that the RPVST topology change is [received|generated]"
      patterns:
        - "^Topology change (received|generated) on port %{DATA:aruba.port}( from source: %{MAC:client.mac})? on VLAN %{DATA:network.vlan.id}."
  - grok:
      if: "['5008','5009'].contains(ctx.event?.code)"
      tag: rpvst_event_5008_5009
      field: "message"
      description: "This log event informs the user that the port is [unblocked|blocked] on the instance"
      patterns:
        - "^Port %{DATA:aruba.port} (unblocked|blocked) on RPVST %{GREEDYDATA:aruba.instance.id}"
  - dissect:
      if: "ctx.event?.code == '5010'"
      tag: rpvst_event_5010
      field: "message"
      description: "This log event informs the user that the root port is changed"
      pattern: "Root port changed from %{aruba.rpvst.old_port} to %{aruba.port} on VLAN %{network.vlan.id}."
  - grok:
      if: "ctx.event?.code == '5011'"
      tag: rpvst_event_5011
      field: "message"
      description: "Log event when the PVID mismatches between the switch and neighbor over an interface"
      patterns:
        - "^PVID mismatch detected on %{DATA:aruba.interface.id} with pvid = %{DATA:aruba.rpvst.pvid}, Neighbor pvid = %{GREEDYDATA:aruba.rpvst.npvid}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5012'"
      tag: rpvst_event_5012
      field: "message"
      description: "This log event informs the user that the spanning tree mode is changed."
      pattern: "spanning tree mode changed from %{aruba.rpvst.old_mode} to %{aruba.rpvst.new_mode}, it will trigger the reconvergence."
  - grok:
      if: "ctx.event?.code == '5013'"
      tag: rpvst_event_5013
      field: "message"
      description: "Log event when the current virtual port count crosses the maximum allowed value"
      patterns: 
        - "^Current Virtual Ports %{NUMBER:aruba.limit.read_value:long} exceeds the max supported limit %{GREEDYDATA:aruba.limit.threshold}"


  # PIM events (51xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PIM.htm
  - grok:
      if: "ctx.event?.code == '5101'"
      field: message
      tag: pim_event_5101
      description: "Send error packet"
      patterns:
        - "^Failed to send %{DATA:aruba.pim.pkt_type} packet on Interface %{GREEDYDATA:aruba.interface.name}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5102'"
      field: message
      tag: pim_event_5102
      description: "Pim IP config"
      pattern: "PIM interface %{aruba.interface.name} is configured with IP %{server.ip}"
  - grok:
      if: "ctx.event?.code == '5103'"
      field: message
      tag: pim_event_5103
      description: "Packet dropped"
      patterns: 
        - "^Packet dropped from %{IP:server.ip} on interface %{DATA:aruba.interface.name} %{DATA:event.reason} %{GREEDYDATA:aruba.pim.error_value}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event?.code == '5104'"
      field: message
      tag: pim_event_5104
      description: "Received packet from router"
      patterns: 
        - "^Received packet from router %{IP:server.ip}, unkwn pkt type %{GREEDYDATA:aruba.pim.pkt_type}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event?.code == '5105'"
      field: message
      tag: pim_event_5105
      description: "Failed to add flow"
      patterns: 
        - "^Failed to add flow %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, %{IP_BIT:aruba.pim.sip0}.%{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{IP_BIT:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{NUMBER:aruba.pim.totalvid:long} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
      pattern_definitions:
        IP_BIT: "(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])"
  - grok:
      if: "ctx.event?.code == '5106'"
      field: message
      tag: pim_event_5106
      description: "Failed to remove flow for Hardware"
      patterns:
        - "^Failed to remove flow g %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, s %{IP_BIT:aruba.pim.sip0}, %{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{DATA:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
        # Added another pattern in case the documentation is incorrect, aligned this pattern with the 5105 pattern
        - "^Failed to remove flow %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, %{IP_BIT:aruba.pim.sip0}.%{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{IP_BIT:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
      pattern_definitions:
        IP_BIT: "(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])"
  - grok:
      if: "['5107', '5108'].contains(ctx.event?.code)"
      field: message
      tag: pim_event_5107_5108
      description: "Failed to program mroute as the limits are reached | sources per group limit is reached"
      patterns: 
        - "^Failed to add a mroute for s=%{IP:source.ip}, g=%{DATA:group.name} on interface %{DATA:aruba.interface.name} "
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5109'"
      field: message
      tag: pim_event_5109
      description: "PIM DR election log"
      pattern: "This router is elected as the %{aruba.pim.ip_version} %{aruba.state} for interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5110'"
      field: message
      tag: pim_event_5110
      description: "Multicast socket creation error"
      pattern: "%{aruba.pim.type} %{event.reason} failed with Fd: %{aruba.pim.fd} on Port: %{aruba.port}. Error description: %{aruba.error.description}"
  - grok:
      if: "ctx.event?.code == '5111'"
      field: message
      tag: pim_event_5111
      description: "DB Operation failed"
      patterns: 
        - "OVSDB operation failed with %{GREEDYDATA:event.reason}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5112'"
      field: message
      tag: pim_event_5112
      description: "Elected BSR"
      pattern: "New Elected BSR for VRF %{aruba.vrf.name} is %{aruba.pim.ebsr_ip} with priority %{aruba.priority}"
  - dissect:
      if: "ctx.event?.code == '5113'"
      field: message
      tag: pim_event_5113
      description: "Elected BSR removed"
      pattern: "Elected BSR removed on VRF %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event?.code == '5114'"
      field: message
      tag: pim_event_5114
      description: "Configured candidate BSR"
      pattern: "Candidate BSR %{server.ip} with priority %{aruba.priority} is %{aruba.status} on interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5115'"
      field: message
      tag: pim_event_5115
      description: "Neighbor status"
      pattern: "PIM Neighbor %{client.ip} is %{aruba.pim.event} on interface %{aruba.interface.name}"
  - grok:
      if: "ctx.event?.code == '5116'"
      field: message
      tag: pim_event_5116
      description: "Packet drop"
      patterns: 
        - "^%{NUMBER:network.packets:long} packet is discarded on interface %{DATA:aruba.interface.name}. Reason: %{GREEDYDATA:event.reason}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5117'"
      field: message
      tag: pim_event_5117
      description: "Interface operational status"
      pattern: "Forwarding state has changed to %{aruba.state} on %{aruba.pim.ip_version} enabled interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5118'"
      field: message
      tag: pim_event_5118
      description: "Interface PIM mode"
      pattern: "%{package.version} %{aruba.pim.mode} mode is %{aruba.status} on interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5119'"
      field: message
      tag: pim_event_5119
      description: "Router pim configuration status"
      pattern: "Router %{package.version} is %{aruba.pim.mode} on VRF %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event?.code == '5120'"
      field: message
      tag: pim_event_5120
      description: "Learnt or removed candidate RP"
      pattern: "Candidate RP %{server.ip} is %{aruba.pim.event} on VRF %{aruba.vrf.name}"
  - grok:
      if: "ctx.event?.code == '5121'"
      field: message
      tag: pim_event_5121
      description: "Software Packet Queue reaches threshold"
      patterns: 
        - "^Software Packet Queue %{DATA:aruba.limit.threshold} threshold value %{NUMBER:aruba.limit.read_value:long} reached. Queue size: %{NUMBER:aruba.pim.qsize:long}"
  - dissect:
      if: "ctx.event?.code == '5122'"
      field: message
      tag: pim_event_5122
      description: "PIM VSX DR Election log"
      pattern: "This router is elected as the %{aruba.pim.ip_version} VSX %{aruba.state} for interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5123'"
      field: message
      tag: pim_event_5123
      description: "VSX ISL Status update log"
      pattern: "VSX ISL Status changed to %{aruba.status}"
  - grok:
      if: "ctx.event?.code == '5124'"
      field: message
      tag: pim_event_5124
      description: "Configured candidate RP"
      patterns: 
        - "^Candidate RP %{IP:server.ip} is configured on interface %{GREEDYDATA:aruba.interface.name}"
  - grok:
      field: message
      tag: pim_event_5125_5126
      if: "['5125','5126'].contains(ctx.event?.code)"
      description: "BFD Session created or deleted"
      patterns:
        - "^BFD Session (created|deleted) for neighbor %{IP:server.ip} on interface %{GREEDYDATA:aruba.interface.name}"

  # SSH server events (520x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SSH_SERVER.htm
  - dissect:
      if: "ctx.event?.code == '5201'"
      tag: sftps_event_5201
      field: "message"
      description: "Logs a message when the SSH host-key generated"
      pattern: "SSH host-key %{aruba.ssh.key_name} is installed."
  - grok:
      if: "['5202', '5203'].contains(ctx.event?.code)"
      tag: sftps_event_5202_5203
      field: "message"
      description: "Logs a message when the SSH server is [enabled|disabled] on a VRF"
      patterns:
        - "^SSH server is (enabled|disabled) on VRF %{GREEDYDATA:aruba.vrf.name}."
  - grok:
      if: "['5204', '5205'].contains(ctx.event?.code)"
      tag: sftps_event_5204_5205
      field: "message"
      description: "Logs a message when [add|delete] ssh client-public-key into authorized_keys file"
      patterns:
        - "^SSH client-public-key %{DATA:aruba.ssh.key_name} was (installed|removed) for the user %{GREEDYDATA:user.name}."
  - dissect:
      if: "ctx.event?.code == '5207'"
      tag: sftps_event_5207
      field: "message"
      description: "Logs a message when the SSH host-key is corrupted"
      pattern: "An internal error occurred while reading the SSH host-key %{aruba.ssh.key_name}."
  - dissect:
      if: "ctx.event?.code == '5208'"
      tag: sftps_event_5208
      field: "message"
      description: "Logs a message when a user tries to enable SSH server without setting admin password"
      pattern: "Failed to enable SSH server on VRF %{aruba.vrf.name}. Admin password is not set."
  - grok:
      if: "['5209','5210','5211'].contains(ctx.event?.code)"
      tag: sftps_event_5209_5210_5211
      field: "message"
      description: "Logs a message when a user login is successful | failed | logout"
      patterns:
        - "^User %{DATA:user.name} (logged in|login) from %{IP:client.ip} "
        - "^User %{DATA:user.name} logged out of SSH session from %{IP:client.ip}."
  - grok:
      if: "['5212','5213','5214'].contains(ctx.event?.code)"
      tag: sftps_event_5212_5213_5214
      field: "message"
      description: "Logs a message when a user tries to login while maximum number of sessions are reached | user session is closed while maximum number of sessions per user are reached | session is closed due to host key failurE"
      patterns:
        - "^SSH session from %{IP:client.ip} "
        - "^SSH session from user %{DATA:user.name} closed because maximum number of sessions per user is reached."
  - grok:
      if: "['5215', '5216'].contains(ctx.event?.code)"
      tag: sftps_event_5215_5216
      field: "message"
      description: "Logs a message when a user login fails since the access through this management interface is not allowed | when a user login fails due to public key failure"
      patterns:
        - "^SSH session from %{IP:client.ip} for user %{DATA:user.name} denied. The allowed user management interfaces are: %{GREEDYDATA:aruba.interface.id}."
        - "^SSH session from %{IP:client.ip} for user %{DATA:user.name} rejected due to failed public key validation"
  - dissect:
      if: "ctx.event?.code == '5217'"
      tag: sftps_event_5217
      field: "message"
      description: "Logs a message when SSH server goes into an error state."
      pattern: "SSH server on VRF %{aruba.vrf.name} is in an error state."
  - grok:
      if: "['5218', '5219'].contains(ctx.event?.code)"
      tag: sftps_event_5218_5219
      field: "message"
      description: "Logs a message when SSH server (fails)? converts an IP address to CIDR format | "
      patterns:
        - "^Converting configured SSH server allow-list entry %{IP:client.ip} to CIDR format \\(%{GREEDYDATA:aruba.ssh.new_ip}\\)"
        - "^Failed to convert configured SSH server allow-list entry %{IP:client.ip} to CIDR format, using original address as-is"
  - grok:
      if: "['5220', '5221','5222'].contains(ctx.event?.code)"
      tag: sftps_event_5220_5221_5222
      field: "message"
      description: "Logs a message when SSH connection fails due to authorize-only attempt | authenticating username was searched for and not found in the authenticating certificate | when the authenticating IP is denied due to the SSH server allow list"
      patterns:
        - "^RADIUS authorize-only request failed for SSH session from %{IP:client.ip} for user %{GREEDYDATA:user.name}."
        - "^SSH session from %{IP:client.ip} (denied because username|for user) %{DATA:user.name} "

  # SFTP Client events (530x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SFTP_CLIENT.htm
  - grok:
      if: "['5301', '5302'].contains(ctx.event?.code)"
      tag: sftpc_event_5301_5302
      field: "message"
      description: "SFTP file transfer completed | failed"
      patterns:
        - "^SFTP file transfer from %{DATA:source.address} to %{DATA:destination.address} (completed|failed - %{GREEDYDATA:aruba.status})."

  # HTTPS Server events (560x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/HTTPS_SERVER.htm
  - grok:
      if: "['5601', '5602', '5603', '5604', '5605'].contains(ctx.event?.code)"
      tag: server_event_5601_5602_5603_5604_5605
      field: "message"
      description: "Logs a message when a user changes REST mode | enable/disable VFR config | closes HTTPS session | changes max user sessions | changes idle timeout"
      patterns:
        - "^User %{DATA:server.user.name} (%{5601_PATTERN}|%{5602_PATTERN}|%{5603_PATTERN}|%{5604_PATTERN}|%{5605_PATTERN})$"
      pattern_definitions:
        5601_PATTERN: "has enabled %{DATA:aruba.server.mode} for REST mode"
        5602_PATTERN: "has %{DATA:aruba.status} HTTPS Server on VRF %{DATA:aruba.vrf.id}"
        5603_PATTERN: "closed all HTTPS sessions"
        5604_PATTERN: "changed the HTTPS Server max user sessions amount to %{NUMBER:aruba.server.sessions:long}"
        5605_PATTERN: "changed the HTTPS Server idle timeout to %{NUMBER:aruba.timeout:long}"

  # Quality of Service events (570x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/QOS.htm
  - grok:
      if: "['5701','5702'].contains(ctx.event?.code)"
      tag: qos_event_5701_5702
      field: "message"
      description: "QoS failed to retrieve default configuration | QoS error occurred"
      patterns:
        - "(E|e)rror: %{GREEDYDATA:event.reason}"

  # QoS ASIC Provider events (580x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/QOS_ASIC.htm
  - dissect:
      if: "ctx.event?.code == '5801'"
      tag: qos_asic_event_5801
      field: "message"
      description: "QoS initial initialization failed"
      pattern: "QoS failed initial initialization for slot %{aruba.slot}. Error: %{event.reason}"
  - dissect:
      if: "ctx.event?.code == '5802'"
      tag: qos_asic_event_5802
      field: "message"
      description: "QoS final initialization failed for new slot"
      pattern: "QoS failed final initialization on new slot %{aruba.qos.new_slot} for peer slot %{aruba.slot}"
  - dissect:
      if: "ctx.event?.code == '5803'"
      tag: qos_asic_event_5803
      field: "message"
      description: "QoS error after card removal"
      pattern: "QoS error after card removal from slot %{aruba.slot}"
  - dissect:
      if: "ctx.event?.code == '5804'"
      tag: qos_asic_event_5804
      field: "message"
      description: "Error while attempting QoS feature configuration"
      pattern: "Error during QoS feature configuration: %{event.reason}"
  - dissect:
      if: "ctx.event?.code == '5805'"
      tag: qos_asic_event_5805
      field: "message"
      description: "Error while attempting QoS HW configuration"
      pattern: "Error during QoS HW configuration: %{event.reason} error %{error.code}"
  - dissect:
      if: "ctx.event?.code == '5806'"
      tag: qos_asic_event_5806
      field: "message"
      description: "Warning PFC priority sharing a queue"
      pattern: "Port: %{aruba.port} PFC priority %{aruba.priority} using queue %{aruba.qos.queue} should not be sharing the queue with other local-priorities"


  # NAE events (60xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/TSDBD.htm
  - grok:
      if: "['6001','6002','6003','6008','6009','6010'].contains(ctx.event?.code)"
      tag: nae_event_6001_6002_6003_6008_6009_6010
      field: "message"
      description: "[started|stopped] to collect samples | error and cannot collect samples | Temporarily disabling processing updates | resuming to monitor data points | user clears the NAE time series database"
      patterns:
        - "^NAE agent %{DATA:aruba.nae.name} with URI %{DATA:url.original} has error and cannot collect samples"
        - "^NAE agent %{DATA:aruba.nae.name} %{GREEDYDATA} from %{GREEDYDATA:url.original}."
        - "NAE monitor %{DATA:aruba.nae.monitor_name}. "
        - "from NAE monitor %{GREEDYDATA:aruba.nae.monitor_name}"
        - "^User %{DATA:user.name} "
  - grok:
      if: "['6004','6005','6007'].contains(ctx.event?.code)"
      tag: nae_event_6004_6005_6007
      field: "message"
      description: "watching (stopped)? for condition | error and is not watched"
      patterns:
        - "^NAE agent %{DATA:aruba.nae.name} (is watching for|stopped to watch for|generated an alert based on) condition %{GREEDYDATA:aruba.nae.condition}."
  - dissect:
      if: "['6006'].contains(ctx.event?.code)"
      tag: nae_event_6006
      field: "message"
      description: "NAE agent with condition has error and is not watched."
      pattern: "NAE agent %{aruba.nae.name} with condition %{aruba.nae.condition} has error and is not watched."

  # NDM events (61xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/NDM.htm
  - grok:
      if: "['6101','6102','6104','6113'].contains(ctx.event?.code)"
      tag: server_event_6101_6102_6104_6113
      field: "message"
      description: "Logs a message when a user changes REST mode | enable/disable VFR config | closes HTTPS session | changes max user sessions | changes idle timeout"
      patterns:
        - "^Static Neighbor %{IP:client.ip} (created|deleted) on Port %{DATA:aruba.port}, VRF %{DATA:aruba.vrf.id}( and)? mac %{MAC:client.mac}"
        - "^EVPN Virtual Tunnel EndPoint Neighbor %{IP:client.ip} updated on Port%{DATA:aruba.port} and VRF %{DATA:aruba.vrf.id} with mac %{MAC:client.mac}"
        - "^IPDB neighbor %{IP:client.ip} added in port %{DATA:aruba.port}, VRF %{GREEDYDATA:aruba.vrf.id}"
  - grok:
      if: "['6105','6121','6122','6123'].contains(ctx.event?.code)"
      tag: ndm_event_6105_6121_6122_6123
      field: "message"
      description: "IPDB neighbor deleted from the neighbor Table | Static Neighbor add failed, subnet not matched | Static Neighbor add failed, it is own ip | Static Neighbor add failed, port is down"
      patterns:
        - "^(IPDB Neighbor|static neighbor) %{IP:client.ip} "
  - grok:
      if: "['6106','6107','6108','6109'].contains(ctx.event?.code)"
      tag: ndm_event_6106_6107_6108_6109
      field: "message"
      description: "Clear all [ARP|VSX Peer ARP] entries requested on Specific Port | Clear all [ARP|VSX Peer Arp] entries requested on Specific VRF"
      patterns:
        - "^Clear all (Arp|VSX Peer ARP) entries requested on Port %{DATA:aruba.port} and (VRF|vrf) %{GREEDYDATA:aruba.vrf.id}"
        - "^Clear all( VSX Peer)? Arp entries requested on VRF %{GREEDYDATA:aruba.vrf.id}"
  - dissect:
      if: "ctx.event.code == '6115'"
      tag: ndm_event_6115
      field: "message"
      description: "Processing Redundancy management"
      pattern: "Management Role set to %{aruba.role}"
  - dissect:
      if: "ctx.event.code == '6116'"
      tag: ndm_event_6116
      field: "message"
      description: "Management role changed to new role"
      pattern: "Management role changed from old %{aruba.ndm.old_role} to new role %{aruba.role}"
  - grok:
      if: "['6112','6114','6126','6127'].contains(ctx.event?.code)"
      tag: ndm_event_6112_6114_6126_6127
      field: "message"
      description: "EVPN Virtual Tunnel EndPoint Neighbor [deleted|added] to the neighbor table | VSX Peer IP [added|deleted] in port vsxPeerIpCache"
      patterns:
        - "^EVPN (Virtual Tunnel EndPoint|VTEP) Neighbor %{IP:client.ip} (added to|deleted from) Port%{DATA:aruba.port} (on|and) VRF %{GREEDYDATA:aruba.vrf.id}"
        - "^VSX Peer IP %{IP:client.ip} (added|deleted from) the port %{DATA:aruba.port} and VRF %{GREEDYDATA:aruba.vrf.id}"
  - grok:
      if: "['6117','6118','6128','6129'].contains(ctx.event?.code)"
      tag: ndm_event_6117_6118_6128_6129
      field: "message"
      description: "Proxy arp [disabled|enabled] for the given interface | [IPv4|IPv6] neighbor ageout time changed to new value"
      patterns:
        - "^Proxy arp (en|dis)abled for the port %{GREEDYDATA:aruba.port}"
        - "^(IPv4|IPv6) neighbor ageout time changed to %{NUMBER:aruba.time.seconds:long} seconds on port %{GREEDYDATA:aruba.port}"
  - grok:
      if: "['6103','6130'].contains(ctx.event?.code)"
      tag: ndm_event_6101_6130
      field: "message"
      description: "Neighbor or Static Neighbor modified"
      patterns:
        - "^(Static )?Neighbor %{IP:client.ip} modified on Port %{DATA:aruba.port} and VRF %{DATA:aruba.vrf.id} from mac %{MAC:aruba.ndm.old_mac} to new mac %{MAC:client.mac}"
  - grok:
      if: "['6132','6133','6134'].contains(ctx.event?.code)"
      tag: ndm_event_6132_6133_6134
      field: "message"
      description: "Duplicate IP detected from ARP reply | Duplicate IPv6 address detected from Neighbour advertisement | Duplicate IP detected from ARP request"
      patterns:
        - "^Duplicate (IPv4|IPv6) address %{IP:client.ip} is detected on port %{DATA:aruba.port} with a MAC address of %{MAC:client.mac}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  
  # SYSMON events (63xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SYSMON.htm
  - grok:
      if: "ctx.event?.code == '6301'"
      tag: sysmon_event_6301
      field: "message"
      description: "System resource utilization poll change event"
      patterns: 
        - "^System resource utilization poll interval is changed to %{GREEDYDATA:aruba.sysmon.poll}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['6302','6303'].contains(ctx.event?.code)"
      tag: sysmon_event_6302_6303
      field: "message"
      description: "Warns a user when system memory usage read failed | Reports current system memory usage in percentage"
      patterns:
        - "^Failed to read system memory usage for module %{GREEDYDATA:aruba.sysmon.module_name}"
        - "^Current system memory usage for module %{DATA:aruba.sysmon.module_name} is %{NUMBER:aruba.sysmon.mem_usage:long}%"
  - grok:
      if: "['6304','6305'].contains(ctx.event?.code)"
      tag: sysmon_event_6304_6305
      field: "message"
      description: "Warns a user when the storage utilization has exceeded the warning limit | Raises high storage utilization alert when the utilization crosses higher utilization limit"
      patterns:
        - "^Storage( utilization for)? %{DATA:aruba.sysmon.partition_name} (partition is at|partition high utilization alert. Utilization is at) %{NUMBER:aruba.sysmon.utilization:long}% in module %{GREEDYDATA:aruba.sysmon.module_name}"
  - grok:
      if: "['6306','6307','6308','6309'].contains(ctx.event?.code)"
      tag: sysmon_event_6306_6307_6308_6309
      field: "message"
      description: "Warns a user when [higher|excessive] write to the [swap|storage] observed"
      patterns:
        - "^Excessive write to %{DATA:aruba.sysmon.partition_name} partition in module %{DATA:aruba.sysmon.module_name} observed. %{NUMBER:aruba.sysmon.mem_usage:long}GB written over past %{NUMBER:aruba.sysmon.unit_count:long} %{GREEDYDATA:aruba.sysmon.unit}"
        - "^Excessive write to swap in module %{DATA:aruba.sysmon.module_name} observed. %{NUMBER:aruba.sysmon.mem_usage:long}GB written over past %{NUMBER:aruba.sysmon.unit_count:long} %{GREEDYDATA:aruba.sysmon.unit}"
  
  # Credential Manager events (65xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CREDMGR.htm
  #
  # The following event IDs do not need further processing:
  # * 6501
  # * 6502
  # * 6504
  # * 6505
  - dissect:
      if: "ctx.event.code == '6506'"
      tag: credmgr_event_6506
      field: "message"
      description: "Logs a message when SSH authorized keys are added for a user"
      pattern: "SSH authorized keys were added for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6507'"
      tag: credmgr_event_6507
      field: "message"
      description: "Logs a message after a failure to write SSH authorized keys for a user"
      pattern: "Failed to write SSH authorized keys for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6508'"
      tag: credmgr_event_6508
      field: "message"
      description: "Logs a message after deleting SSH authorized keys for a user"
      pattern: "SSH authorized keys deleted for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6509'"
      tag: credmgr_event_6509
      field: "message"
      description: "Logs a message when SSH authorized key fails validation check"
      pattern: "User %{user.name} has configured an invalid SSH authorized key with key identifier %{user.id}"

    # Port Statistics events (660x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/COUNTERS.htm
  - grok:
      field: message
      tag: port_stats_event_6601_6602_6603_6604
      description: "Logs a message when the creation of a Layer 3 IPv4/IPv6 RX/TX counter fails"
      if: "['6601','6602','6603','6604'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to create layer 3 (IPv4|IPv6) (RX|TX) statistic for port:%{GREEDYDATA:aruba.port}"

    # Mirroring events (670x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MIRRORING.htm
  - grok:
      field: message
      tag: mirror_event_6701_through_6706
      description: "The following are the events related to mirroring."
      if: "['6701','6702','6703','6704','6705','6706'].contains(ctx.event?.code)"
      patterns:
        - "session %{DATA:aruba.session.id} (created|deleted|updated)"
        - "session %{GREEDYDATA:aruba.session.id}"

  # Config Management events (68xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CONFIG_MGMT.htm
  - dissect:
      if: "ctx.event.code == '6801'"
      tag: config_event_6801
      field: "message"
      description: "Logs a message when configs copying from one format to another"
      pattern: "Copying configs from: %{aruba.config.from} to: %{aruba.config.to}"
  - dissect:
      if: "['6802', '6804'].contains(ctx.event?.code)"
      tag: config_event_6802_6804
      field: "message"
      description: "Logs a message when copying config has some error | Logs a message when copying config to shadowdb has some error"
      pattern: "Error while copying configs. Error: %{event.reason}"
  - dissect:
      if: "ctx.event.code == '6803'"
      tag: config_event_6803
      field: "message"
      description: "Logs a message when config validation prunes tables/columns in startup-config or when errors are encountered"
      pattern: "%{aruba.config.type}:%{aruba.config.value}"
  - dissect:
      if: "ctx.event.code == '6805'"
      tag: config_event_6805
      field: "message"
      description: "Logs a message when copying config has some information"
      pattern: "Information while copying configs. Info: %{event.reason}"

  # NAE Agents events (690x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/NAE_ALERT.htm
  - dissect:
      if: "ctx.event.code == '6901'"
      tag: config_event_6801
      field: "message"
      description: "Action has been triggered by an NAE agent"
      pattern: "An action has been triggered by the NAE agent %{aruba.nae.name}"

  # SNMP events (71xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SNMP.htm
  - grok:
      if: "['7101','7102','7103','7104'].contains(ctx.event?.code)"
      tag: snmp_event_7101_7102_7103_7104
      field: "message"
      description: "SNMP (sub)? agent is [enabled|disabled]"
      patterns:
        - "namespace %{GREEDYDATA:aruba.vrf.id}"
  - dissect:
      if: "ctx.event.code == '7111'"
      tag: snmp_event_7111
      field: "message"
      description: "SNMP on demand idl sync."
      pattern: "SNMP cache sync on-demand is set to: %{aruba.snmp.truth_value}"

  # In-System Programming events (72xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ISP.htm
  - grok:
      if: "ctx.event?.code == '7200'"
      tag: system_event_7200
      field: "message"
      description: "ISP internal fatal error"
      patterns: 
        - "^Internal fatal error at %{DATA:file.name}\\s?:\\s?%{NUMBER:aruba.system.line:long}"
  - grok:
      if: "['7210', '7211'].contains(ctx.event?.code)"
      tag: system_event_7210_7211
      field: "message"
      description: "A non-failsafe device update is needed, but the allow-unsafe-updates command has not yet been run | about to start, so do not interrupt it"
      patterns:
        - "^Non-failsafe update needed for %{DATA:aruba.system.devicespec}. Please run the allow-unsafe-updates command"
        - "^Do not interrupt non-failsafe update for %{GREEDYDATA:aruba.system.devicespec}"
  - grok:
      if: "['7212', '7213'].contains(ctx.event?.code)"
      tag: system_event_7210_7211
      field: "message"
      description: "A device update is about to start | was successful or in some cases was successfully arranged to be performed later"
      patterns:
        - "^(Starting update|Update successful) for %{DATA:aruba.system.devicespec} from version %{DATA:service.version} to version %{GREEDYDATA:service.target.version}"
  - grok:
      if: "['7214', '7215', '7217'].contains(ctx.event?.code)"
      tag: system_event_7214_7215_7217
      field: "message"
      description: "A device update failed | was postponed until after an automatic reset of its module | Unable to update non-redundant power supply"
      patterns:
        - "^Update failed for %{GREEDYDATA:aruba.system.devicespec}"
        - "^Deferred update for %{DATA:aruba.system.devicespec} will be performed after an automatic module reset"
        - "^Insufficient redundant power is available to update %{GREEDYDATA:aruba.system.devicespec}"
  - grok:
      if: "ctx.event?.code == '7216'"
      tag: system_event_7216
      field: "message"
      description: "Indicates the approximate remaining update time for a module"
      patterns: 
        - "^Approximately %{NUMBER:aruba.system.time:long} minute\\(s\\) remaining to update %{NUMBER:aruba.system.numdevs:long} device\\(s\\) on %{GREEDYDATA:aruba.system.modspec}"
  - dissect:
      if: "ctx.event.code == '7219'"
      tag: system_event_7219
      field: "message"
      description: "Failed to write-protect a module or device"
      pattern: "Failed to write-protect %{aruba.system.devicespec} (pass %{aruba.system.pass})"

  # BFD events (73xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/BFD.htm
  - grok:
      if: "['7305', '7306'].contains(ctx.event?.code)"
      tag: bfd_event_7305_7306
      field: "message"
      description: "Event raised when BFD echo is enabled/disable on an interface"
      patterns:
        - "^BFD echo was (en|dis)abled on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['7307', '7308', '7309', '7315'].contains(ctx.event?.code)"
      tag: bfd_event_7307_7308_7309_7315
      field: "message"
      description: "Event raised when BFD echo is enabled/disable on an interface | administratively down | becomes unidirectional"
      patterns:
        - "^BFD session is (up|down|administratively down|unidirectional). session_id=%{DATA:aruba.session.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}"
  - grok:
      if: "['7311', '7312'].contains(ctx.event?.code)"
      tag: bfd_event_7311_7312
      field: "message"
      description: "Port can[not] forward BFD traffic"
      patterns:
        - "^Port %{DATA:aruba.port} (can|can not) forward BFD traffic"
  - dissect:
      if: "ctx.event.code == '7314'"
      tag: bfd_event_7314
      field: "message"
      description: "Event raised when an Echo session is created without a valid echo_source IP address configured"
      pattern: "The echo function for the BFD session %{aruba.session.id} will not become active until a global echo source IP address is configured"
  - dissect:
      if: "ctx.event.code == '7316'"
      tag: bfd_event_7316
      field: "message"
      description: "Event raised when BFD echo is enabled on a Tunnel interface"
      pattern: "BFD echo cannot be enabled on tunnels. interface=%{aruba.interface.id}"
  - grok:
      if: "ctx.event.code == '7318'"
      tag: bfd_event_7318
      field: "message"
      description: "Event raised when SRC or DST IP Version doesn't match the session's IP Version"
      patterns:
        - "^IP Version mismatch for BFD. session_id=%{DATA:aruba.session.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}, from=%{DATA:aruba.bfd.from}, ip_version=%{DATA:aruba.bfd.ip_version}, Invalid IP address: %{IPORHOST:aruba.bfd.invalid_ip}"
  - dissect:
      if: "ctx.event.code == '7319'"
      tag: bfd_event_7319
      field: "message"
      description: "Event raised when a BFD single-hop session source port is a loopback"
      pattern: "BFD single-hop is not supported on interface %{aruba.interface.id}"
  - dissect:
      if: "ctx.event.code == '7320'"
      tag: bfd_event_7320
      field: "message"
      description: "Event raised when a BFD session specifies an interval for a protocol that does not support override"
      pattern: "BFD session interval override not supported for protocol %{aruba.bfd.from}"
  - grok:
      if: "ctx.event.code == '7321'"
      tag: bfd_event_7321
      field: "message"
      description: "Event raised when a BFD session specifies an interval outside the specified bounds"
      patterns:
        - "^BFD session %{DATA:aruba.bfd.direction} interval override of %{NUMBER:aruba.bfd.requested_interval:long} ms is out of bounds for protocol %{DATA:aruba.bfd.from}, using %{NUMBER:aruba.bfd.applied_interval:long} ms instead"

  # IP-SLA events (740x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IPSLA.htm
  - grok:
      if: "['7401', '7402', '7403', '7404', '7405', '7406', '7407', '7408'].contains(ctx.event?.code)"
      tag: storage_event_7401_7402_7403_7404_7405_7406_7407_7408
      field: "message"
      description: "Event raised for IP-SLA events"
      patterns:
        - "^%{IP_SLA_SESSION_NAME} state changed to( failed)? %{DATA:aruba.state} due to reason %{GREEDYDATA:event.reason}"
        - "^%{IP_SLA_SESSION_NAME} failed to (bind source|initialize socket), reason:%{GREEDYDATA:event.reason}"
        - "^%{IP_SLA_SESSION_NAME}: %{GREEDYDATA:event.action}"
        - "^%{IP_SLA_SESSION_NAME} is incomplete to schedule"
        - "^%{IP_SLA_SESSION_NAME} interface %{DATA:aruba.interface.id} is( not)? ready and SLA is (disabled|enabled)"
      pattern_definitions:
        IP_SLA_SESSION_NAME: "IP-SLA (session:)?%{DATA:aruba.ip_sla.name}"

  # CPU_RX Events (75xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CPU_RX.htm
  - dissect:
      field: message
      tag: cpu_rx_event_7501
      description: "Event raised when a kernel filter cannot be created or deleted"
      if: "ctx.event?.code == '7501'"
      pattern: "Kernel filter \"%{event.action}\" failed on unit %{aruba.instance.id} for %{aruba.cpu_rx.filter_description}"
  - dissect:
      field: message
      tag: cpu_rx_event_7502
      description: "Event raised when a kernel filter cannot be created because all filters are in use"
      if: "ctx.event?.code == '7502'"
      pattern: "Cannot create kernel filter on unit %{aruba.instance.id} for %{aruba.cpu_rx.filter_description}. All filters are in use. Configuring fewer per-port features can help with this issue."

  # Certificate management events (77xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CERTMGR.htm
  - grok:
      if: "['7701', '7702', '7703', '7704'].contains(ctx.event?.code)"
      tag: cm_event_7701_7702_7703_7704
      field: "message"
      description: "Event raised when a ta profile is created/delete | Leaf certificate import/deleted"
      patterns:
        - "^(TA Profile|Leaf certificate) %{DATA:aruba.cm.cert_name} (created|deleted|imported|deleted)"
  - grok:
      if: "ctx.event.code == '7705'"
      tag: cm_event_7705
      field: "message"
      description: "Event raised when an installed certifiate will expire within 60 days"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} will expire within %{NUMBER:aruba.cm.days:long} days"
  - grok:
      if: "['7706', '7707', '7708'].contains(ctx.event?.code)"
      tag: cm_event_7706_7707_7708
      field: "message"
      description: "Event raised when an installed certifiate is not yet past its start date/expired or is verified"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} has not yet reached its start date"
        - "^Certificate %{DATA:aruba.cm.cert_name} has expired and can no longer be used"
        - "^Certificate %{DATA:aruba.cm.cert_name} verified and accepted"
  - dissect:
      if: "ctx.event.code == '7709'"
      tag: cm_event_7709
      field: "message"
      description: "Event raised when a certificate chain is rejected"
      pattern: "Certificate %{aruba.cm.cert_name} rejected due to verification failure (%{event.reason})"
  - grok:
      if: "['7710', '7711', '7712'].contains(ctx.event?.code)"
      tag: cm_event_7710_7711_7712
      field: "message"
      description: "Event raised when a (self-signed) certificate signing request is created on the switch | invalid certificate association is made"
      patterns:
        - "^(Certificate signing request|Self-signed certificate) %{DATA:aruba.cm.cert_name} created"
        - "^Application association with the %{DATA:aruba.cm.cert_name} certificate is not permitted"
  - dissect:
      if: "ctx.event.code == '7713'"
      tag: cm_event_7713
      field: "message"
      description: "Event raised when a certificate is verified due to optional OCSP enforcement"
      pattern: "Certificate %{aruba.cm.cert_name} failed OCSP verification (%{aruba.status}), but was accepted because OCSP enforcement is set to optional."
  - grok:
      if: "['7714', '7715'].contains(ctx.event?.code)"
      tag: cm_event_7714_7715
      field: "message"
      description: "Event raised when CA certificates were [successfully|could not be] downloaded from an EST server"
      patterns:
        - "^(CA certificates successfully downloaded|Failed to download CA certificates) from EST server %{GREEDYDATA:aruba.cm.cert_name}"
  - grok:
      if: "['7716', '7717', '7718', '7719'].contains(ctx.event?.code)"
      tag: cm_event_7716_7717_7718_7719
      field: "message"
      description: "Certificate is successfully enrolled with EST | Certificate (re)enrollment with an EST server fails | Certificate is successfully reenrolled with EST"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} successfully (re)?enrolled by EST server %{GREEDYDATA:aruba.cm.est_name}"
        - "^Failed to (re)?enroll certificate %{DATA:aruba.cm.cert_name} with EST server %{GREEDYDATA:aruba.cm.est_name}"
  - grok:
      if: "['7720', '7721'].contains(ctx.event?.code)"
      tag: cm_event_7720_7721
      field: "message"
      description: "A signer certifiate is not set for signing | An installed certifiate is invalid or malformed"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} is (not set for signing purpose|invalid or malformed)"

  # External Storage events (78xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/EXTERNAL-STORAGE.htm
  - grok:
      field: message
      tag: external_storage_event_7801_7802
      description: "Event raised when a share fails to mount | dismount"
      if: "['7801', '7802'].contains(ctx.event?.code)"
      patterns:
        - "^Share %{DATA:aruba.storage.name} (dis)?mount failure"
  - grok:
      field: message
      tag: external_storage_event_7803_7804
      description: "Event raised when a share mounts | dismounts"
      if: "['7803', '7804'].contains(ctx.event?.code)"
      patterns:
        - "^Share %{DATA:aruba.storage.name} is (dis)?mounted"
  - dissect:
      field: message
      tag: external_storage_event_7805
      description: "Event raised when a mount times out or aborts due to a config change"
      if: "ctx.event?.code == '7805'"
      pattern: "Share %{aruba.storage.name} mount is aborted"
  - dissect:
      field: message
      tag: external_storage_event_7806
      description: "USB device mounted or unmounted."
      if: "ctx.event?.code == '7806'"
      pattern: "USB device %{aruba.status}."

  # Power over Ethernet events (79xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POE.htm
  - dissect:
      if: "ctx.event?.code == '7901'"
      tag: poe_event_7901
      field: "message"
      description: "Detected powered device on interface. Type, Class."
      pattern: "Detected powered device on interface %{aruba.interface.name}. Type:%{aruba.poe.pd_type}, Class:%{aruba.poe.pd_class}"
  - grok:
      if: "['7902','7903','7905','7906','7907','7909','7911','7912','7913','7916','7924'].contains(ctx.event?.code)"
      tag: poe_event_7902_7903_7905_7906_7907_7909_7911_7912_7913_7916_7924
      field: "message"
      patterns:
        - "interface %{GREEDYDATA:aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '7904'"
      tag: poe_event_7904
      field: "message"
      description: "Powered device fault on interface. Fault type."
      pattern: "Powered device fault on interface %{aruba.interface.name}. Fault type %{aruba.poe.fault_type}"
  - dissect:
      if: "ctx.event?.code == '7908'"
      tag: poe_event_7908
      field: "message"
      description: "Detected dual signature powered device on interface. Type, ClassA, ClassB"
      pattern: "Detected dual signature powered device on interface %{aruba.interface.name}. Type:%{aruba.poe.pd_type}, ClassA:%{aruba.poe.paira_class}, ClassB:%{aruba.poe.pairb_class}"
  - dissect:
      if: "ctx.event?.code == '7910'"
      tag: poe_event_7910
      field: "message"
      description: "Dual signature powered device fault on interface. Fault type."
      pattern: "Dual signature powered device fault on interface %{aruba.interface.name} pair %{aruba.poe.pair}. Fault type %{aruba.poe.fault_type}"
  - dissect:
      if: "ctx.event?.code == '7914'"
      tag: poe_event_7914
      field: "message"
      description: "Powered device got class demoted on interface"
      pattern: "Powered device got class demoted on interface %{aruba.interface.name}. Requested_class %{aruba.poe.req_class} Assigned_class %{aruba.poe.assigned_class}"
  - dissect:
      if: "ctx.event?.code == '7915'"
      tag: poe_event_7915
      field: "message"
      description: "Dual signature powered device got class demoted on interface"
      pattern: "Dual signature powered device got class demoted on interface %{aruba.interface.name}. Requested_classA %{aruba.poe.req_class_a} Requested_classB %{aruba.poe.req_class_b} Assigned_classA %{aruba.poe.assigned_class_a} Assigned_classB %{aruba.poe.assigned_class_b}"
  - grok:
      if: "['7917', '7926'].contains(ctx.event?.code)"
      tag: poe_event_7917_7926
      field: "message"
      description: "PoE usage exceeded threshold limit | PoE usage is below threshold"
      patterns: 
        - "^PoE usage (exceeded|is below) threshold( limit)? of %{GREEDYDATA:aruba.limit.threshold}"
  - grok:
      if: "['7918', '7919'].contains(ctx.event?.code)"
      tag: poe_event_7918_7919
      field: "message"
      description: "PoE controller got into fault | reset"
      patterns:
        - "^PoE controller %{DATA:aruba.poe.cntrl_name} got"
  - dissect:
      if: "ctx.event?.code == '7920'"
      tag: poe_event_7920
      field: "message"
      description: "Powered device got class promoted"
      pattern: "Powered device got class promoted on interface %{aruba.interface.name}.Requested_class %{aruba.poe.req_class} Assigned_class %{aruba.poe.assigned_class}"
  - dissect:
      if: "ctx.event?.code == '7921'"
      tag: poe_event_7921
      field: "message"
      description: "Dual signature powered device got class promoted"
      pattern: "Dual signature powered device got class promoted on interface %{aruba.interface.name}.Requested_classA %{aruba.poe.req_class_a} Requested_classB %{aruba.poe.req_class_b} Assigned_classA %{aruba.poe.assigned_class_a} Assigned_classB %{aruba.poe.assigned_class_b}"
  - dissect:
      if: "ctx.event?.code == '7922'"
      tag: poe_event_7922
      field: "message"
      description: "Powered device is drawing power more than its class"
      pattern: "Powered device is drawing power more than its class on interface %{aruba.interface.name}, type:%{aruba.poe.pd_type} class:%{aruba.poe.pd_class} power:%{aruba.power.value} is exceeding the max average power of the PD class. Check the PD max power draw, cabling type and length to improve interoperability"
  - grok:
      if: "['7923','7931','7932','7934','7935','7936','7937','7938','7940'].contains(ctx.event?.code)"
      tag: poe_event_7923_7931_7932_7934_7935_7936_7937_7938_7940
      field: "message"
      patterns:
        - "interface %{DATA:aruba.interface.name} "
  - dissect:
      if: "ctx.event?.code == '7925'"
      tag: poe_event_7925
      field: "message"
      description: "Dual signature powered device is drawing power more than its class"
      pattern: "Dual signature powered device is drawing power more than its class on interface %{aruba.interface.name}, type:%{aruba.poe.pd_type} classA:%{aruba.poe.paira_class} classB:%{aruba.poe.pairb_class} power:%{aruba.power.value}"
  - dissect:
      if: "ctx.event?.code == '7927'"
      tag: poe_event_7927
      field: "message"
      description: "PoE drawn power is more than available PoE power"
      pattern: "Total power drawn: %{aruba.power.value}W by powered device is exceeding the total available PoE power:%{aruba.power.available}W. Check the PD max power draw, cabling type and length to avoid system crowbar."
  - dissect:
      if: "ctx.event?.code == '7928'"
      tag: poe_event_7928
      field: "message"
      description: "Powered device invalid signature indication"
      pattern: "Powered device invalid signature indication on interface %{aruba.interface.name}."
  - dissect:
      if: "ctx.event?.code == '7933'"
      tag: poe_event_7933
      field: "message"
      description: "Subsystem came up with quick PoE"
      pattern: "Subsystem %{aruba.poe.subsys_name} came up with quick PoE"
  - dissect:
      if: "ctx.event?.code == '7939'"
      tag: poe_event_7939
      field: "message"
      description: "Powered device requested power down on interface."
      pattern: "Powered device requested power down on interface %{aruba.interface.name} %{aruba.poe.duration}"
        

  # Bluetooth Management events (80xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/BLUETOOTH_MGMT.htm
  - grok:
      if: "['8001', '8003'].contains(ctx.event?.code)"
      tag: btm_event_8001
      field: "message"
      description: "Event raised when Bluetooth is enabled or disabled | receives signal for Bluetooth adapter"
      patterns:
        - "^Bluetooth (has been|adapter) %{GREEDYDATA:event.action}"
  - grok:
      if: "ctx.event.code == '8004'"
      tag: btm_event_8004
      field: "message"
      description: "Event raised when btd receives signal for Bluetooth device event"
      patterns:
        - "^Bluetooth device %{DATA:event.action}: %{MAC:client.mac}"

  # DHCPv4 Snooping events (82xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DHCPv4-SNOOPING.htm
  #
  # The following event ID does not need further processing:
  # * 8212
  #
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8201
      description: "Log event when packet dropped while server packet received on untrusted port."
      if: "ctx.event?.code == '8201'"
      patterns:
        - "^Server %{IP:server.ip} packet received on untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8202
      description: "Log event when client packet dropped while packet destined to untrusted port."
      if: "ctx.event?.code == '8202'"
      patterns:
        - "^Client packet destined to untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8203
      description: "Log event when packet dropped while packet received from unauthorized server."
      if: "ctx.event?.code == '8203'"
      patterns:
        - "^Packet received from unauthorized server %{IP:server.ip} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8204
      description: "Log event when client packet received with untrusted relay info."
      if: "ctx.event?.code == '8204'"
      patterns:
        - "^Received untrusted relay info from client %{MAC:client.mac} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8205
      description: "Log event when client address not equal to source MAC."
      if: "ctx.event?.code == '8205'"
      patterns:
        - "^Client address %{MAC:client.mac} not equal to source MAC %{MAC:source.mac} detected on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8206
      description: "Log event when release packet received on incorrect port."
      if: "ctx.event?.code == '8206'"
      patterns:
        - "^Binding for %{IP:client.ip}:%{MAC:client.mac} exists on port %{DATA:aruba.port}. Dropping release request received for the binding on %{DATA:aruba.dhcp.new_port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8207
      description: "Log event when dynamic binding for a port was replaced with a manual binding."
      if: "ctx.event?.code == '8207'"
      patterns:
        - "^The dynamic binding for %{MAC:client.mac} on port %{DATA:aruba.port} was replaced with a manual binding.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8208
      description: "Log event when drop client request for already assigned ip."
      if: "ctx.event?.code == '8208'"
      patterns:
        - "^Drop request from %{MAC:client.mac} for already assigned address %{IP:client.ip}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8209
      description: "Log event when drop server offer for already assigned ip."
      if: "ctx.event?.code == '8209'"
      patterns:
        - "^Drop offer from %{IP:server.ip} of already assigned address %{IP:client.ip} to %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8210
      description: "Log event when drop server offer for illegal ip."
      if: "ctx.event?.code == '8210'"
      patterns:
        - "^Drop offer from %{IP:server.ip} of %{IP:client.ip} address is illegal.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8211
      description: "Log event when binding limit reached on port."
      if: "ctx.event?.code == '8211'"
      patterns:
        - "^Maximum bindings limit reached on port %{DATA:aruba.port}, dropping request from %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8213
      description: "Log event when all dynamic binding entries on a port are cleared."
      if: "ctx.event?.code == '8213'"
      patterns:
        - "^Dynamic binding entries on the port %{DATA:aruba.port} were cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8214
      description: "Log event when all dynamic binding entries on a vlan are cleared."
      if: "ctx.event?.code == '8214'"
      patterns:
        - "^Dynamic binding entries on the VLAN %{DATA:network.vlan.id} were cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8215
      description: "Log event when a specific dynamic binding entry on a vlan is cleared."
      if: "ctx.event?.code == '8215'"
      patterns:
        - "^Dynamic binding entry with ip %{IP:client.ip} on the VLAN %{DATA:network.vlan.id} was cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8216
      description: "Log event when failed to import dynamic ip binding entries from external storage."
      if: "ctx.event?.code == '8216'"
      patterns:
        - "^Failed to import dynamic ip binding entries from external storage. volume: %{DATA:aruba.dhcp.volume_name}, filename: %{DATA:file.name}.$"

  # DHCPv6 snooping events (83xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DHCPV6_SNOOPING.htm
  #
  # The following event ID does not need further processing:
  # * 8309
  #
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8301
      description: "Log event when packet dropped while server packet received on untrusted port."
      if: "ctx.event?.code == '8301'"
      patterns:
        - "^Server %{IPV6:server.ip} packet received on untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8302
      description: "Log event when client packet dropped while packet destined to untrusted port."
      if: "ctx.event?.code == '8302'"
      patterns:
        - "^Client packet destined to untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8303
      description: "Log event when packet dropped while packet received from unauthorized server."
      if: "ctx.event?.code == '8303'"
      patterns:
        - "^Packet received from unauthorized server %{IPV6:server.ip} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8304
      description: "Log event when client packet received with untrusted relay info."
      if: "ctx.event?.code == '8304'"
      patterns:
        - "^Received untrusted relay info from client %{MAC:client.mac} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8305
      description: "Log event when release packet received on incorrect port."
      if: "ctx.event?.code == '8305'"
      patterns:
        - "^Binding for %{IPV6:client.ip}:%{MAC:client.mac} exists on port %{DATA:aruba.port}. Dropping release request received for the binding on %{DATA:aruba.dhcp.new_port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8306
      description: "Log event when dynamic binding for a port was replaced with a manual binding."
      if: "ctx.event?.code == '8306'"
      patterns:
        - "^The dynamic binding for %{MAC:client.mac} on port %{DATA:aruba.port} was replaced with a manual binding.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8307
      description: "Log event when drop client request for already assigned ip."
      if: "ctx.event?.code == '8307'"
      patterns:
        - "^Drop request from %{MAC:client.mac} for already assigned address %{IPV6:client.ip}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8308
      description: "Log event when binding limit reached on port."
      if: "ctx.event?.code == '8308'"
      patterns:
        - "^Maximum bindings limit reached on port %{DATA:aruba.port}, dropping request from %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8310
      description: "Log event when all dynamic binding entries on a port are cleared."
      if: "ctx.event?.code == '8310'"
      patterns:
        - "^Dynamic binding entries on the port %{DATA:aruba.port} were cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8311
      description: "Log event when all dynamic binding entries on a vlan are cleared."
      if: "ctx.event?.code == '8311'"
      patterns:
        - "^Dynamic binding entries on the VLAN %{DATA:network.vlan.id} were cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8312
      description: "Log event when a specific dynamic binding entry on a vlan is cleared."
      if: "ctx.event?.code == '8312'"
      patterns:
        - "^Dynamic binding entry with ip %{IP:client.ip} on the VLAN %{DATA:network.vlan.id} was cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8313
      description: "Log event when import of dynamic binding entries from external storage is failed."
      if: "ctx.event?.code == '8313'"
      patterns:
        - "^Failed to import dynamic ip binding entries from external storage. volume: %{DATA:aruba.dhcp.volume_name}, filename: %{DATA:file.name}.$"

  # ND snooping events (840x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ND-SNOOPING.htm
  - grok:
      field: message
      tag: ND_snooping_event_8402_8403_8404_8405
      description: ""
      if: "['8402','8403','8404','8405'].contains(ctx.event?.code)"
      patterns:
        - "^Dynamic binding entries on the (port %{DATA:aruba.port}|VLAN %{DATA:network.vlan.id}) were cleared."
        - "^Dynamic binding entry with ip %{IP:server.ip} on the VLAN %{DATA:network.vlan.id} was cleared."
        - "^ND packet of type=%{DATA:aruba.nd.type} received on port:%{DATA:aruba.port} vlan:%{DATA:network.vlan.id} with src_mac:%{MAC:source.mac} is %{DATA:aruba.status}. count=%{NUMBER:aruba.count:long}"

  # ERPS Events (85xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ERPS.htm
  - dissect:
      field: message
      tag: erps_event_8501
      description: "Log event when RAPS messages are not received for a certain time interval"
      if: "ctx.event?.code == '8501'"
      pattern: "Expected R-APS packets not received on %{observer.ingress.interface.id} in ring %{aruba.erps.ring_id} with control VLAN %{network.vlan.id}"
  - grok:
      field: message
      tag: erps_event_8502
      description: "Log event when a ring misconfiguration happens"
      if: "ctx.event?.code == '8502'"
      patterns:
        - "^Misconfiguration detected on ring %{DATA:aruba.erps.ring_id} with control VLAN %{DATA:network.vlan.id}. Another node in the ring with mac %{MAC:client.mac} is also operating as an RPL owner"
  - dissect:
      field: message
      tag: erps_event_8503
      description: "Log state transition of ring instance"
      if: "ctx.event?.code == '8503'"
      pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to %{aruba.state}"
  - dissect:
      field: message
      tag: erps_event_8504
      description: "Log event when ring is configured with a non-L2 port"
      if: "ctx.event?.code == '8504'"
      pattern: "%{observer.ingress.interface.name} is not an L2 port"
  - dissect:
      field: message
      tag: erps_event_8505
      description: "Log event when an interface which is already associated to a ring port is getting mapped to other ring port as well"
      if: "ctx.event?.code == '8505'"
      pattern: "%{observer.ingress.interface.name} is already associated with %{aruba.erps.port_name} of ERPS ring %{aruba.erps.ring_id}"
  - dissect:
      field: message
      tag: erps_event_8506
      description: "Log event when control-channel VLAN is part of the protected-vlans"
      if: "ctx.event?.code == '8506'"
      pattern: "Configured control-channel VLAN %{network.vlan.id} is already protected by ERPS ring %{aruba.erps.ring_id}, instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8507
      description: "Log event when control-channel VLAN overlaps with another control-channel of same ring"
      if: "ctx.event?.code == '8507'"
      pattern: "VLAN %{network.vlan.id} is already configured as control-channel for instance %{aruba.instance.id} of ring %{aruba.erps.ring_id}"
  - dissect:
      field: message
      tag: erps_event_8508
      description: "Log event when protected-vlan(s) overlap"
      if: "ctx.event?.code == '8508'"
      pattern: "Vlan %{network.vlan.id} is already part of the protected VLAN set of ring %{aruba.erps.ring_id} instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8510
      description: "Log event when parent-ring id is configured to be the same as sub-ring"
      if: "ctx.event?.code == '8510'"
      pattern: "Parent-ring %{aruba.erps.ring_id} is same as sub-ring"
  - dissect:
      field: message
      tag: erps_event_8511
      description: "Log event when VLAN from the protected-vlans list is already configured as control-channel VLAN"
      if: "ctx.event?.code == '8511'"
      pattern: "VLAN %{network.vlan.id} in the protected VLANs list is also configured as the control-channel"
  - dissect:
      field: message
      tag: erps_event_8512
      description: "Log event if the same ring port is configured as RPL port for more than one instance"
      if: "ctx.event?.code == '8512'"
      pattern: "%{aruba.erps.port_name} is already configured as RPL port for instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8513
      description: "Log event if ring port which is also an ISL is being configured as RPL"
      if: "ctx.event?.code == '8513'"
      pattern: "RPL configuration is not allowed on ISL port %{observer.ingress.interface.name}"
  - dissect:
      field: message
      tag: erps_event_8515
      description: "Log transition of state of ring instance to initializing and the reason for it"
      if: "ctx.event?.code == '8515'"
      pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to Initializing with reason %{event.reason}"

    # MSDP events (860x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MSDP.htm
  - grok:
      field: message
      tag: msdp_event_8601_through_8609
      description: "The following are the events related to MSDP"
      if: "['8601','8602','8603','8604','8605','8606','8607','8608','8609'].contains(ctx.event?.code)"
      patterns:
        - "^Router MSDP is %{DATA:aruba.status} on VRF %{GREEDYDATA:aruba.vrf.name}"
        - "^Forwarding state of interface %{DATA:aruba.interface.name} has been changed to %{GREEDYDATA:aruba.state}"
        - "^MSDP Peer %{IP:client.ip}\\(%{DATA:aruba.msdp.tcp_entity}\\) with connection source %{DATA:aruba.interface.name} has entered %{DATA:aruba.state} state"
        - "^Port %{DATA:aruba.port} is %{DATA:aruba.status} to MSDP Peer %{IP:client.ip}"
        - "^MSDP Peer %{IP:client.ip} is %{DATA:aruba.status} on VRF %{DATA:aruba.vrf.name}. Interface %{DATA:aruba.interface.name} is added to the Peer"
        - "^Start %{DATA:aruba.msdp.tcp_entity} role for MSDP peer %{IP:client.ip}"
        - "^Finish packet was received on MSDP Peer %{IP:client.ip}"
        - "^Failed to add SA Cache entry: S=%{IP:source.ip}, G=%{IP:aruba.msdp.grp_ip}, R=%{IP:aruba.msdp.rp_ip} for Peer %{IP:client.ip} as MSDP SA Cache Limit is reached"

  # Hardware switch controller sync events (88xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/HSC-SYNCD.htm
  - grok:
      if: "['8802', '8803'].contains(ctx.event?.code)"
      tag: hardware_event_8802_8803
      field: message
      description: "Log when physical port is [created|deleted] in hardware VTEP DB"
      patterns:
        - "^Physical Port %{DATA:aruba.port} is (created|deleted) (in|from) Hardware VTEP DB"
  - grok:
      if: "['8806', '8807'].contains(ctx.event?.code)"
      tag: hardware_event_8806_8807
      field: "message"
      description: "Logs when local MAC learn on VLAN is [updated|removed] in the Hardwar VTEP DB"
      patterns:
        - "^Local MAC %{MAC:server.mac} learnt on VLAN %{DATA:network.vlan.id} is (updated in|removed from) the Hardware VTEP DB"
  - grok:
      if: "['8808', '8809'].contains(ctx.event?.code)"
      tag: hardware_event_8808_8809
      field: "message"
      description: "Logs when VXLAN IP is [updated|removed] in the Hardware VTEP DB"
      patterns:
        - "^VXLAN IP %{IP:server.ip} is (updated in the|removed from Switch and) Hardware VTEP DB"
  - grok:
      if: "['8810', '8811'].contains(ctx.event?.code)"
      tag: hardware_event_8810_8811
      field: "message"
      description: "Logs when unicast remote MAC learnt on VNI is [added|removed] to the switch"
      patterns:
        - "^Unicast Remote MAC %{MAC:destination.mac} learnt on VNI %{DATA:network.vlan.id} is (added to|removed from) the switch"
  - grok:
      if: "ctx.event?.code == '8812'"
      tag: hardware_event_8812
      field: "message"
      description: "Logs when tunnel is removed from Hardware VTEP DB"
      patterns:
        - "^Tunnel %{IP:server.ip} is removed from Hardware VTEP DB"

  # CDP events (89xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CDP.htm
  - grok:
      if: "['8903', '8904', '8905'].contains(ctx.event?.code)"
      tag: cdp_event_8903_8904_8905
      field: "message"
      description: "Log to indicate CDP neighbor addition/modification/deletion"
      patterns:
        - "^CDP neighbor %{MAC:source.mac} is (added|updated|deleted) on %{GREEDYDATA:aruba.interface.name}"

  # SSH client events (900x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SSH_CLIENT.htm
  - grok:
      if: "['9001','9002','9003'].contains(ctx.event?.code)"
      tag: sshc_event_9001_9002_9003
      field: "message"
      description: "SSH client session is successful|denied"
      patterns:
        - "^Connection to SSH server %{IP:server.ip} on VRF %{DATA:aruba.vrf.name} is (established|successfully closed) for user %{DATA:user.name} over port %{GREEDYDATA:aruba.port}"
        - "^Connection to SSH server %{IP:server.ip} on VRF %{DATA:aruba.vrf.name} over port %{DATA:aruba.port} is denied"
        
  # Internal storage events (910x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/INTERNAL-STORAGE.htm
  - grok:
      if: "['9101', '9102', '9103', '9104'].contains(ctx.event?.code)"
      tag: storage_event_9101_9102_9103_9104
      field: "message"
      description: "Event raised when there is a storage reporting failure | health deteriorates | change in storage endurance | failure is imminent"
      patterns:
        - "^Failed to report storage %{DATA:aruba.storage.name} details for module %{NUMBER:aruba.slot:long}. Error: %{GREEDYDATA:event.reason}"
        - "^Storage %{DATA:aruba.storage.name} (health alert. E|e)ndurance utilization at %{NUMBER:aruba.storage.usage:long}\\% in module %{NUMBER:aruba.slot:long}(. Failure is imminent. Please backup data)?"

  # DCBX Events (92xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DCBX.htm
  - grok:
      field: message
      tag: dcbx_event_9203_9204
      if: "['9203', '9204'].contains(ctx.event?.code)"
      patterns:
        - "^DCBX is (dis|en)abled on interface %{DATA:aruba.dcbx.intf_name}$"
  - grok:
      field: message
      tag: dcbx_event_9205_9206
      if: "['9205', '9206'].contains(ctx.event?.code)"
      patterns:
        - "^DCBX status (in)?active on interface %{DATA:aruba.dcbx.intf_name}$"
  - grok:
      field: message
      tag: dcbx_event_9207_9208
      if: "['9207', '9208'].contains(ctx.event?.code)"
      patterns:
        - "^PFC TLV status (in)?active on interface %{DATA:aruba.dcbx.intf_name}$"
  - grok:
      field: message
      tag: dcbx_event_9209
      if: "['9209'].contains(ctx.event?.code)"
      patterns:
        - "^PFC TLV status priority mismatch on interface %{DATA:aruba.dcbx.intf_name}$"

  # Port access roles events (930x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ROLE.htm
  - grok:
      field: message
      tag: port_access_event_9301_9302
      if: "['9301','9302'].contains(ctx.event?.code)"
      description: "Logs an event if there are errors when applying a ClearPass role | maximum limit is reached while creating a Port Access Role"
      patterns:
        - "^Failed to apply ClearPass role - %{GREEDYDATA:event.reason}"
        # There is a spelling error in the documentation removing the matching for "Failed"
        - "to create the role - %{DATA:aruba.role}, maximum limit reached"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"

  # Port security events (940x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PORT-SECURITY.htm
  - grok:
      field: message
      tag: port_security_event_9401_9402
      if: "['9401','9402'].contains(ctx.event?.code)"
      description: "Log event when an intruder is detected on the port | sticky mac is moved to other port"
      patterns:
        - "^Client limit exceeded on port %{DATA:aruba.interface.name}, caused by an unauthorized client %{MAC:client.mac}"
        - "^Port security sticky client move violation triggered on port %{DATA:aruba.port} for client with MAC address %{MAC:client.mac}"

  # EVPN Events (95xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/EVPN.htm
  - grok:
      field: message
      tag: evpn_event_9501_9502
      description: "Logs EVPN EVI create|delete event."
      if: "['9501', '9502'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN EVI: %{DATA:network.vlan.id} (created|deleted)"
  - dissect:
      field: message
      tag: evpn_event_9503
      description: "Logs EVPN RD update event for an EVI."
      if: "ctx.event?.code == '9503'"
      pattern: "EVPN RD: %{aruba.evpn.rd} updated for EVI: %{network.vlan.id}"
  - dissect:
      field: message
      tag: evpn_event_9504
      description: "Logs EVPN RD delete event for an EVI."
      if: "ctx.event?.code == '9504'"
      pattern: "EVPN RD deleted for EVI: %{network.vlan.id}"
  - grok:
      field: message
      tag: evpn_event_9505_9506_9507
      description: "Logs EVPN RT create|delete|update event for an EVI."
      if: "['9505', '9506', '9507'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN RT: %{DATA:aruba.evpn.rt} (created|deleted|updated) for EVI: %{DATA:network.vlan.id}$"
  - grok:
      field: message
      tag: evpn_event_9508_9509
      description: "Logs EVPN VTEP VNI add|delete event."
      if: "['9508', '9509'].contains(ctx.event?.code)"
      patterns:
          - "^VNI: %{DATA:aruba.evpn.vni} is (added|deleted) for EVPN Peer VTEP: %{DATA:aruba.evpn.vtep_ip}$"
  - grok:
      field: message
      tag: evpn_event_9510
      description: "Logs EVPN static MAC conflict event."
      if: "ctx.event?.code == '9510'"
      patterns:
        - "^EVPN static MAC conflict %{DATA:event.action}, MAC: %{MAC:client.mac}, IP address: %{IP:client.ip}, VTEP: %{IP:aruba.evpn.vtep_ip}$"
  - grok:
      field: message
      tag: evpn_event_9511
      description: "Logs EVPN static MAC conflict event."
      if: "ctx.event?.code == '9511'"
      patterns:
        - "^EVPN static MAC conflict %{DATA:event.action}, MAC: %{MAC:client.mac}$"
  - grok:
      field: message
      tag: evpn_event_9512
      description: "Logs EVPN duplicate MAC dampening event."
      if: "ctx.event?.code == '9512'"
      patterns:
        - "^EVPN duplicate MAC dampening %{DATA:event.action}, MAC: %{MAC:client.mac}$"
  - grok:
      field: message
      tag: evpn_event_9513_9514
      description: "Logs EVPN VRF create|delete event."
      if: "['9513', '9514'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN VRF: %{DATA:aruba.vrf.id} (created|deleted)"
  - dissect:
      field: message
      tag: evpn_event_9515
      description: "Logs EVPN VRF RD update event."
      if: "ctx.event?.code == '9515'"
      pattern: "EVPN RD: %{aruba.evpn.rd} updated for VRF: %{aruba.vrf.id}"
  - grok:
      field: message
      tag: evpn_event_9516_9517_9518
      description: "Logs EVPN VRF RT create|delete|update event."
      if: "['9516', '9517', '9518'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN RT: %{DATA:aruba.evpn.rt} (created|deleted|updated) for VRF: %{DATA:aruba.vrf.id}$"

  # IP tunnels events (96xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IP_TUNNEL.htm
  - grok:
      if: "['9601', '9602', '9603', '9604', '9605', '9606', '9607', '9608', '9609', '9610', '9611', '9612', '9613', '9614', '9615', '9616'].contains(ctx.event?.code)"
      tag: storage_event_9601_9602_9603_9604_9605_9606_9607_9608_9609_9610_9611_9612_9613_9614_9615_9616
      field: "message"
      description: "Event raised when tunnel events"
      patterns:
        - "^Tunnel (Creation Failed|Created|Deletion Failed|Deleted) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}"
        - "^Tunnel (Source|Destination) IP Modified - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}"
        - "^Tunnel (TTL Modified|Modification Failed) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP} TTL \\(%{DATA:aruba.tunnel.ttl}\\)"
        - "^Tunnel MTU (Modified|Modification Failed) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP} MTU \\(%{DATA:aruba.mtu}\\)"
        - "^Tunnel Nexthop (Add Failed|Added|Modify Failed|Modified|Delete Failed|Deleted) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}" 
      pattern_definitions:
        TUNNEL_NAME: "Name \\(%{DATA:aruba.tunnel.name}\\)"
        TUNNEL_TYPE: "Type \\(%{DATA:aruba.tunnel.type}\\)"
        TUNNEL_VFR: "VRF \\(%{DATA:aruba.vrf.id}\\)"
        TUNNEL_LOCAL_IP: "Local IP \\(%{IP:source.ip}\\)"
        TUNNEL_REMOTE_IP: "Remote IP \\(%{IP:destination.ip}\\)"

  # IP source lockdown events (980x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IP_SOURCE_LOCKDOWN.htm
  - grok:
      if: "['9801', '9802', '9803', '9804', '9805', '9806', '9807'].contains(ctx.event?.code)"
      tag: storage_event_9801_9802_9803_9804_9805_9806_9807
      field: "message"
      description: "This log event informs the user that IP_SOURCE_LOCKDOWN resource utilization has reached 80 percent of the supported limits"
      patterns:
        - "^IP_SOURCE_LOCKDOWN resource utilization has (reached|reduced)( below)? 80 percent of the supported limit of %{DATA:aruba.limit.threshold} on the system"
        - "^IP_SOURCE_LOCKDOWN resource utilization has exceeded maximum supported limit of %{DATA:aruba.limit.threshold} on the system. IP source-lockdown functionality will not work for new entries"
        - "^(IPV4_SOURCE_LOCKDOWN|IPV6_SOURCE_LOCKDOWN) is (enabled|disabled) on interface %{GREEDYDATA:aruba.interface.id}"

  # ACLs events (100xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ACL.htm
  - grok:
      if: "ctx.event.code == '10002'"
      tag: acl_event_10002
      field: "message"
      description: "ACL log statistics"
      patterns:
        - "^%{DATA:aruba.acl.name} on %{DATA:aruba.interface.name} \\(%{DATA:aruba.acl.direction}\\): %{NUMBER:aruba.acl.hit_delta:long} %{GREEDYDATA:aruba.acl.ace_string}"
  - dissect:
      if: "ctx.event.code == '10003'"
      tag: acl_event_10003
      field: "message"
      description: "ACL application failure"
      pattern: "ACL %{aruba.acl.type} %{aruba.acl.name} failed to apply on %{aruba.acl.application}"

  # Policies events (1010x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POLICY.htm
  - dissect:
      if: "ctx.event?.code == '10101'"
      tag: policies_event_10101
      field: "message"
      description: "Policy application failure"
      pattern: "Policy %{aruba.policy.name} failed to apply on %{aruba.policy.application}"

  # TCAM events (102xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TCAM.htm
  - grok:
      if: "['10202','10203','10204','10205','10209','10210'].contains(ctx.event?.code)"
      tag: tcam_event_10202_10203_10204_10205_10209_10210
      field: "message"
      description: "[entry|table] [installation|uninstallation] failure | High-capacity TCAM/LPM [entry|table] [installation|uninstallation] failure "
      patterns:
        - "TCAM(/LPM)? table %{DATA:aruba.tcam.table_name} "
        - "in table %{GREEDYDATA:aruba.tcam.table_name}"

  # RBAC events (1030x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/RBACD.htm
  - grok:
      if: "['10301', '10302'].contains(ctx.event?.code)"
      tag: policies_event_10301_10302
      field: "message"
      description: "Log event when local tac_plus server has been started | server failed to start"
      patterns: 
        # Note: Adding more tolerances as the documentation might be wrong ('d' at the end)
        - "^Local authorization has been %{GREEDYDATA:aruba.status}"
        - "^Failed to %{DATA:aruba.status} local authorization"

  # ARP security events (104xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ARP-SECURITY.htm
  - grok:
      if: "['10401', '10402'].contains(ctx.event?.code)"
      tag: arp_event_10401_10402
      field: "message"
      description: "ARP inspection configuration on VLAN | ARP inspection port mode configuration"
      patterns:
        - "^ARP inspection %{DATA:aruba.status} on vlan %{GREEDYDATA:network.vlan.id}."
        - "^ARP inspection %{DATA:aruba.status} on port %{GREEDYDATA:aruba.port}."

  # PORT_ACCESS events (1050x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PORT_ACCESS.htm
  - grok:
      if: "['10501','10502','10503'].contains(ctx.event?.code)"
      tag: port_access_event_10501_10502_10503
      field: "message"
      description: "Client was logged-off administratively through command-line interface | port is [unblocked|blocked] by port-access daemon"
      patterns:
        - "^Client %{MAC:client.mac} was logged-off administratively through command-line interface"
        - "^Port %{DATA:aruba.port} is (blocked|unblocked) by port-access"
  - grok:
      if: "['10504','10505'].contains(ctx.event?.code)"
      tag: port_access_event_10504_10505
      field: "message"
      description: "The authentication mode associated with the port is changed | The client limit associated with the port is changed"
      patterns:
        - "^Clients were logged-off on the port %{DATA:aruba.port} due to a change in (%{AUTH_MODE_CHANGE}|%{LIMIT_CHANGE})"
      pattern_definitions:
        AUTH_MODE_CHANGE: "authentication mode from %{DATA:aruba.port_access.old_mode} to %{GREEDYDATA:aruba.port_access.mode}"
        LIMIT_CHANGE: "client limit from %{DATA:aruba.port_access.old_limit} to %{GREEDYDATA:aruba.limit.threshold}"
  - dissect:
      if: "ctx.event?.code == '10506'"
      tag: port_access_event_10506
      field: "message"
      description: "The name associated with a VLAN in use by port-access daemon changed"
      pattern: "The name associated with VLAN %{network.vlan.id} changed from %{aruba.port_access.old_name} to %{aruba.port_access.name}"
  - dissect:
      if: "ctx.event?.code == '10507'"
      tag: port_access_event_10507
      field: "message"
      description: "The policy configuration is updated by the user"
      pattern: "Clients using policy %{aruba.policy.name} were logged-off due to a configuration change in the policy"
  - dissect:
      if: "ctx.event?.code == '10508'"
      tag: port_access_event_10508
      field: "message"
      description: "VLAN is configured as Trunk for some clients and access for others. This could potentially result in traffic loss"
      pattern: "VLAN conflict detected on port %{aruba.port}"

  # L3 Encap capacity events (1060x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/L3_ENCAP.htm
  - grok:
      field: message
      tag: l3_event_10601_10602_10603
      description: "Logs event when a L3 encapsulation is added to a port"
      if: "['10601', '10602', '10603'].contains(ctx.event?.code)"
      patterns:
        - "^L3 resources critical for neighbor and route forwarding are (at safe levels|low). %{L3_ENCAP_COMMON}"
        - "^Out of L3 resources critical for neighbor and route forwarding. %{L3_ENCAP_COMMON}"
      pattern_definitions:
        L3_ENCAP_COMMON: "Used: %{DATA:aruba.l3.encaps_allocated}, Available: %{GREEDYDATA:aruba.l3.encaps_free}"

  # DPSE Events (109xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DPSE.htm
  - dissect:
      field: message
      tag: dpse_event_10901
      description: "A line card hit a backplane sequence error that triggered a recovery operation"
      if: "ctx.event?.code == '10901'"
      pattern: "Line card module %{aruba.dpse.linecard_name} triggered backplane sequence recovery"
  - dissect:
      field: message
      tag: dpse_event_10904
      description: "The system completed backplane sequence recovery triggered by line card error"
      if: "ctx.event?.code == '10904'"
      pattern: "Line card module %{aruba.dpse.linecard_name} completed backplane sequence recovery"

  # MAC Address mode configuration events (1100x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/FAULT_MONITOR.htm
  - grok:
      field: message
      tag: mac_event_11001_11002_11003
      description: "The following are the events related to MAC Address mode configuration"
      if: "['11001','11002','11003'].contains(ctx.event?.code)"
      patterns:
        - "^The MAC Address (configured|operational) mode changed from %{DATA:aruba.mac.old_mode} to %{GREEDYDATA:aruba.mac.new_mode}"
        - "^Station MAC add failure due to hardware full, mac=%{MAC:server.mac} vlan=%{GREEDYDATA:network.vlan.id}"

  # Fault Monitor Events (111xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/FAULT_MONITOR.htm
  - grok:
      field: message
      tag: fault_monitor_event_11101_11102
      description: >
        Logs event when a fault is detected on an interface.
        Logs event and shutdown the interface when a fault is detected on an interface.
      if: "['11101', '11102'].contains(ctx.event?.code)"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault detected( and port disabled)?"
  - grok:
      field: message
      tag: fault_monitor_event_11103
      description: "Interface is auto-enabled on timer expiry."
      if: "ctx.event?.code == '11103'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault re-enable time expired, port enabled"
  - grok:
      field: message
      tag: fault_monitor_event_11104
      description: "Interface is auto-enabled on profile configuration change."
      if: "ctx.event?.code == '11104'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault disable cancelled due to configuration change"
  - grok:
      field: message
      tag: fault_monitor_event_11105
      description: "Interface is auto-enabled on admin state change."
      if: "ctx.event?.code == '11105'"
      patterns:
          - "^Admin state changed and interface: %{DATA:aruba.interface.name} is auto-enabled"
  - grok:
      field: message
      tag: fault_monitor_event_11106
      description: "Logs event when disabling of a faulty interface failed."
      if: "ctx.event?.code == '11106'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault detected, port is already disabled by another fault"
  - grok:
      field: message
      tag: fault_monitor_event_11107
      description: "Logs event when a packet drop is detected for MAC Lockout MAC as source address."
      if: "ctx.event?.code == '11107'"
      patterns:
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as source address: %{NUMBER:aruba.fault.sa_diff_count:long}"
  - grok:
      field: message
      tag: fault_monitor_event_11108
      description: "Logs event when a packet drop is detected for MAC Lockout MAC as destination address."
      if: "ctx.event?.code == '11108'"
      patterns:
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as destination address: %{NUMBER:aruba.fault.da_diff_count:long}"
  - grok:
      field: message
      tag: fault_monitor_event_11109
      description: "Logs event when a packet drop is detected for MAC Lockout."
      if: "ctx.event?.code == '11109'"
      patterns:
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as source: %{NUMBER:aruba.fault.sa_diff_count:long} and destination: %{NUMBER:aruba.fault.da_diff_count:long} address"

    # MACsec events (1120x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MACSEC.htm
  - grok:
      field: message
      tag: macsec_event_11201_through_11204
      description: "The following are the events related to MACsec"
      if: "['11201','11202','11203','11204'].contains(ctx.event?.code)"
      patterns:
        - "^MACsec session established on Rx Secure Channel %{DATA:aruba.mac.sci} on interface %{GREEDYDATA:aruba.interface.name}"
        - "^MKA session secured for Connectivity Association %{DATA:aruba.mac.ckn} on interface %{GREEDYDATA:aruba.interface.name}"
        - "^Secure Association key updated for Connectivity Association %{DATA:aruba.mac.ckn} on interface %{DATA:aruba.interface.name} - Latest AN/KN %{DATA:aruba.mac.latest_an}/%{DATA:aruba.mac.latest_kn}, Old AN/KN %{DATA:aruba.mac.old_an}/%{GREEDYDATA:aruba.mac.old_kn}"
        - "^Possible replay attempt detected on the Secure Channel %{GREEDYDATA:aruba.mac.sci}."

  # Smartlink events (1130x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SMARTLINK.htm
  - grok:
      field: message
      tag: smartlink_event_11301_11302_11303
      if: "['11301','11302','11303'].contains(ctx.event?.code)"
      description: "flush message received on interface with control vlan | when [active|backup] link changed in the smartlink group"
      patterns:
        - "^Flush message received on %{DATA:aruba.interface.name} with control VLAN %{GREEDYDATA:network.vlan.id}"
        - "^(Active|Backup) link of the smartlink group %{DATA:group.id} changed to %{GREEDYDATA:aruba.interface.name}"

  # L3 Resource Manager events (1150x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/L3_RESMGR.htm
  - dissect:
      field: message
      tag: l3_rsmgr_event_11501
      if: "ctx.event?.code == '11501'"
      pattern: "IPv6 route prefix %{aruba.prefix} is not supported on this platform"

  # CFM Events (116xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ETH_OAM_CFM.htm
  - dissect:
      field: message
      tag: cfm_event_11601
      if: "ctx.event?.code == '11601'"
      pattern: "Connection lost for Maintenance Endpoint %{aruba.cfm.id} on %{aruba.cfm.interface}."
  - dissect:
      field: message
      tag: cfm_event_11602
      if: "ctx.event?.code == '11602'"
      pattern: "Connection restored for Maintenance Endpoint %{aruba.cfm.id} on %{aruba.cfm.interface}."

  # Container Manager Events (118xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CONTAINER.htm
  - dissect:
      field: message
      tag: container_manager_event_11801_11802_11803
      if: "['11801', '11802', '11803'].contains(ctx.event?.code)"
      pattern: "Container %{container.name} is %{?ignore_action}"

  # DNS Client Events (119xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/DNS_CLIENT.htm
  - grok:
      field: message
      tag: dns_client_event_11901
      description: "Event reported when DNS event triggered"
      if: "['11901'].contains(ctx.event?.code)"
      patterns:
        - "%{DATA:aruba.dns.type} event for VRF %{DATA:aruba.dns.vrf_name}$"

  # Telnet server events (1290x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TELNET_SERVER.htm
  - grok:
      field: message
      tag: telnet_server_event_12901_12902_12903
      description: "Logs a message when the Telnet server is [enabled|disabled] on a VRF | Logs a message when a user tries to enable Telnet server without setting admin password"
      if: "['12901','12902','12903'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to enable Telnet server on VRF %{DATA:aruba.vrf.name}. Admin password is not set."
        - "on VRF %{GREEDYDATA:aruba.vrf.name}."
  - grok:
      field: message
      tag: telnet_server_event_12904_12905_12906_12907
      description: "Logs a message when a user login is [successful|fails] | when a user logs out of a session | when a user tries to login while maximum number of sessions are reached."
      if: "['12904','12905','12906','12907'].contains(ctx.event?.code)"
      patterns:
        - "^User %{DATA:user.name} (logged in|login|logged out of TELNET session) from %{IP:client.ip}"
        - "^TELNET session from %{IP:client.ip} is rejected because maximum number of TELNET sessions is reached."
  - grok:
      field: message
      tag: telnet_server_event_
      description: ""
      # Possible documentation error with duplicate definition of 12908, will parse 12908 and 12909 together in the same grok
      if: "['12908','12909'].contains(ctx.event?.code)"
      patterns:
        - "^TELNET session from User %{DATA:user.name} is closed because maximum number of sessions per user is reached."
        - "^User %{DATA:user.name} login from %{IP:client.ip} for TELNET session has failed since the user is trying to login through an interface which is not allowed. Allowed interfaces are: %{GREEDYDATA:aruba.interface.id}."

  # Cleanup MAC addresses for different fields
  - uppercase:
      field: client.mac
      ignore_missing: true
  - gsub:
      field: client.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: source.mac
      ignore_missing: true
  - gsub:
      field: source.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: host.mac
      ignore_missing: true
  - gsub:
      field: host.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: server.mac
      ignore_missing: true
  - gsub:
      field: server.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: destination.mac
      ignore_missing: true
  - gsub:
      field: destination.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.mstp.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.mstp.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.ndm.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.ndm.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.rpvst.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.rpvst.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true

  # Make sure that host.ip and host.mac are arrays
  - set:
      field: host.ip
      value: ['{{{host.ip}}}']
      if: ctx.host?.ip instanceof String
  - set:
      field: host.mac
      value: ['{{{host.mac}}}']
      if: ctx.host?.mac instanceof String

  # Convert due to dissect processing
  # - aruba.slot
  - convert:
      field: aruba.slot
      type: long
      ignore_missing: true

  - remove:
      field:
        - _temp.config
      ignore_missing: true

  - remove:
      field: aruba.sequence
      ignore_missing: true
      if: "ctx.aruba?.sequence == '-'"

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
