---
description: Pipeline for processing HPE Aruba logs.

processors:
  - set:
      field: event.original
      copy_from: message
  - remove:
      field: message
      ignore_missing: true
  - redact:
      field: "event.original"
      tag: redact_passkey
      description: "Redacting passkey updates"
      prefix: "tacacs_passkey update:   -> "
      patterns:
        - "tacacs_passkey %{GREEDYDATA:redact}"
  - set:
      field: ecs.version
      value: "8.11.0"
  - set:
      field: event.category
      value: [network]
  #
  # Parse the syslog message
  # This grok pattern is based on the syslog message format used by HPE Aruba CX switches.
  #
  - grok:
      field: event.original
      tag: grok_event_original
      if: ctx.event?.original != null
      patterns:
        - "%{SYSLOG_HEADER}%{GREEDYDATA:message}"
      pattern_definitions:
        SYSLOG_HEADER: "%{TIMESTAMP_ISO8601:@timestamp}\\s+%{USER:aruba.hardware.device}\\s+%{DATA:log.syslog.appname}\\[%{POSINT:log.syslog.procid}\\]:\\s+%{WORD:aruba.event_type}\\|(?:%{OPTIONAL_HEADER})?"
        OPTIONAL_HEADER: "%{POSINT:event.code}\\|%{USER:log.level}\\|(?:%{USER:aruba.component.category})?\\|(?:%{DATA:aruba.sequence})?\\|"
  - grok:
      field: aruba.sequence
      if: ctx.aruba?.sequence != null && ctx.aruba.sequence.contains("/")
      tag: parse_sequence
      patterns:
        - "%{POSINT:event.sequence:long}\\/%{POSINT}"
  - lowercase:
      field: event.kind
      tag: lowercase_event_kind
      ignore_missing: true

    # LLDP events (1xx)
    # https://arubanetworking.hpe.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LLDP.htm
  - grok:
      field: message
      tag: lldp_event_103_through_113
      description: "Logs event when LLDP (Link Layer Discovery Protocol) feature"
      if: "['103','104','105','106','107','108','109','110','113'].contains(ctx.event?.code)"
      patterns:
        - "^LLDP neighbor %{DATA:aruba.instance.id} (added|updated|deleted) on %{GREEDYDATA:aruba.interface.id}"
        - "^Configured LLDP (%{TX_TIMER}|%{TX_HOLD}|%{TX_DELAY}|%{REINIT_DELAY}|%{MANAGEMENT_IP})"
        - "^PVID mismatch on %{DATA:aruba.interface.id} pvid = %{NUMBER:aruba.lldp.pvid:long}, Neighbor %{DATA:aruba.instance.id} port_id = %{DATA:aruba.lldp.ninterface} pvid = %{NUMBER:aruba.lldp.npvid:long}"
      pattern_definitions:
        TX_TIMER: "tx-timer to %{NUMBER:aruba.lldp.tx_timer:long}"
        TX_HOLD: "tx-hold to %{NUMBER:aruba.lldp.tx_hold:long}"
        TX_DELAY: "tx-delay to %{NUMBER:aruba.lldp.tx_delay:long}"
        REINIT_DELAY: "reinit-delay to %{NUMBER:aruba.lldp.reinit_delay:long}"
        MANAGEMENT_IP: "Management IP %{IP:server.ip}"
  
  # Fan Events (2xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/FAN.htm
  - grok:
      field: message
      tag: fan_event_201
      description: "Log the total number of fans in the subsystem"
      if: "ctx.event?.code == '201'"
      patterns:
        - "^There are %{INT:aruba.fan.count:long} total fans in subsystem %{DATA:aruba.subsystem}\\.?$"
  - grok:
      field: message
      tag: fan_event_202
      description: "Log the fan speed set"
      if: "ctx.event?.code == '202'"
      patterns:
        - "^Subsystem %{DATA:aruba.subsystem} setting fan speed control register to %{DATA:aruba.fan.speedval}: %{FAN_VALUE:aruba.fan.value}"
      pattern_definitions:
        FAN_VALUE: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_203
      description: "Log the air flow direction"
      if: "ctx.event?.code == '203'"
      patterns:
        - "^Air flow direction: %{FAN_VALUE:aruba.fan.value}"
      pattern_definitions:
        FAN_VALUE: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_204_205
      description: "log event when a fan tray is removed|inserted from|into the chassis"
      if: "['204','205'].contains(ctx.event?.code)"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_name} was (removed|inserted)"
  - grok:
      field: message
      tag: fan_event_206_207
      description: "log event when a fan module is removed|inserted from|into a fan tray"
      if: "['206','207'].contains(ctx.event?.code)"
      patterns:
        - "^Fan module %{DATA:aruba.fan.fmod_num}( in fan tray %{DATA:aruba.fan.ft_name})? was (removed|inserted)"
  - grok:
      field: message
      tag: fan_event_208
      description: "Log event when an unsupported fan tray is inserted"
      if: "ctx.event?.code == '208'"
      patterns:
        - "^Unsupported fan tray %{DATA:aruba.fan.ft_name} detected. Please insert a standard fan tray"
  - grok:
      field: message
      tag: fan_event_209
      description: "Log error when system shutdown is initiated due to critical fan faults"
      if: "ctx.event?.code == '209'"
      patterns:
        - "^Shutting down system now because %{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{NUMBER:aruba.limit.threshold}"
  - grok:
      field: message
      tag: fan_event_211
      description: "Log error when the number of failures exceed the allowable limit"
      if: "ctx.event?.code == '211'"
      patterns:
        - "^Shutting down system in %{NUMBER:aruba.time.seconds:long} seconds because %{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{GREEDYDATA:aruba.limit.threshold}"
  - grok:
      field: message
      tag: fan_event_213
      description: "Log error when there are fan faults"
      if: "ctx.event?.code == '213'"
      patterns:
        - "^%{NUMBER:aruba.error.count:long} %{DATA:error.type} in the system"
  - grok:
      field: message
      tag: fan_event_214
      description: "List out the faulty or missing fan names"
      if: "ctx.event?.code == '214'"
      patterns:
        # OS 10.7
        - "^%{DATA:aruba.fan.function}: Fan fault in tray %{DATA:aruba.fan.tray_idx:long}, module %{NUMBER:aruba.fan.index:long}, reason: %{EVENT_REASON:event.reason}"
        # OS 10.15
        - "^%{DATA:aruba.fan.function}: Fan %{DATA:aruba.fan.name} faulted, reason: %{EVENT_REASON:event.reason}"
      pattern_definitions:
        EVENT_REASON: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_215
      description: "Log the fan status"
      if: "ctx.event?.code == '215'"
      patterns:
        - "^%{DATA:aruba.fan.name} fan is %{FAN_STATUS:aruba.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_216
      description: "Log the change in fan status"
      if: "ctx.event?.code == '216'"
      patterns:
        # OS 10.7
        - "^Status of fan %{NUMBER:aruba.fan.module_idx:long} in tray %{NUMBER:aruba.fan.tray_idx:long} has changed from %{DATA:aruba.fan.old_status} to %{FAN_STATUS:aruba.status}"
        # OS 10.15
        - "^Status of fan %{DATA:aruba.fan.name} has changed from %{DATA:aruba.fan.old_status} to %{FAN_STATUS:aruba.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_217
      description: "Log when minimum number of fans are not present"
      if: "ctx.event?.code == '217'"
      patterns:
        - "^Operational fan count below minimum. %{NUMBER:aruba.fan.count:long} fans operating, but %{NUMBER:aruba.fan.minimum:long} are required"
  - grok:
      field: message
      tag: fan_event_218
      description: "Log when the fan speed index changes to and from the maximum for each thermal zone"
      if: "ctx.event?.code == '218'"
      patterns:
        - "^Fan speed index for thermal zone %{NUMBER:aruba.fan.zone_idx:long} is %{SPEED_STATUS:aruba.status}"
      pattern_definitions:
        SPEED_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_219
      description: "Log event when a fan tray is powered on or off"
      if: "ctx.event?.code == '219'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_name} powered %{FAN_STATUS:aruba.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"
  - grok:
      field: message
      tag: fan_event_220
      description: "Log event when a fan tray is inserted specifying its airflow direction"
      if: "ctx.event?.code == '220'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_name} airflow is %{FAN_DIRECTION:aruba.fan.ft_dir}"
      pattern_definitions:
        FAN_DIRECTION: "[-_0-9a-zA-Z]+"
  - dissect:
      field: message
      tag: fan_event_221
      description: "Log event when a fan tray airflow is not matching with system airflow"
      if: "ctx.event?.code == '221'"
      pattern: "%{aruba.fan.ft_air_curr} airflow fan tray %{aruba.fan.ft_name} unsupported; this system requires %{aruba.fan.ft_air_req} airflow"
  - grok:
      field: message
      tag: fan_event_222
      description: "Log error when number of faulty/supported fans does not meet the allowable limit"
      if: "ctx.event?.code == '222'"
      patterns:
        - "^%{NUMBER:aruba.error.count:long} %{DATA:error.type} %{DATA:aruba.fan.compare_mode} limit of %{GREEDYDATA:aruba.limit.threshold}"
  - dissect:
      field: message
      tag: fan_event_223
      description: "Log when fan tray SKU ID in FRU is mismatched"
      if: "ctx.event?.code == '223'"
      pattern: "Fan tray %{aruba.fan.ft_name} FRU EPPROM is incorrectly programmed"
  - dissect:
      field: message
      tag: fan_event_224
      description: "Log event when a fan tray airflow is not matching with system airflow and is disabled"
      if: "ctx.event?.code == '224'"
      pattern: "%{aruba.fan.ft_air_curr} airflow fan tray %{aruba.fan.ft_name} disabled; this system requires %{aruba.fan.ft_air_req} airflow"
  - grok:
      field: message
      tag: fan_event_225
      description: "Log event when a misconfigured fan tray is enabled or disabled"
      if: "ctx.event?.code == '225'"
      patterns:
        - "^Fan tray %{DATA:aruba.fan.ft_name} misconfigured; this fan tray has been %{FAN_STATUS:aruba.status}"
      pattern_definitions:
        FAN_STATUS: "[-_0-9a-zA-Z]+"

    # Power events (3xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POWER.htm
  - dissect:
      field: message
      tag: power_event_301
      description: ""
      if: "ctx.event?.code == '301'"
      pattern: "PSU %{aruba.power.name} changed state to %{aruba.state}"
  - dissect:
      field: message
      tag: power_event_302
      description: ""
      if: "ctx.event?.code == '302'"
      pattern: "PSUs inserted in the system are of %{aruba.power.type} types. This is %{aruba.power.support} configuration."
  - grok:
      field: message
      tag: power_event_303_304
      description: ""
      if: "['303','304'].contains(ctx.event?.code)"
      patterns: 
        - "^PSU %{DATA:aruba.power.name} (encountered a warning|faulted). Total (warning|fault) count: %{NUMBER:aruba.count:long}"
  - grok:
      field: message
      tag: power_event_305_309
      description: ""
      if: "['305','309'].contains(ctx.event?.code)"
      patterns: 
        - "^PSU %{DATA:aruba.power.name}: (Internal communication|Output current) %{GREEDYDATA:aruba.status}( threshold limit)?"
  - grok:
      field: message
      tag: power_event__307_308
      description: ""
      if: "['306','307','308'].contains(ctx.event?.code)"
      patterns:
        - "^PSU %{DATA:aruba.power.name}: Fan-%{INT:aruba.power.fanidx:long} %{GREEDYDATA:aruba.status}"
        - "^PSU %{DATA:aruba.power.name}: %{DATA:aruba.power.sensorid} sensor %{DATA:aruba.status} threshold limit"
        - "^PSU %{DATA:aruba.power.name} has shutdown due to over temperature in %{DATA:aruba.power.sensorid} sensor"
  - grok:
      field: message
      tag: power_event_310_311_314_315_317
      description: ""
      if: "['310','311','314','315','317'].contains(ctx.event?.code)"
      patterns:
        - "^PSU %{DATA:aruba.power.name} "
  - grok:
      field: message
      tag: power_event_312_313
      description: ""
      if: "['312','313'].contains(ctx.event?.code)"
      patterns:
        - "^PSU Redundancy (set to|operating at) %{GREEDYDATA:aruba.power.redund}"
  - dissect:
      field: message
      tag: power_event_316
      description: "There is insufficient power to power a card. Power can be removed from configured PoE PDs to be able to power the card."
      if: "ctx.event?.code == '316'"
      pattern: "%{aruba.power.type} module %{aruba.power.name} denied power due to insufficient power. Configured PoE power can be deconfigured to allow card to be granted power."

    # Interface events (40x && 1420x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/INTERFACE.htm
  - grok:
      field: message
      tag: interface_event_401_402
      description: "Log when interface port_admin set to [up|down]"
      if: "['401','402'].contains(ctx.event?.code)"
      patterns:
        - "^Interface port_admin set to (up|down) for %{DATA:aruba.interface.id} interface"
  - grok:
      field: message
      tag: interface_event_403_404
      description: "Log when interface link status is [up|down]"
      if: "['403','404'].contains(ctx.event?.code)"
      patterns:
        - "^Link status for interface %{DATA:aruba.interface.id} is %{GREEDYDATA:aruba.state}"
  - grok:
      field: message
      tag: interface_event_406_407_408
      description: "Log when interface encountered an error that requires user intervention | a downshift | is down due to incompatible MACsec and PFC configutration"
      if: "['406','407','408'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} %{407_PATTERN}?"
      pattern_definitions:
        407_PATTERN: "downshifted to speed %{NUMBER:aruba.interface.port_speed:long} Mbps because link attempt failed at higher speed"
  - grok:
      field: message
      tag: interface_event_409_410_14201_14202_14203
      description: "Log when interface ignores a link reset | when the interface cannot be enabled due to a configuration setting that is incompatible with hardware | when the current profile does not support splitting | Cable diagnostic test is unable to run on VSF port | unable to run on unsupported port | unable to run due to another ongoing diagnostic test"
      if: "['409','410','14201','14202','14203'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} link reset ignored. %{NUMBER:aruba.count:long} total link resets ignored for this interface"
        - "^Interface %{DATA:aruba.interface.id}( cannot|: unable)"

    # LED events (50x)
    # https://arubanetworking.hpe.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LED.htm
  - grok:
      field: message
      tag: led_event_501_502
      description: "Log about number of LED [types|config] in subsystem"
      if: "['501','502'].contains(ctx.event?.code)"
      patterns:
        - "^There are %{NUMBER:aruba.count:long} LED (types|configs) in subsystem %{GREEDYDATA:aruba.subsystem}"

    # Port events (60x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LED.htm
  - grok:
      field: message
      tag: port_event_601_602
      description: "Log when netlink socket [creation|bind] failed"
      if: "['601','602'].contains(ctx.event?.code)"
      patterns:
        - "^Netlink socket (creation|bind) failed %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: port_event_603_604
      description: "Log when netlink failed to set mtu for interface | failed to change the interface status"
      if: "['603','604'].contains(ctx.event?.code)"
      patterns:
        - "^Netlink failed to (set mtu %{DATA:aruba.mtu} for|bring %{DATA:aruba.status} the) interface %{GREEDYDATA:aruba.interface.id}"
  - dissect:
      field: message
      tag: port_event_605
      description: "Unknown internal vlan policy"
      if: "ctx.event?.code == '605'"
      pattern: "Unknown internal vlan policy %{aruba.policy.name}"
  - dissect:
      field: message
      tag: port_event_606
      description: "Log when allocation failed for internal vlan for port"
      if: "ctx.event?.code == '606'"
      pattern: "Error allocating internal vlan for port %{network.vlan.id}"
  - dissect:
      field: message
      tag: port_event_607
      description: "Log when a duplicate address is received on a port"
      if: "ctx.event?.code == '607'"
      pattern: "Overlapping networks observed for %{client.ip}"

    # SYS events (7xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SYS.htm
  - grok:
      field: message
      tag: sys_event_705_711
      description: "Log when  failed to allocate memory | Indicates that the system has detected DDR errors during uboot BIST"
      if: "['705','711'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to allocate memory for %{GREEDYDATA:aruba.sys.name}"
        - "^Detected DDR errors during uboot BIST, module %{DATA:aruba.sys.module} reported %{GREEDYDATA:aruba.error.description}"

    # Temperature events (8xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TEMPERATURE.htm
  - dissect:
      field: message
      tag: temp_event_801
      description: "Log event when sensor type is unrecognized"
      if: "ctx.event?.code == '801'"
      pattern: "Unrecognized sensor type %{aruba.temp.type}"
  - grok:
      field: message
      tag: temp_event_802
      description: "Log event when sensor temperature is above the critical threshold"
      if: "ctx.event?.code == '802'"
      patterns:
        - "^Module %{DATA:aruba.temp.module} shutdown initiated for sensor %{DATA:aruba.temp.name} with critical temperature, %{NUMBER:aruba.temp.celsius:long} degC."
  - grok:
      field: message
      tag: temp_event_803_804
      description: "Log event when sensor temperature is above the over-temperature threshold | when a sensor returns to safe operating conditions"
      if: "['803','804'].contains(ctx.event?.code)"
      patterns:
        - "(S|s)ensor %{DATA:aruba.temp.name}( back to safe temperature)?, %{NUMBER:aruba.temp.celsius:long} degC."
  - dissect:
      field: message
      tag: temp_event_805
      description: "Log when the system derate changes."
      if: "ctx.event?.code == '805'"
      pattern: "System derate changed from %{aruba.temp.old} to %{aruba.temp.new}"
  - grok:
      field: message
      tag: temp_event_806_807
      description: "Log when ambient temperature is above the ambient temperature limits | returns to safe operating conditions"
      if: "['806','807'].contains(ctx.event?.code)"
      patterns:
        - "^Ambient temperature for sensor %{DATA:aruba.temp.name} above %{NUMBER:aruba.temp.celsius:long} degC"
        - "^Ambient temperature for sensor %{DATA:aruba.temp.name} back to safe temperature, between %{NUMBER:aruba.temp.t_low:long} and %{NUMBER:aruba.temp.t_high:long} degC"
  - dissect:
      field: message
      tag: temp_event_808
      description: "Log failures in configuring sensor temperature warning/critical limits."
      if: "ctx.event?.code == '808'"
      pattern: "Sensor %{aruba.temp.name} %{aruba.temp.limit_type} limit configuration %{aruba.status}"
  - grok:
      field: message
      tag: temp_event_809_810
      description: "Log when ambient temperature is [above|below] commercial grade transceiver upper limit when non-industrial transceivers are installed"
      if: "['809','810'].contains(ctx.event?.code)"
      patterns:
        - "^Ambient temperature %{NUMBER:aruba.temp.celsius:long} degC is (above|below) the commercial grade transceiver (limit|range) of %{DATA:aruba.limit.threshold} degC"
  - grok:
      field: message
      tag: temp_event_811
      description: "Log when ambient temperature returns to commercial grade transceiver range when non-industrial transceivers are installed."
      if: "ctx.event?.code == '811'"
      patterns: 
        - "^Ambient temperature %{NUMBER:aruba.temp.celsius:long} degC returned to within the commercial grade transceiver range of %{DATA:aruba.temp.t_low:long}-%{DATA:aruba.temp.t_high:long} degC"
  - grok:
      field: message
      tag: temp_event_812_813_814
      description: "Log when ambient temperature is below the ambient temperature limits | temperature is below the under-temperature threshold | temperature is below the low critical threshold"
      if: "['812','813','814'].contains(ctx.event?.code)"
      patterns:
        - "^(Ambient |Under-)temperature for sensor %{DATA:aruba.temp.name}(,| below) %{NUMBER:aruba.temp.celsius:long} degC"
        - "^Module %{DATA:aruba.temp.module} shutdown initiated for sensor %{DATA:aruba.temp.name} with low critical temperature, %{NUMBER:aruba.temp.celsius:long} degC"

    # Loopback events (90x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/LOOPBACK.htm
  - grok:
      field: message
      tag: loop_901_902_903
      description: "Log when loopback interface event is triggered"
      if: "['901','902','903'].contains(ctx.event?.code)"
      patterns:
        - "^Loopback Interface %{DATA:aruba.interface.id}, (created|deleted|configured administratively %{GREEDYDATA:aruba.state})"

    # sFlow events (10xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SFLOW.htm
  - grok:
      field: message
      tag: sflow_event_1001_1002_1003
      description: "Log a failure when trying to start/stop/restart host sFlow daemon | read/write to host sFlow configuration file | trying to configure sFlow on SIM OVS"
      if: "['1001','1002','1003'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to %{DATA:aruba.sflow.operation} host sFlow (agent|configuration file %{DATA:file.name}): %{GREEDYDATA:event.reason}"
        - "^Failed to %{DATA:aruba.sflow.operation} sFlow configuration from bridge %{DATA:aruba.sflow.bridge}: %{GREEDYDATA:event.reason}"
  - dissect:
      field: message
      tag: sflow_event_1005
      description: "Log a failure when trying to add/delete an iptable rule for sFlow."
      if: "ctx.event?.code == '1005'"
      pattern: "Failed to %{aruba.sflow.operation} %{aruba.sflow.chain} iptable rules for %{aruba.port}: %{event.reason}"
  - dissect:
      field: message
      tag: sflow_event_1008
      description: "Logs an error if an interface does not have a netdev class."
      if: "ctx.event?.code == '1008'"
      pattern: "Unable to get netdev for interface %{aruba.interface.id}"
  - dissect:
      field: message
      tag: sflow_event_1010
      description: "Logs an error if sFlow KNET filter creation fails."
      if: "ctx.event?.code == '1010'"
      pattern: "Failed to create KNET filter for: %{aruba.error.description}"
  - grok:
      field: message
      tag: sflow_event_1014_1015
      description: "Logs an error if sFlow is enabled/disabled on an invalid port | if sFlow sampler is missing on a port"
      if: "['1014','1015'].contains(ctx.event?.code)"
      patterns:
        - "port: %{GREEDYDATA:aruba.port}"
  - grok:
      field: message
      tag: sflow_event_1004_1017
      description: "Log a failure when trying to delete all iptable rules added for sFlow | if port configuration is not available"
      if: "['1004','1017'].contains(ctx.event?.code)"
      patterns:
        - ": %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: sflow_event_1018_1019
      description: "Logs an error if (getting|setting) a sampling rate on a port fails."
      if: "['1018','1019'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to (get|set) sampling rate on port %{DATA:aruba.port}: %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: sflow_event_1020_1021
      description: "Logs an error in case of invalid agent interface IP address configuration | invalid collector IP address configuration."
      if: "['1020','1021'].contains(ctx.event?.code)"
      patterns:
        - "IP address: %{IP:client.ip}"
  - dissect:
      field: message
      tag: sflow_event_1022
      description: "Logs an error if unable to retrieve interface statistics."
      if: "ctx.event?.code == '1022'"
      pattern: "Failed to get interface statistics for unit %{aruba.unit} port %{aruba.port}: %{event.reason}"
  - dissect:
      field: message
      tag: sflow_event_1025
      description: "Logs a change in sFlow sampling rate."
      if: "ctx.event?.code == '1025'"
      pattern: "Changed sFlow sampling rate from %{aruba.sflow.old_rate} to %{aruba.sflow.new_rate}."
  - grok:
      field: message
      tag: sflow_event_1026
      description: "Logs sFlow agents header length event."
      if: "ctx.event?.code == '1026'"
      patterns: 
        - "Set sFlow agents header len to %{NUMBER:aruba.len:long}."
  - grok:
      field: message
      tag: sflow_event_1027
      description: "Logs sFlow agents header length event."
      if: "ctx.event?.code == '1027'"
      patterns: 
        - "^Set sFlow agents IP to %{IP:client.ip}."
  - grok:
      field: message
      tag: sflow_event_1028
      description: "Log setting max datagram size on sFlow agent."
      if: "ctx.event?.code == '1028'"
      patterns: 
        - "^Set max datagram size on sFlow agent to %{NUMBER:aruba.sflow.dgramsize:long}."
  - dissect:
      field: message
      tag: sflow_event_1029
      description: "Add sFlow poller on a port"
      if: "ctx.event?.code == '1029'"
      pattern: "Add sFlow poller on %{aruba.port} with ifIndex %{aruba.interface.id} at interval %{aruba.sflow.intvl}."
  - dissect:
      field: message
      tag: sflow_event_1030
      description: "Delete sFlow poller on a port."
      if: "ctx.event?.code == '1030'"
      pattern: "Remove sFlow poller on%{aruba.interface.id}."
  - dissect:
      field: message
      tag: sflow_event_1031
      description: "Set polling interval for sFlow agent."
      if: "ctx.event?.code == '1031'"
      pattern: "Set polling interval of %{aruba.sflow.intvl} on sFlow agent."
  - dissect:
      field: message
      tag: sflow_event_1032
      description: "Logs change in sFlow mode."
      if: "ctx.event?.code == '1032'"
      pattern: "sFlow sampling mode set to %{aruba.sflow.mode}."

    # Supportability events (12xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SUPPORTABILITY.htm
  - grok:
      field: message
      tag: supportability_event_1201
      description: "A daemon has crashed and generated core dump"
      if: "ctx.event?.code == '1201'"
      patterns: 
        # Documentation doesn't align with actual logs, accounting for both formats
        - "^%{DATA:process.name} crashed due to %{NUMBER:process.exit_code:long},%{GREEDYDATA:process.end}"
        - "^%{DATA:process.name} crashed due to signal:%{NUMBER:process.exit_code:long}"
  - grok:
      field: message
      tag: supportability_event_1203_1204
      description: "Logs kernel failed to compress vmcore | occurred and secondary kernel core failed to save uncompressed core"
      if: "['1203','1204'].contains(ctx.event?.code)"
      patterns:
        - "Error log:%{GREEDYDATA:aruba.error.description}"
  - dissect:
      field: message
      tag: supportability_event_1206
      description: "Logs reboot information"
      if: "ctx.event?.code == '1206'"
      pattern: "Module rebooted. Reason: %{event.reason}, Boot-ID: %{host.boot.id}"
  - dissect:
      field: message
      tag: supportability_event_1208
      description: "Event raised when system memory usage goes beyond high threshold."
      if: "ctx.event?.code == '1208'"
      # <daemons> could be an array, need real logs to warrant parsing as array
      pattern: "High system memory usage detected. High memory usage daemons are %{aruba.supportability.daemons}"
  - grok:
      field: message
      tag: supportability_event_1213_1214
      description: "Event raised when the sampled value has reached the [rising|falling] threshold "
      if: "['1213','1214'].contains(ctx.event?.code)"
      patterns:
        - "^RMON alarm %{DATA:aruba.supportability.alarm_index} - (Rising|Falling) threshold value of %{DATA:aruba.limit.threshold} reached for %{GREEDYDATA:aruba.supportability.oid}."
  - dissect:
      field: message
      tag: supportability_event_1215_1216
      description: "A (critical)? process is exiting due to an unrecoverable error"
      if: "['1215','1216'].contains(ctx.event?.code)"
      pattern: "%{process.name} exiting. Reason: %{event.reason}"
  - grok:
      field: message
      tag: supportability_event_1218_1219_1220
      description: "Event raised when a new syslog server is added for remote logging | when a syslog server is removed from remote logging | when an existing syslog server configuration is modified"
      if: "['1218','1219','1220'].contains(ctx.event?.code)"
      patterns:
        - "logging to %{DATA:client.address} over %{DATA:aruba.vrf.id} vrf"
  - grok:
      field: message
      tag: supportability_event_1223_1224
      description: "Event raised the log buffer is almost full. User can copy these logs before the logs being overwritten | log buffer has wrapped; older logs will be overwritten."
      if: "['1223','1224'].contains(ctx.event?.code)"
      patterns:
        - "^The %{DATA:aruba.supportability.log_type} buffer"
  - dissect:
      field: message
      tag: supportability_event_1225
      description: "Event raised when suppuort-files collection is requested"
      if: "ctx.event?.code == '1225'"
      pattern: "Collection of support-files named %{file.name} of type %{file.type} is requested for the module %{aruba.supportability.module}."
  - grok:
      field: message
      tag: supportability_event_1226_1227
      description: "Event raised when a requst received to delete given support-files | when support-files is deleted"
      if: "['1226','1227'].contains(ctx.event?.code)"
      patterns:
        - "^Support-files named %{DATA:file.name} is"
  - grok:
      field: message
      tag: supportability_event_1228_1229_1230
      description: "Event raised when collection support-files failed | failed to delete a given support-files | collection of support-files state changes"
      if: "['1228','1229','1230'].contains(ctx.event?.code)"
      patterns:
        - "^(Collection|Deletion) of support-files named %{DATA:file.name} failed due to %{GREEDYDATA:event.reason}."
        - "^Collection of support-files named %{DATA:file.name} is %{GREEDYDATA:aruba.state}."
  - dissect:
      field: message
      tag: supportability_event_1235
      description: "Logs reboot count information"
      if: "ctx.event?.code == '1235'"
      pattern: "Switch boot count is : %{aruba.status}"

    # LACP events (13xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LACP.htm
  - grok:
      field: message
      tag: lacp_event_1301_1302_1312_1313
      description: "Dynamic LAG|VSX has been created|deleted"
      if: "['1301','1302', '1312', '1313'].contains(ctx.event?.code)"
      patterns:
        - "^(Dynamic )?LAG %{DATA:aruba.instance.id} (created|deleted|set as VSX)"
        - "^Failed to create LAG %{GREEDYDATA:aruba.instance.id}"
  - dissect:
      field: message
      tag: lacp_event_1305
      description: "Log when LACP system priority is set"
      if: "['1305'].contains(ctx.event?.code)"
      pattern: "LACP system priority set to %{aruba.lacp.system_priority}"
  - dissect:
      field: message
      tag: lacp_event_1307
      description: "Log when LACP system ID is set"
      if: "['1307'].contains(ctx.event?.code)"
      pattern: "LACP system ID set to %{aruba.lacp.system_id}"
  - grok:
      field: message
      tag: lacp_event_1303_1304_1311_1314_1318
      description: "Log when interface has been added|removed to LAG"
      if: "['1303','1304','1311','1314','1318'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} added to LAG %{DATA:aruba.instance.id}. Existing configuration on interface %{DATA:aruba.interface.prev_id} will be removed"
        - "^Interface %{DATA:aruba.interface.id} removed from LAG %{DATA:aruba.instance.id}. It will be set with default configuration with admin down state"
        - "^Partner is lost \\(timed out\\) for interface %{DATA:aruba.interface.id} LAG %{DATA:aruba.instance.id}. State: %{GREEDYDATA:aruba.lacp.fsm_state}"
        - "^LAG %{DATA:aruba.instance.id} not sending LACPDUs through interface %{DATA:aruba.interface.id} because VSX information is not complete"
        - "^Interface %{DATA:aruba.interface.id} enabled by fallback for lag %{GREEDYDATA:aruba.instance.id}"
  - grok:
      field: message
      tag: lacp_event_1306_1308_1315_1316_1317_1320_1323
      description: "Log when LACP mode|rate|mode|timeout is set|expired | Logs to set global load balancing mode for LAG interfaces | Logs to capture if fallback is changed for LAG interface"
      if: "['1306','1308','1315','1316','1317','1320','1323'].contains(ctx.event?.code)"
      patterns:
        - "^LACP (mode set to %{DATA:aruba.lacp.mode}|rate set to %{DATA:aruba.lacp.rate}) for %{LAG_ID_GREEDY}"
        - "^LACP fallback mode set to %{DATA:aruba.lacp.fallback_mode} for %{LAG_ID_GREEDY}"
        - "^LACP fallback timeout( set to)? %{NUMBER:aruba.timeout:long}( expired)? for %{LAG_ID_GREEDY}"
        - "^LAG load balancing mode is set to %{DATA:aruba.lacp.mode} for %{LAG_ID_GREEDY}"
        - "^Fallback is %{DATA:aruba.lacp.fallback} for %{LAG_ID_GREEDY}"
      pattern_definitions:
        LAG_ID_GREEDY: "(LAG|lag) %{GREEDYDATA:aruba.instance.id}"
  - grok:
      field: message
      tag: lacp_event_1309_1310_1319_1321_1322
      description: "Dynamic LAG has event has been raised"
      if: "['1309','1310','1319','1321','1322'].contains(ctx.event?.code)"
      patterns:
        - "^Partner is detected for %{INTF_ID} %{LAG_ID}\\s?: %{DATA:aruba.lacp.partner_sys_id}. %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^Partner is out of sync for %{INTF_ID} %{LAG_ID}. %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^LAG global load balancing mode is set to %{GREEDYDATA:aruba.lacp.mode}"
        - "^%{LAG_ID} State change for interface %{DATA:aruba.interface.id}: %{ACTOR_STATE}, %{PARTNER_STATE}"
        - "^%{INTF_NAME} cannot be part of Lag %{NUMBER:aruba.lacp.lag_number:long}. Speed mismatched \\(Interface speed %{NUMBER:aruba.lacp.port_speed:long}Mbps Lag base speed %{NUMBER:aruba.lacp.lag_speed:long}Mbps\\)."
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
      pattern_definitions:
        LAG_ID: "(LAG|lag) %{DATA:aruba.instance.id}"
        INTF_ID: "(I|i)nterface %{DATA:aruba.interface.id}"
        INTF_NAME: "(I|i)nterface %{DATA:aruba.interface.name}"
        ACTOR_STATE: "Actor state: %{DATA:aruba.lacp.actor_state}"
        PARTNER_STATE: "(P|p)artner state %{GREEDYDATA:aruba.lacp.partner_state}"
  - grok:
      field: message
      tag: lacp_event_1326_1327_1328
      description: "Log when interface is enabled by fallback-static | when interface is disabled by fallback-static | when interface is blocked due to mismatching partner on the vsx interface"
      if: "['1326','1327','1328'].contains(ctx.event?.code)"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} (enabled|disabled) by fallback-static for lag %{GREEDYDATA:aruba.instance.id}"
        - "^Interface %{DATA:aruba.interface.id} lag %{DATA:aruba.instance.id} blocked as link partners on vsx primary and secondary mismatch"

    # LAG events (14xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LAG.htm
  - grok:
      field: message
      tag: lacp_event_1401_through_1414
      description: "Dynamic LAG has event has been raised"
      if: "['1401','1402','1403','1404','1405','1406','1407','1408','1409','1410','1411','1412','1413','1414'].contains(ctx.event?.code)"
      patterns:
        - "^Trunk set succeeds %{UNIT} %{LAG_ID_GREEDY}"
        - "^(Lag creation|Destroy lag) failed( on)? %{UNIT} %{LAG_ID} %{RC} %{ERROR}"
        - "^Trunk member add port succeeds on %{UNIT} %{PORT} %{TID}"
        - "^(Trunk port attach error on|Failed to set egress enable on|Failed to delete) %{PORT}( from)? %{TID} %{RC} %{ERROR}"
        - "^Trunk psc set failed on %{UNIT} %{LAG_ID} psc %{DATA:aruba.lag.psc} %{RC} %{ERROR}"
        - "^%{LAG_INTERFACE}, set to load balance mode to %{GREEDYDATA:aruba.lag.mode}"
        - "^(Remove|Add) %{PORT} (from|to) %{LAG_INTERFACE_GREEDY}"
        - "^(Remove|Add) %{PORT} to vlan %{DATA:network.vlan.id} for L3 %{LAG_INTERFACE_GREEDY}"
        - "^Destroy L3 %{LAG_INTERFACE_GREEDY}"
      pattern_definitions:
        ERROR: "(error )?%{GREEDYDATA:event.reason}"
        LAG_ID: "lag_id %{DATA:aruba.instance.id}"
        LAG_ID_GREEDY: "lag_id %{GREEDYDATA:aruba.instance.id}"
        LAG_INTERFACE: "LAG( interface)? %{DATA:aruba.interface.id}"
        LAG_INTERFACE_GREEDY: "LAG( interface)? %{GREEDYDATA:aruba.interface.id}"
        PORT: "(hw_)?port %{DATA:aruba.port}"
        RC: "rc %{DATA:error.code}"
        TID: "tid %{NUMBER:process.thread.id:long}"
        UNIT: "unit %{DATA:aruba.unit}"

    # CoPP Events (15xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/COPP.htm
  - dissect:
      field: message
      tag: copp_event_1506
      description: "Logs failure of programming queue for a CoPP packet class"
      if: "ctx.event?.code == '1506'"
      pattern: "Packet class programming failed for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1507
      description: "Logs failure of programming ingress field processor for a COPP class"
      if: "ctx.event?.code == '1507'"
      pattern: "Failed to program ingress field processor rule for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1508
      description: "Logs failure of programming egress field processor for a COPP class"
      if: "ctx.event?.code == '1508'"
      pattern: "Failed to program egress rule for %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1509
      description: "Logs CoPP initial initialization failure on a slot"
      if: "ctx.event?.code == '1509'"
      pattern: "CoPP initial initialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1510
      description: "Logs CoPP final initialization failure on a slot"
      if: "ctx.event?.code == '1510'"
      pattern: "CoPP final initialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1511
      description: "Logs CoPP deinitialization failure on a slot"
      if: "ctx.event?.code == '1511'"
      pattern: "CoPP deinitialization failed on slot %{aruba.slot}"
  - dissect:
      field: message
      tag: copp_event_1512
      description: "Logs failure while configuring hardware on a slot for a CoPP class"
      if: "ctx.event?.code == '1512'"
      pattern: "Failed to configure hardware for CoPP on slot %{aruba.slot} class %{aruba.copp.class}"
  - dissect:
      field: message
      tag: copp_event_1513
      description: "Logs failure while retrieving statistics on a slot for a CoPP class"
      if: "ctx.event?.code == '1513'"
      pattern: "Failed to retrieve CoPP statistics from slot %{aruba.slot} class %{aruba.copp.class}"

    # VLAN Interface events (160X)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VLANINTERFACE.htm
  - grok:
      field: message
      tag: vlan_interface_event_1601_1602
      description: "logs errors while creating vlaninterface | logs to create vlan interface "
      if: "['1601','1602'].contains(ctx.event?.code)"
      patterns:
        - "^Vlaninterface vlan%{DATA:network.vlan.id}, failed to create an l3 interface, error: %{GREEDYDATA:event.reason}"
        - "^Vlan Interface %{DATA:aruba.interface.id}, created"

    # Layer 3 Interface events (17xx && 1580x)
    # https://arubanetworking.hpe.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/L3INTERFACE.htm
  - grok:
      field: message
      tag: l3_event_1701_1702
      description: "logs to create|deleted L3 interface"
      if: "['1701','1702'].contains(ctx.event?.code)"
      patterns:
        - "^L3-Interface %{DATA:aruba.interface.id}, (created|deleted)"
  - dissect:
      field: message
      tag: l3_event_1703
      description: "logs for admin state of L3 interface"
      if: "['1703'].contains(ctx.event?.code)"
      pattern: "Interface %{aruba.interface.id}, configured administratively %{aruba.state}"
  - dissect:
      field: message
      tag: l3_event_1704
      description: "logs errors while creating vlan for layer 3 interfaces."
      if: "['1704'].contains(ctx.event?.code)"
      pattern: "Failed to create %{network.vlan.id} for layer 3 interface %{aruba.interface.id}"
  - grok:
      field: message
      tag: l3_event_1705_1706
      description: "logs errors while destroying vlan for layer 3 interfaces | logs errors while destroying layer 3 interface."
      if: "['1705','1706'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to (destroy layer |delete an l)3 interface %{DATA:aruba.interface.id}( vlan %{DATA:network.vlan.id})?, error: %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: l3_event_1707_1708_1709_1710_1711_1712_1715_1716_1717_1718_1719_1720_1722
      description: "adding l3 hosts | deleting l3 hosts | [adding|deleted|failed] to get l3 hosts | "
      if: "['1707','1708','1709','1710','1711','1712','1715','1716','1717','1718','1719','1720','1722'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to (delete|add) %{HOST_IP}, %{ERROR}"
        - "^(Added|Deleted|Failed to get) %{HOST_IP}"
        - "^L3 interface %{ERROR}"
        # Note: sequence matters here, putting greedy data at the end
        - "^(Delete|Added|Add) route (%{DATA:aruba.prefix}, %{ERROR}|%{GREEDYDATA:aruba.prefix})"
        - "^Update: route state: %{GREEDYDATA:aruba.state}"
        - "^Error (deleting|creating) egress object for port %{DATA:aruba.port}, %{ERROR}"
      pattern_definitions:
        HOST_IP: "L3 host (entry|hit) for ip %{IP:host.ip}"
        ERROR: "error: %{GREEDYDATA:event.reason}"
  - grok:
      field: message
      tag: l3_event_1713_1714_1721_1723_1724_1725_1726_1727_1728_1729_1730_1731
      description: "nexthop [addition|deletion] | egress object [creation|deletion] | [ipv4|ipv6] address [update|delete] on interface | configuring hardware for IPMTU"
      if: "['1713','1714','1721','1723','1724','1725','1726','1727','1728','1729','1730','1731'].contains(ctx.event?.code)"
      patterns:
        - "^(Delete|Added) Nexthop %{IP:aruba.l3.nexthop}(, egress_id %{DATA:observer.egress.interface.id},)? for route %{GREEDYDATA:aruba.prefix}"
        - "^(Deleted|Created) L3 egress ID %{DATA:observer.egress.interface.id} for port (%{DATA:aruba.port} intf %{GREEDYDATA:aruba.interface.id}|%{GREEDYDATA:aruba.port})"
        - "^%{INTERFACE},( configured with)? %{SERVER_IP}"
        - "^IPv6 Address Status: %{INTERFACE}, address %{IPORHOST:server.address}, status %{GREEDYDATA:aruba.status}"
        - "^%{INTERFACE}, configured with secondary %{SERVER_IP}"
        - "^%{INTERFACE}, secondary %{SERVER_IP}"
        - "^IP MTU %{DATA:aruba.mtu} not applied due to hardware resource limitation"
      pattern_definitions:
        SERVER_IP: "(ipv6|ipv4) address( deleted)? %{IP:server.ip}"
        INTERFACE: "(I|i)nterface %{DATA:aruba.interface.id}"
  - grok:
      field: message
      tag: l3_event_1732
      description: "Logs failure while configuring more than one global ipv6 address on an interface."
      if: "ctx.event?.code == '1732'"
      patterns: 
        - "^IPv6 address %{IP:server.ip} is not applied on interface %{DATA:aruba.interface.id}, as only one global ipv6 address will be in effect"
  - dissect:
      field: message
      tag: l3_event_15804
      description: "logs for ipv4 unnumbered address update on interface."
      if: "ctx.event?.code == '15804'"
      pattern: "Interface %{aruba.interface.name}, configured with ipv4 unnumbered address %{host.ip}, lender interface %{aruba.port}"
  - dissect:
      field: message
      tag: l3_event_15805
      description: "logs for ipv4 unnumbered address delete from interface."
      if: "ctx.event?.code == '15805'"
      pattern: "ipv4 unnumbered address %{host.ip} deleted from interface %{aruba.interface.name}, lender interface %{aruba.port}"

  # ECMP Events (18xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ECMP.htm
  - grok:
      field: message
      tag: ecmp_event_1801
      description: "logs errors while creating ecmp group."
      if: "ctx.event?.code == '1801'"
      patterns:
        - "Failed to update ecmp object for route %{DATA:aruba.ecmp.route}, error: %{DATA:aruba.ecmp.err}$"
  - grok:
      field: message
      tag: ecmp_event_1802
      description: "logs while creating ecmp group."
      if: "ctx.event?.code == '1802'"
      patterns:
        - "Update ecmp object for route %{DATA:aruba.ecmp.route}$"
  - grok:
      field: message
      tag: ecmp_event_1803
      description: "logs errors while deleting ecmp group."
      if: "ctx.event?.code == '1803'"
      patterns:
        - "Failed to delete ecmp egress object %{DATA:aruba.ecmp.egressid}, error: %{DATA:aruba.ecmp.err}$"
  - dissect:
      field: message
      tag: ecmp_event_1804
      description: "logs while deleting ecmp group."
      if: "ctx.event?.code == '1804'"
      pattern: "Delete ecmp egress object %{aruba.ecmp.egressid}"
  - grok:
      field: message
      tag: ecmp_event_1805
      description: "logs for ECMP setup errors."
      if: "ctx.event?.code == '1805'"
      patterns:
        - "ECMP error: %{DATA:aruba.ecmp.err}$"

  # DHCP Server events (19xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DHCP-SERVER.htm
  - grok:
      field: message
      tag: dhcp_server_event_1901_1902_1903_1904_1905_1906
      description: "Logs DHCP lease addition, deletion, or update"
      if: "['1901','1902','1903','1904','1905','1906'].contains(ctx.event?.code)"
      patterns:
        - "^DHCP Lease (added|addition|deleted|deletion|update|updated)( failed)? %{DHCP_EXPIRE_TIME_FMT:event.end} %{MAC:host.mac} %{IP:host.ip} %{HOSTNAME:host.name} %{DATA:user.id}$"
      pattern_definitions:
        DHCP_EXPIRE_TIME_FMT: "(?:(?:[0-9]{2}:){2}([0-9]){2})"
  - grok:
      field: message
      tag: dhcp_server_event_1907_1908
      description: "Logs enable or disable of DHCP server on a VRF"
      if: "['1907','1908'].contains(ctx.event?.code)"
      patterns:
        - "^DHCP server (en|dis)abled on VRF %{DATA:aruba.vrf.name}$"
  - dissect:
      field: message
      tag: dhcp_server_event_1909
      description: "Event raised when user configures an invalid DHCP configuration"
      if: "ctx.event.code == '1909'"
      pattern: "Invalid DHCP configuration: %{aruba.dhcp.config} provided on DHCP Server instance running on VRF %{aruba.vrf.name}. Ignoring this config."
  - grok:
      field: message
      tag: dhcp_server_event_1910_1911
      description: "Event raised when DHCP or DHCPv6 Server Lease on the VRF is cleared"
      if: "['1910','1911'].contains(ctx.event?.code)"
      patterns:
        - "^(DHCP|DHCPv6) Server Lease cleared on vrf %{DATA:aruba.vrf.name}\\.$"

    # Multiple spanning tree protocol events (20xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MSTP.htm
  - grok:
      field: message
      tag: mstp_event_2003_2004
      description: "the MSTP config parameter is bad | switch received a BPDU with a bad config"
      if: "['2003','2004'].contains(ctx.event?.code)"
      patterns:
        - "^(BPDU has )?%{DATA:aruba.mstp.config_parameter} (should be|from port) %{GREEDYDATA:aruba.mstp.config_value}"
  - dissect:
      field: message
      tag: mstp_event_2005
      description: "the MSTP reconfig parameter is bad"
      if: "['2005'].contains(ctx.event?.code)"
      pattern: "Bad reconfiguration request: %{aruba.mstp.reconfig_parameter}"
  - grok:
      field: message
      tag: mstp_event_2006_2008_2018
      description: "MSTP root has changed | Rx queue is starved in the paticular port | root port has changed"
      if: "['2006','2008','2018'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.mstp.proto} - Root changed from %{DATA:aruba.mstp.old_priority}: %{MAC:aruba.mstp.old_mac} to %{DATA:aruba.priority}: %{MAC:source.mac}"
        # variation between customer logs and documentation
        - "^%{DATA:aruba.mstp.proto} starved for (a)? %{DATA:aruba.mstp.pkt_type} on port %{DATA:aruba.port} from %{GREEDYDATA:aruba.mstp.priority_mac}"
        - "^%{DATA:aruba.mstp.proto} Root Port changed from %{DATA:aruba.mstp.old_port} to %{GREEDYDATA:aruba.port}"
  - grok:
      field: message
      tag: mstp_event_2007_2009_2010_2011_2012_2013_2014_2015_2016_2017
      description: "BPDU was received on protected port | [port|MSTP] is in inconsistent state | topology change is [received|generated] on port | BPDU received on admin edge port | port is blocked"
      if: "['2007','2009','2010','2011','2012','2013','2014','2015','2016','2017'].contains(ctx.event?.code)"
      patterns:
        - "^Port %{DATA:aruba.port} disabled - BPDU received on protected port"
        - "^(BPDU loss- p|P)ort %{DATA:aruba.port} moved (to|out of) inconsistent state for %{GREEDYDATA:aruba.mstp.proto}"
        - "^Topology Change received on port %{DATA:aruba.port} for %{DATA:aruba.mstp.proto} from source: %{MAC:source.mac}"
        - "^%{DATA:aruba.mstp.proto} - Topology Change generated on port %{DATA:aruba.port} going in to %{GREEDYDATA:aruba.state}"
        - "^BPDU received on admin edge port %{GREEDYDATA:aruba.port}"
        - "^Port %{DATA:aruba.port} (un)?blocked on CIST"
        - "^Port %{DATA:aruba.port} (un)?blocked on MST%{GREEDYDATA:aruba.instance.id}"
  - dissect:
      field: message
      tag: mstp_event_2019
      description: "the spanning tree mode is changed"
      if: "['2019'].contains(ctx.event?.code)"
      pattern: "spanning tree mode changed from %{aruba.mstp.old_mode} to %{aruba.mstp.new_mode}, it will trigger the reconvergence"

  # VLAN events (21xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VLAN.htm
  - grok:
      if: "['2101','2102','2103','2104'].contains(ctx.event?.code)"
      tag: vlan_event_2101_2102_2103_2104
      field: "message"
      description: "This log event informs the user that VLAN is (not)? created in Hardware | VLAN is (not)? removed from Hardware"
      patterns:
        - "VLAN %{DATA:network.vlan.id} "
  - grok:
      if: "['2105','2106'].contains(ctx.event?.code)"
      tag: vlan_event_2105_2106
      field: "message"
      description: "This log event informs that internal VLAN is allocated to port | This log event informs that internal VLAN is not allocated"
      patterns:
        - "^Internal VLAN %{DATA:network.vlan.id} is allocated to port %{GREEDYDATA:aruba.port}"
        - "^Failed to allocate internal VLAN to port %{GREEDYDATA:aruba.port}"
  - dissect:
      if: "ctx.event?.code == '2107'"
      tag: vlan_event_2107
      field: "message"
      description: "This log event informs that the port mode has changed from one of the trunk types to access or vice versa"
      pattern: "The mode for port %{aruba.port} changed from %{aruba.vlan.from} to %{aruba.vlan.to} on VLAN %{network.vlan.id}"
  - grok:
      if: "['2108','2112'].contains(ctx.event?.code)"
      tag: vlan_event_2108_2112
      field: "message"
      description: "This log event informs the user that Mac based VLAN is created in Hardware | This log event informs the user that MAC based VLAN is updated in Hardware"
      patterns: 
        - "^(Created|Updated) (Mac|MAC) based VLAN entry. VLAN %{DATA:network.vlan.id} is mapped to client %{MAC:server.mac} on port %{GREEDYDATA:aruba.port}"
  - grok:
      if: "['2109','2110','2111','2113'].contains(ctx.event?.code)"
      tag: vlan_event_2109_2110_2111_2113
      field: "message"
      description: "This log event informs the user that Mac based VLAN is not created in Hardware | is removed from Hardware | is not removed from Hardware | is not updated in Hardware"
      patterns:
        - "based VLAN entry for %{MAC:server.mac} with VLAN %{DATA:network.vlan.id} on port %{GREEDYDATA:aruba.port}"
  - dissect:
      if: "ctx.event?.code == '2114'"
      tag: vlan_event_2114
      field: "message"
      description: "This log event informs that internal VLAN range is changed"
      pattern: "Internal VLAN changed to %{network.vlan.id}"
  - grok:
      if: "['2115','2116'].contains(ctx.event?.code)"
      tag: vlan_event_2115_2116
      field: "message"
      description: "This log event informs the user that VLAN is down due to pvlan misconfig | This log event informs the user that VLAN is recovered from pvlan misconfig"
      patterns:
        - "^VLAN %{DATA:network.vlan.id} is down due to pvlan misconfig reason %{GREEDYDATA:event.reason}"
        - "^VLAN %{DATA:network.vlan.id} is recovered from pvlan misconfig"
  - grok:
      if: "['2117','2118'].contains(ctx.event?.code)"
      tag: vlan_event_2117_2118
      field: "message"
      description: "This log event informs the user that remote node [add|remove] for a vlan failed | "
      patterns:
        - "^Remote node %{DATA:aruba.vlan.remote_node} (add|remove) for VLAN %{DATA:network.vlan.id} on node %{DATA:aruba.vlan.local_node} failed"
  - dissect:
      if: "ctx.event?.code == '2119'"
      tag: vlan_event_2119
      field: "message"
      description: "Logs a message when vlan translation rule addition failed in hardware"
      pattern: "VLAN translation rule addition failed for port:%{aruba.port}, in_vlan:%{aruba.vlan.orig_vlan}, out_vlan:%{aruba.vlan.trans_vlan}, reason=%{event.reason}"
  - grok:
      if: "['2120','2121','2122'].contains(ctx.event?.code)"
      tag: vlan_event_2120_2121_2122
      field: "message"
      description: "Interface is now an SVLAN customer-network interface | Logs a message when port is part for QinQ provider-network | Logs a message when port is no longer part for QinQ' event_description_template"
      patterns:
        - "^%{DATA:aruba.interface.name} is"
  - dissect:
      if: "ctx.event?.code == '2123'"
      tag: vlan_event_2123
      field: "message"
      description: "This log event informs the user that secondary VLAN is associated to a primary VLAN"
      pattern: "Secondary VLAN %{aruba.vlan.sec_vid} of type %{aruba.vlan.sec_type} is associated to primary VLAN %{aruba.vlan.prim_vid}"
  - dissect:
      if: "ctx.event?.code == '2124'"
      tag: vlan_event_2124
      field: "message"
      description: "This log event informs the user that secondary VLAN admin state is ignored"
      pattern: 'Secondary VLAN %{aruba.vlan.sec_vid} admin state %{aruba.vlan.sec_admin} is ignored. Primary VLAN %{aruba.vlan.prim_vid} admin state (%{aruba.vlan.prim_admin}) will be applied'
  - grok:
      if: "['2125','2126'].contains(ctx.event?.code)"
      tag: vlan_event_2125_2126
      field: "message"
      description: "This log event informs the user that UUFB has been [enabled|disabled] on a physical port"
      patterns:
        - "^UUFB %{DATA:aruba.port} (enabled|disabled) in hardware"

  # Redundant Management events (220x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/REDUNDANT_MANAGEMENT.htm
  - dissect:
      if: "ctx.event.code == '2201'"
      tag: redundant_mgmt_event_2201
      field: "message"
      description: "This log event informs that failover event is detected"
      pattern: "Failover detected: Reason %{event.reason}"
  - grok:
      if: "['2204','2205'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2204_2205
      field: "message"
      description: "This log event informs about the status of [Active|Standby] mgmt module"
      patterns:
        - "^%{DATA:aruba.redundant.mgmt_module} is (Active|Standby)"
  - grok:
      if: "['2202','2206'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2204_2205
      field: "message"
      description: "This log event informs that standby mgmt module has been removed | added to the system"
      patterns:
        - "^(Lost|Detected) %{DATA:aruba.redundant.mgmt_module} as Standby Management Module, redundancy (disabled|enabled)"
  - grok:
      if: "['2208','2209'].contains(ctx.event?.code)"
      tag: redundant_mgmt_event_2208_2209
      field: "message"
      description: "This log event informs the user that filesync is in progress | an ISSU operation has begun"
      patterns:
        - "^%{DATA:aruba.redundant.mgmt_module} is (waiting for filesync|starting ISSU operation)"

  # AAA events (23xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/AAA.htm
  - grok:
      if: "ctx.event.code == '2301'"
      tag: aaa_event_2301
      field: "message"
      description: "Logs AAA Authentication/Authorization/Accounting/fail-through"
      patterns:
        - "^AAA %{DATA:aruba.aaa.config_type} update\\s?:\\s?%{GREEDYDATA:aruba.aaa.config_event}"
  - grok:
      if: "ctx.event.code == '2302'"
      tag: aaa_event_2302
      field: "message"
      description: "Logs TACACS+ server update, server group update and global default update"
      patterns:
        - "^TACACS %{GREEDYDATA:aruba.aaa.tacacs_type} %{DATA:aruba.aaa.tacacs_action}:\\s?%{GREEDYDATA:aruba.aaa.tacacs_event}"
  - grok:
      if: "ctx.event.code == '2303'"
      tag: aaa_event_2303
      field: "message"
      description: "Logs RADIUS server update, server group update and global default update"
      patterns:
        - "^RADIUS %{GREEDYDATA:aruba.aaa.radius_type} %{DATA:aruba.aaa.radius_action}:\\s?%{GREEDYDATA:aruba.aaa.radius_event}"
  - dissect:
      if: "ctx.event.code == '2304'"
      tag: aaa_event_2304
      field: "message"
      description: "Logs changes in RADIUS server reachability status"
      pattern: 'RADIUS Server with Address: %{server.address}, Authport:%{aruba.port}, VRF_ID:%{aruba.vrf.id} is "%{aruba.status}"'
  - dissect:
      if: "ctx.event.code == '2305'"
      tag: aaa_event_2305
      field: "message"
      description: "Logs changes in TACACS server reachability status"
      pattern: "TACACS server host %{server.address} port %{aruba.port} vrf %{aruba.vrf.id} %{aruba.status}"
  - dissect:
      if: "ctx.event.code == '2306'"
      tag: aaa_event_2306
      field: "message"
      description: "Logs changes in RADIUS server route reachability status"
      pattern: 'RADIUS Server route with Address:%{server.address}, VRF_ID:%{aruba.vrf.id} is "%{aruba.status}"'
  - grok:
      if: "ctx.event.code == '2307'"
      tag: aaa_event_2307
      field: "message"
      description: "Decrypted TACACS server key length exceeded the maximum length allowed"
      patterns: 
        - "^Decrypted TACACS passkey length %{NUMBER:aruba.len:long} exceeded the maximum allowed plaintext key length %{GREEDYDATA:aruba.limit.threshold}"

    # OSPFv2 events (2401)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/OSPFv2.htm
  - grok:
      field: message
      tag: ospfv2_event_2401_2402_2404
      description: "Logs the changes in OSPFv2 neighbour state machine | changes in the interface FSM state."
      if: "['2401','2402','2404'].contains(ctx.event?.code)"
      patterns:
        - "%{ADJCHG}%{AREA}: %{STATE_CHANGE}"
        - "%{ADJCHG}: %{STATE_CHANGE} \\(%{DATA:aruba.ospf.event}\\)"
        - "^Interface %{DATA:aruba.interface.id}%{AREA} changed from %{STATE_CHANGE}, input: %{GREEDYDATA:aruba.ospf.input}"
      pattern_definitions:
        ADJCHG: "^AdjChg: Nbr %{DATA:aruba.ospf.router_id} on %{DATA:aruba.interface.id}"
        AREA: "\\(%{DATA:aruba.ospf.area}\\)"
        STATE_CHANGE: "%{DATA:aruba.ospf.old_state} (->|to) %{GREEDYDATA:aruba.state}"
  - dissect:
      field: message
      tag: ospfv2_event_2403
      description: "Logs OSPFv2 route add and delete."
      if: "ctx.event?.code == '2403'"
      pattern: "%{aruba.ospf.event} with %{destination.address} %{aruba.ospf.nexthops}"
  - dissect:
      field: message
      tag: ospfv2_event_2405
      description: "Logs the changes in the router-id."
      if: "['2405'].contains(ctx.event?.code)"
      pattern: "Router-id updated from %{aruba.ospf.old_router_id} to %{aruba.ospf.router_id}"
  - dissect:
      field: message
      tag: ospfv2_event_2406
      description: "Logs failed action with rule error"
      if: "['2406'].contains(ctx.event?.code)"
      pattern: "Failed to %{event.action} %{rule.name} error: %{event.reason}"
  - grok:
      field: message
      tag: ospfv2_event_2407_2408
      description: "Logs for OSPFv2 [FP|DR FP] creation/installation."
      if: "['2407','2408'].contains(ctx.event?.code)"
      patterns:
        - "^OSPF (all|designated) routers field entry added: group_id=%{DATA:group.id} fp_id=%{DATA:aruba.ospf.fp_id} stat_id=%{GREEDYDATA:aruba.ospf.stats_id}"

    # MGMD events (26xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MGMD.htm
  - grok:
      field: message
      tag: mgmd_event_2601_through_2622
      description: "The following are the events related to MGMD"
      if: "['2601','2602','2603','2604','2605','2606','2607','2608','2609','2610','2611','2612','2613','2614','2619','2620','2621','2622'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to alloc a %{DATA:aruba.mgmd.pkt_type} pkt\\(%{VLAN}\\)"
        - "^Received (IGMPv1|IGMPv2|MLDV1|MLDV2) query from %{IP:client.ip} when the device is configured for"
        - "^Unable to alloc a buf of size %{NUMBER:aruba.len:long} for %{GREEDYDATA:aruba.subsystem}"
        - "^%{INTERFACE}: Other Querier detected for %{GREEDYDATA:aruba.mgmd.mgmd_type}"
        - "^%{INTERFACE}: End %{DATA:aruba.mgmd.mgmd_type} Querier role"
        - "^%{DATA:aruba.mgmd.mgmd_type} Querier Election in progress for %{INTERFACE} with IP address %{IP:client.ip}"
        - "^%{INTERFACE}: Start %{DATA:aruba.mgmd.mgmd_type} Querier role addr: %{IP:client.ip}"
        - "^Received packet from %{IP:client.ip}, type %{DATA:aruba.mgmd.mgmd_type}, on invalid port %{GREEDYDATA:aruba.port}"
        - "^%{DATA:aruba.mgmd.mgmd_type} snooping is %{DATA:aruba.status} on %{VLAN}."
        - "^%{DATA:aruba.mgmd.mgmd_type} is %{DATA:aruba.status} on %{INTERFACE_GREEDY}"
        - "^Port %{DATA:aruba.port} on %{VLAN} is set to %{DATA:aruba.status} mode for %{DATA:aruba.mgmd.mgmd_type}."
        - "^%{DATA:aruba.mgmd.mgmd_type} is not operational on VLAN %{DATA:network.vlan.id} due to resource unavailability"
        - "^Received IGMPv3 query from %{IP:client.ip} when the device is configured for IGMPv2"
        - "^Flood mode is temporarily activated on ERPS ports %{DATA:aruba.port} and %{DATA:aruba.mgmd.port1} as ring state for ring id %{DATA:aruba.mgmd.ring_id} changed to %{GREEDYDATA:aruba.state}."
      pattern_definitions:
        VLAN: "(vlan|VLAN|interface) %{DATA:network.vlan.id}"
        VLAN_GREEDY: "(vlan|VLAN|interface) %{GREEDYDATA:network.vlan.id}"
        INTERFACE: "(I|i)nterface %{DATA:aruba.interface.id}"
        INTERFACE_GREEDY: "(I|i)nterface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      field: message
      tag: mgmd_event_2615_2618
      description: "IGMP/MLD is disabled on a L3 interface due to internal errors | IGMP/MLD snooping is operational"
      if: "['2615','2618'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.mgmd.mgmd_type} is not operational on interface %{DATA:aruba.mgmd.l3_port} due to resource unavailability"
        - "^%{DATA:aruba.mgmd.mgmd_type} snooping is %{DATA:aruba.status} on VLAN %{GREEDYDATA:network.vlan.id}."

    # Replication Manager events (270x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/REPLD.htm
  - dissect:
      field: message
      tag: replication_mgr_event_2705
      description: "Log indicates Mutlicast L3 Bridge Control Forwarding entry with uuid has no reference to a VLAN"
      if: "ctx.event?.code == '2705'"
      pattern: "Multicast L3 Bridge Control Forwarding entry with uuid %{aruba.instance.id} has no reference to a VLAN"

    # Loop Protect events (280x)
    # https://arubanetworking.hpe.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LOOP-PROTECT.htm
  - grok:
      field: message
      tag: loop_protect_event_2801_through_2809
      description: "Logs Loop protect events"
      if: "['2801','2802','2803','2804','2805','2806','2807','2808','2809'].contains(ctx.event?.code)"
      patterns:
        - "^Ports TX %{DATA:aruba.loop.tx_port} and RX %{DATA:aruba.loop.rx_port} are disabled by Loop-protect after loop detection on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^(Loop detected on port|Port) %{DATA:aruba.port}( is disabled by Loop-protection after loop detection)? on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^Port %{DATA:aruba.port} enabled after disable time expired"
        - "^Port %{DATA:aruba.port} (added for|deleted from) loop-protection"
        - "^Loop-Protection stats cleared for port %{GREEDYDATA:aruba.port}"
        - "^Ports TX %{DATA:aruba.loop.tx_port} and RX %{DATA:aruba.loop.rx_port} are involved during TX port disabling"
  - dissect:
      field: message
      tag: loop_protect_event_2810
      description: "Logs TX and RX ports after RX disabled by Loop protect"
      if: "ctx.event?.code == '2810'"
      pattern: "Ports TX %{aruba.loop.tx_port} and RX %{aruba.loop.rx_port} are involved during RX port disabling"
  - grok:
      field: message
      tag: loop_protect_event_2811
      description: "Logs max vport limit reached and Current vport count."
      if: "ctx.event?.code == '2811'"
      patterns: 
        - "^Max vport limit %{DATA:aruba.limit.threshold} reached. Current vport %{NUMBER:aruba.limit.read_value:long}"

  # BGP events (29xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/BGP.htm
  - dissect:
      if: "ctx.event.code == '2901'"
      tag: bgp_event_2901
      field: "message"
      description: "Logs the changes in BGP connection state."
      pattern: "%{destination.address}: Peer up. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2902'"
      tag: bgp_event_2902
      field: "message"
      description: "Logs the failure in BGP connection state changes."
      pattern: "%{destination.address}: Peer down. error-code: %{error.code}, error-sub-code: %{aruba.bgp.error_subcode}. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "['2903', '2904'].contains(ctx.event?.code)"
      tag: bgp_event_2903_2904
      field: "message"
      description: "Trap when the number of received prefix reached the [threshold|maximum prefix] value."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer has received prefix equal to (Maximum Prefix|Threshold) value configured. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "['2905', '2906'].contains(ctx.event?.code)"
      tag: bgp_event_2905_2906
      field: "message"
      description: "Logs BGP enable event | Logs BGP disable event"
      patterns:
        - "^BGP AS %{NUMBER:aruba.bgp.as_number:long} %{WORD}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2907'"
      tag: bgp_event_2907
      field: "message"
      description: "Logs BGP router-id change."
      pattern: "BGP router-id changed. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2908'"
      tag: bgp_event_2908
      field: "message"
      description: "Logs creation of BGP peer."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer configured, AS %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2909'"
      tag: bgp_event_2909
      field: "message"
      description: "Logs BGP peer session reset event."
      pattern: "%{destination.address}: User reset request. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2910'"
      tag: bgp_event_2910
      field: "message"
      description: "Logs BGP peer password change event."
      pattern: "%{destination.address}: Peer password changed. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2911'"
      tag: bgp_event_2911
      field: "message"
      description: "Logs deletion of BGP peer."
      pattern: "%{destination.address}: Peer deleted. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "['2912', '2913'].contains(ctx.event?.code)"
      tag: bgp_event_2912_2913
      field: "message"
      description: "Logs BGP peer admin enable/disable event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer admin (dis|en)abled. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2914'"
      tag: bgp_event_2914
      field: "message"
      description: "Logs BGP peer remote-as change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer remote-as changed to %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2915'"
      tag: bgp_event_2915
      field: "message"
      description: "BGP peer local-as change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer local-as changed to %{NUMBER:client.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2916'"
      tag: bgp_event_2916
      field: "message"
      description: "Logs peer source address change event."
      patterns:
        - "^%{IPORHOST:destination.address}: Peer source-address changed to %{IP:source.ip}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2917'"
      tag: bgp_event_2917
      field: "message"
      description: "Logs configuration of peer remove-private-as."
      pattern: "%{destination.address}: Peer remove-private-as configuration changed. vrf-name: %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event.code == '2918'"
      tag: bgp_event_2918
      field: "message"
      description: "Logs peer identifier has been matched with local identifier."
      pattern: "%{aruba.bgp.id}: BGP identifier sent by Peer %{destination.address} matches ours. BGP session may not established. vrf-name: %{aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2919'"
      tag: bgp_event_2919
      field: "message"
      description: "Trap when the rib size reaches the threshold value."
      patterns:
        - "^The BGP RIB has reached the threshold limit of %{DATA:aruba.limit.threshold} for VRF %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "ctx.event.code == '2920'"
      tag: bgp_event_2920
      field: "message"
      description: "BGP peer local-as change event."
      patterns:
        - "^%{DATA:aruba.bgp.pg_name}: Peer-group configured with remote-as %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
  - grok:
      if: "['2921','2922','2923'].contains(ctx.event.code)"
      tag: bgp_event_2921_2922_2923
      field: "message"
      description: "Logs configuration of peer ignore-leading-as | neighbor addition to peer group | neighbor deletion from peer group"
      patterns:
        - "^%{DATA:client.address}: Peer ignore-leading-as configuration changed. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
        - "^%{DATA:client.address}: Neighbor (added to|deleted from) Peer group %{DATA:aruba.bgp.peer_grp} vrf-name: %{GREEDYDATA:aruba.vrf.name}"

  # Hardware Health Monitor events (30xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/HW-HEALTH-MONITOR.htm
  - grok:
      if: "['3001','3002','3003','3004','3005'].contains(ctx.event?.code)"
      tag: hwhm_event_3001_3002_3003_3004_3005
      field: "message"
      description: "Event raised when hardware diagnostics detects error in management module | line card | fabric card | fan tray | rear display card"
      patterns:
        - "^Diagnostic %{DATA:aruba.hardware.test_name} failed with error code %{DATA:error.code} on (management module|line card|fabric card|fan tray|rear display card) %{GREEDYDATA:aruba.slot:long}"
  - dissect:
      if: "ctx.event.code == '3006'"
      tag: hwhm_event_3006
      field: "message"
      description: "Event raised when hardware diagnostics detects error in the system"
      pattern: 'Diagnostic %{aruba.hardware.test_name} failed with error code %{error.code} for the system'
  - dissect:
      if: "ctx.event.code == '3007'"
      tag: hwhm_event_3007
      field: "message"
      description: "Logs MCE BUS error"
      pattern: 'There are %{aruba.hardware.origin} happening on %{aruba.hardware.location}'
  - grok:
      if: "['3008','3009'].contains(ctx.event?.code)"
      tag: hwhm_event_3008_3009
      field: "message"
      description: "Logs MCE [IO | unknown] error "
      patterns:
        # Warning: 3009 and 3008 pattern definition sequence matters, as 3009 is more strict than 3008
        - "^There are (IO|unknown) errors on %{DATA:aruba.hardware.location} from (%{3009_UNKNKOWN_FIELDS}|%{3008_IO_FIELDS})"
      pattern_definitions:
        3008_IO_FIELDS: "%{DATA:aruba.hardware.seg}:%{DATA:aruba.hardware.bus}:%{DATA:aruba.hardware.device}:%{GREEDYDATA:aruba.hardware.function}"
        3009_UNKNKOWN_FIELDS: "%{DATA:aruba.status}:%{DATA:aruba.hardware.addr}:%{DATA:aruba.hardware.misc}:%{DATA:aruba.hardware.mcgstatus}:%{GREEDYDATA:aruba.hardware.cap}"
  - grok:
      if: "ctx.event.code == '3010'"
      tag: hwhm_event_3010
      field: "message"
      description: "Logs CPU cache error"
      patterns:
        - "^CPUs %{NUMBER:aruba.hardware.cpus:long} L%{DATA:aruba.hardware.level} %{DATA:aruba.hardware.type} cache error detected. CPUs %{NUMBER:aruba.hardware.offlined:long} offlined"
  - grok:
      if: "['3011','3012','3013'].contains(ctx.event?.code)"
      tag: hwhm_event_3011_3012_3013
      field: "message"
      description: "Log when [socket | module | page] correctable memory error count is exceeded threshold"
      patterns:
        - "^Socket %{DATA:aruba.hardware.socket} %{3011_3012_3013_COMMON}"
        - "^Module %{DATA:aruba.hardware.channel} %{3011_3012_3013_COMMON}"
        - "^Page %{DATA:aruba.hardware.page} %{3011_3012_3013_COMMON}"
      pattern_definitions:
        3011_3012_3013_COMMON: "correctable memory error count %{NUMBER:aruba.hardware.cecount:long} exceeded threshold %{NUMBER:aruba.limit.threshold}(?:%{3011_3012_3013_OPTIONAL})?"
        3011_3012_3013_OPTIONAL: " and %{NUMBER:aruba.hardware.offlined:long}"
  - grok:
      if: "['3014','3015','3016','3017','3018','3019','3020','3021','3022','3023','3024'].contains(ctx.event?.code)"
      tag: hwhm_event_3014_3015_3016_3017_3018_3019_3020_3021_3022_3023_3024
      field: "message"
      description: "detects error in management module and report as [info|warning] | in fabric card and report as [info|warning] | in line card and report as [info|warning] | in fan tray and report as [info|warning|error]  | in chassis and report as [info|warning]"
      patterns:
        - "^Diagnostic %{DATA:aruba.hardware.test_name} failed with error code %{DATA:error.code} on (management module|fabric card|line card|fan tray|chassis) %{NUMBER:aruba.slot:long}"
  - grok:
      if: "['13801','13802'].contains(ctx.event?.code)"
      tag: hwhm_event_13801_13802
      field: "message"
      description: "Event raised when hardware diagnostics detects error in Chassis | when hardware diagnostics error detected in the system"
      patterns:
        - "^HW Fault \\(Error %{DATA:error.code}\\) detected on the switch. %{DATA:aruba.hardware.impact_statement}. Contact support for assistance"

    # MVRP events (310x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MVRP.htm
  - grok:
      field: message
      tag: mvrp_event_3101_3102_3103_3104_3105
      description: ""
      if: "['3101','3102','3103','3104','3105'].contains(ctx.event?.code)"
      patterns:
        - "^MVRP (en|dis)abled on port %{GREEDYDATA:aruba.port}"
        - "^MVRP failed to create VLAN %{DATA:network.vlan.id}. Maximum VLANs %{DATA:aruba.limit.threshold} already created"
        - "^MVRP statistics have been cleared for (%{3104_PATTERN}|%{3105_PATTERN})"
      pattern_definitions:
        3104_PATTERN: "port %{GREEDYDATA:aruba.port}"
        3105_PATTERN: "%{DATA:aruba.port} ports"

    # Module events (32xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MODULE.htm
  - grok:
      field: message
      tag: module_event_3201_through_3240_common
      description: "The following are the events related to module."
      if: "['3201','3202','3203','3204','3206','3208','3209','3210','3211','3212','3213','3214','3216','3217','3218','3219','3220','3221','3222','3224','3225','3227','3228','3234','3235','3236','3237','3238','3240'].contains(ctx.event?.code)"
      patterns:
        - "%{DATA:aruba.module.type} module %{DATA:aruba.module.name}\\s"
  - grok:
      field: message
      tag: module_event_3205_3207_3215_3223_3226_3229_3230_3231_3232_3233_3239
      description: "The following are the events related to module that exhibit extra fields other than module type and name."
      if: "['3205','3207','3215','3223','3226','3229','3230','3231','3232','3233','3239'].contains(ctx.event?.code)"
      patterns:
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} (is down|has failed): %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} device initialization failed: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} ASIC (denitialization|deinitialization|initialization) failed: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} disabling front-end power: %{GREEDYDATA:event.reason}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} configured with product number %{GREEDYDATA:aruba.unit}"
        - "^%{DATA:aruba.module.type} module %{DATA:aruba.module.name} is requesting to power on with priority %{GREEDYDATA:aruba.priority}"
        - "^%{DATA:aruba.module.name} is starting zeroization"
        - "^%{DATA:aruba.module.name} zeroization (completed|failed)"

  # IRDP events (350x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IRDP.htm
  - grok:
      if: "['3501','3502','3503'].contains(ctx.event?.code)"
      tag: irdp_event_3501_3502_3503
      field: "message"
      description: "This command [enables|disable] the IRDP (ICMP Router Discovery Protocol) feature on interface | when irdp holdtime or maxInterval or minInterval is improper"
      patterns:
        - "^IRDP (en|dis)abled on interface %{GREEDYDATA:aruba.interface.id}"
        - "^Interface: %{DATA:aruba.interface.id} has been configured with the invalid irdp holdtime or minInterval or maxInterval"

  # VRRP events (370x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VRRP.htm
  - grok:
      if: "['3703','3704','3705'].contains(ctx.event?.code)"
      tag: vrrp_event_3703_3704_3705
      field: "message"
      description: "Logs virtual router has taken control of [owner|standby] IP | virtual router has lost control of standby IP"
      patterns:
        - "^%{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} on interface %{DATA:aruba.interface.id} "
  - grok:
      if: "['3706','3707'].contains(ctx.event?.code)"
      tag: vrrp_event_3706_3707
      field: "message"
      description: "Logs creation of virtual router on interface | Logs deletion of virtual router from interface"
      patterns:
        - "^%{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} (created on|deleted from) interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3708','3709'].contains(ctx.event?.code)"
      tag: vrrp_event_
      field: "message"
      description: "Logs [addition|deletion] of IP address to virtual router"
      patterns:
        - "^%{DATA:aruba.vrrp.type} address %{DATA:service.address} is (added to|deleted from) virtual router %{DATA:aruba.instance.id} on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3710','3711','3712','3713'].contains(ctx.event?.code)"
      tag: vrrp_event_3710_3711_3712_3713
      field: "message"
      description: "Logs version change for virtual router | advertisement timer has changed for virtual router | preempt delay timer has changed for virtual router | state has changed for virtual router on interface"
      patterns:
        - "%{START_PATTERN} version changed to %{DATA:service.version} %{TAIL_PATTERN}"
        - "%{START_PATTERN} advertisement interval has changed to %{NUMBER:aruba.vrrp.interval:long} milliseconds %{TAIL_PATTERN}"
        - "%{START_PATTERN} preempt delay time has changed to %{NUMBER:aruba.vrrp.delay:long} seconds %{TAIL_PATTERN}"
        - "%{START_PATTERN} state change from %{DATA:aruba.vrrp.old_state} to %{DATA:aruba.state} %{TAIL_PATTERN}"
      pattern_definitions:
        START_PATTERN: "^%{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id}"
        TAIL_PATTERN: "on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3714','3715','3717','3718'].contains(ctx.event?.code)"
      tag: vrrp_event_3714_3715_3717_3718
      field: "message"
      description: "preempt option has been enabled | virtual IP ping has been enabled | preempt option has been disabled for virtual router | virtual IP ping has been disabled for virtual router"
      patterns:
        - "for %{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3716','3719'].contains(ctx.event?.code)"
      tag: vrrp_event_3716_3719
      field: "message"
      description: "virtual router has been [disabled|enabled] on interface"
      patterns:
        - "(Enabled|Disabled) %{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3720','3721'].contains(ctx.event?.code)"
      tag: vrrp_event_3720_3721
      field: "message"
      description: "Logs priority has been changed for virtual router | virtual router mode has been changed"
      patterns:
        - "^%{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} (priority changed to %{DATA:aruba.priority}|mode changed to %{DATA:aruba.vrrp.mode}) on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3722','3723','3724','3725','3726','3727'].contains(ctx.event?.code)"
      tag: vrrp_event_3722_3723_3724_3725_3726_3727
      field: "message"
      description: "track object has been (de-associated|associated) with virtual router | track object has been [created|deleted] | track object state change | track object association with interface"
      patterns:
        - "^Track object %{DATA:aruba.vrrp.track} is (associated with|de-associated from) %{DATA:aruba.vrrp.inet_type} virtual router %{GREEDYDATA:aruba.instance.id}"
        - "^Track object %{DATA:aruba.vrrp.track} is (created|deleted)"
        - "^Track object %{DATA:aruba.vrrp.track} state changed %{DATA:aruba.vrrp.old_state} to %{GREEDYDATA:aruba.state}"
        - "^Track object %{DATA:aruba.vrrp.track} associated with interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3728','3729'].contains(ctx.event?.code)"
      tag: vrrp_event_3728_3729
      field: "message"
      description: "Logs authentication failures on virtual router"
      patterns:
        - "^%{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} (recieved|received) packet with authentication (type|key) mismatch on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3730','3731'].contains(ctx.event?.code)"
      tag: vrrp_event_3730_3731
      field: "message"
      description: "vrrpv3 checksum has been [enabled|disabled] for virtual router"
      patterns:
        - "^(Enabled|Disabled) vrrpv3 checksum for %{DATA:aruba.vrrp.inet_type} virtual router %{DATA:aruba.instance.id} on interface %{GREEDYDATA:aruba.interface.id}"

  # Transceiver events (38xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/XCVR.htm
  - dissect:
      if: "ctx.event?.code == '3803'"
      tag: xcvr_event_3803
      field: "message"
      description: "Event raised to list unsupported transceivers in unsupported transceiver mode"
      pattern: "allow-unsupported-transceiver feature enabled: Unsupported transceivers found in: %{aruba.xcvr.list}"
  - grok:
      if: "['3804','3805'].contains(ctx.event?.code)"
      tag: xcvr_event_3804_3805
      field: "message"
      description: "Event raised to indicate transceiver hotswap insertion | removal"
      patterns:
        - "^Transceiver hot-swap (insert|remove) for interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "ctx.event?.code == '3806'"
      tag: xcvr_event_3806
      field: "message"
      description: "Event raised to indicate transceiver link recovery attempts"
      patterns:
        - "^Interface %{DATA:aruba.interface.id} transceiver attempted link recovery %{NUMBER:aruba.count:long} times"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '3807'"
      tag: xcvr_event_3807
      field: "message"
      description: "Event raised to indicate detection path of unsupported transceivers"
      pattern: "%{aruba.xcvr.path}"
  - grok:
      if: "['3808','3809','3812','3813'].contains(ctx.event?.code)"
      tag: xcvr_event_3808_3809_3812_3813
      field: "message"
      description: "Event raised to indicate status of transceivers that are (not)? allowed to be operational and its reason | indicate status of adapters that are (not)? allowed to be operational and its reason"
      patterns:
        - "^(Transceiver|Adapter) %{DATA:aruba.xcvr.desc} inserted in %{DATA:aruba.interface.id} is %{OPTIONAL_SENTENCE:aruba.status}. %{GREEDYDATA:event.reason}"
      pattern_definitions:
        OPTIONAL_SENTENCE: "[\\p{L},\":;\\s\\-]*"
  - grok:
      if: "['3810','3811','3815'].contains(ctx.event?.code)"
      tag: xcvr_event_3810_3811_3815
      field: "message"
      description: "Event raised to indicate an unknown transceiver was inserted | indicate a transceiver was inserted in a port that is a member of a group configured to operate at a different speed | Logged when a previously disabled transceiver is enabled"
      patterns:
        - "^Transceiver in %{DATA:aruba.interface.id} "
        - "interface %{GREEDYDATA:aruba.interface.id}"
        - "^Interface %{DATA:aruba.interface.id} "
  - dissect:
      if: "ctx.event?.code == '3814'"
      tag: xcvr_event_3814
      field: "message"
      description: "Logged when the transceiver inserted in the interface is disabled"
      pattern: "Interface %{aruba.interface.id} transceiver disabled - %{event.reason}"

  # IPv6 Router Advertisement events (39xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/IPV6-RA.htm
  - grok:
      if: "['3901','3902','3903','3904','3905','3906','3907','3908','3909','3910','3911','3912','3913','3914','3915','3916','3917','3918','3919'].contains(ctx.event?.code)"
      tag: ipv6_router_event_3901_3902_3903_3904_3905_3906_3907_3908_3909_3910_3911_3912_3913_3914_3915_3916_3917_3918_3919
      field: "message"
      description: "Event raised when ipv6 router changes occurs"
      patterns:
        - "^ipv6 ra (dis|en)abled on interface: %{GREEDYDATA:aruba.interface.id}"
        - "^(Dis|En)abled sending (MTU|RDNSS|DNSSL) in Router-Advertisement messages on %{GREEDYDATA:aruba.interface.id}"
        - "^Interface: %{DATA:aruba.interface.id} is (added to|deleted from) router discovery"
        - "^(Added|Deleted) ipv6 prefix: %{IP:server.ip}/%{NUMBER:aruba.len:long} (on|from) interface: %{GREEDYDATA:aruba.interface.id}"
        - "^(Added|Deleted) RA Prefix: %{DATA:aruba.prefix} on interface: %{DATA:aruba.interface.id} (to|from) prefix list"
        - "^default prefix is configured on interface %{GREEDYDATA:aruba.interface.id}"
        - "^(RDNSS|DNSSL) is (added|deleted) on interface: %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['3920','3921','3922'].contains(ctx.event?.code)"
      tag: ipv6_router_event_3920_3921_3922
      field: "message"
      description: "Event raised when RA Route is added on interface | is deleted from interface | when ipv6 nd ra maxInterval or minInterval is improper"
      patterns:
        - "^(Added|Deleted) RA Route: %{DATA:aruba.ip_ra.route} on interface: %{DATA:aruba.interface.id} (to|from) route list"
        - "^Interface: %{DATA:aruba.interface.id} has been configured with the invalid"

    # Multicast Traffic Manager events (400x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MTM.htm
  - dissect:
      field: message
      tag: multicast_traffic_mgr_event_4001
      description: "Event raised when the maximum number of multicast L3 Bridge Control Forwarding entries is reached"
      if: "ctx.event?.code == '4001'"
      pattern: "The Multicast L3 Bridge Control Forwarding entries limit was reached: %{aruba.limit.threshold}"

    # UDLD events (410x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/UDLD.htm
  - grok:
      field: message
      tag: udld_event_4101_4102
      description: "Event raised when UDLD is [enabled|disabled]"
      if: "['4101','4102'].contains(ctx.event?.code)"
      patterns: 
        - "^UDLD is (enabled|disabled) on interface: %{GREEDYDATA:aruba.interface.id}"
  - grok:
      field: message
      tag: udld_event_4103_4104_4105
      description: "Event raised when UDLD sets the interface as unblocked|unblocked|undetermined"
      if: "['4103','4104','4105'].contains(ctx.event?.code)"
      patterns: 
        - "^UDLD interface %{DATA:aruba.interface.id} is (unblocked|blocked|undetermined)"
  - grok:
      field: message
      tag: udld_event_4107_4108
      description: "Event raised when UDLD link is [enabled|disabled]"
      if: "['4107','4108'].contains(ctx.event?.code)"
      patterns: 
        - "^UDLD link is (enabled|disabled) on interface: %{GREEDYDATA:aruba.interface.id}"
  - dissect:
      field: message
      tag: udld_event_4106
      description: "Logs a warning when UDLD clamps the interval when operating in RFC5171 mode"
      if: "ctx.event?.code == '4106'"
      pattern: "UDLD interface %{aruba.interface.id} interval %{aruba.udld.intvl_a} clamped to %{aruba.udld.intvl_b}"
  - dissect:
      field: message
      tag: udld_event_4109
      description: "Event raised when UDLD substate of the interface as err_disabled"
      if: "ctx.event?.code == '4109'"
      pattern: "UDLD interface %{aruba.interface.id} is error-disabled"

    # Proxy ARP events (420x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PROXY-ARP.htm
  - grok:
      field: message
      tag: proxy_arp_event_4205_4206_4207_4208
      description: "Logs a message when the feature is [enabled|disable] for a port inside a VRF | Logs a message when the feature [enable|disable] fails for a port inside a VRF"
      if: "['4205','4206','4207','4208'].contains(ctx.event?.code)"
      patterns: 
        - "^Local proxy ARP (enabled|disabled) for port %{DATA:aruba.port} on vrf %{GREEDYDATA:aruba.vrf.id}"
        - "^Failed to (enable|disable) local proxy ARP for port %{DATA:aruba.port} on vrf %{GREEDYDATA:aruba.vrf.id}"

    # Management events (430x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MGMT.htm
  - grok:
      field: message
      tag: mgmt_event_4301
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4301'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_param})"
  - grok:
      field: message
      tag: mgmt_event_4302
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4302'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_err})"
  - grok:
      field: message
      tag: mgmt_event_4303
      description: "Logs related to management interface configurations"
      if: "ctx.event?.code == '4303'"
      patterns: 
        - "MGMT_INTF: (Static parameter : \\[%{GREEDYDATA:_temp.config}\\]|%{GREEDYDATA:aruba.mgmt.config_crit})"
  - json:
      if: "ctx.event?.code == '4301' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_param
  - json:
      if: "ctx.event?.code == '4302' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_err
  - json:
      if: "ctx.event?.code == '4303' && ctx._temp?.config != null"
      field: _temp.config
      target_field: aruba.mgmt.config_crit

  # Firmware Update events (44xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/UPDATE.htm
  - grok:
      if: "['4401','4402'].contains(ctx.event?.code)"
      tag: firmware_update_event_4401_4402
      field: "message"
      description: "Indicates that the switch firmware was successfully updated from a remote or local source"
      patterns:
        - "^User %{DATA:user.name}: %{DATA:aruba.firmware.image_profile} image updated via %{DATA:aruba.firmware.dnld_type}( from %{HOSTNAME:source.address})?. Firmware version, Before Update: %{DATA:aruba.firmware.before} After Update: %{DATA:aruba.firmware.after}$"
  - grok:
      if: "['4403','4404'].contains(ctx.event?.code)"
      tag: firmware_update_event_4403_4404
      field: "message"
      description: "Indicates that a switch firmware update failed from a remote or local source"
      patterns:
        - "^User %{DATA:user.name}: %{DATA:aruba.firmware.image_profile} image update failed via %{DATA:aruba.firmware.dnld_type}( from %{HOSTNAME:source.address})?$"
  - grok:
      if: "['4408','4409','4410','4411'].contains(ctx.event?.code)"
      tag: firmware_update_event_4408_4409_4410_4411
      field: "message"
      description: "Indicates that a hot-patch image was downloaded succesfully from a remote sour | image was downloaded succesfully from a local source | download failed from a remote source | download failed from a local source"
      patterns:
        - "^User %{DATA:user.name}: hot-patch \"%{DATA:aruba.firmware.hotpatch_name}\" (downloaded|download failed) via (%{DATA:aruba.firmware.dnld_type} from %{GREEDYDATA:source.address}|%{OPTIONAL_SENTENCE:aruba.firmware.dnld_type}(\\.)?)"
      pattern_definitions:
        OPTIONAL_SENTENCE: "[\\p{L},\":;\\s\\-]*"

  # Self Test events (450x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SELFTEST.htm
  - grok:
      if: "['4501','4502'].contains(ctx.event?.code)"
      tag: self_test_event_4501_4502
      field: "message"
      description: "logs the [started|completion] of selftest on a particular subsystem"
      patterns:
        - "^Selftest has (started|completed) on subsystem %{GREEDYDATA:aruba.subsystem}"
  - dissect:
      if: "ctx.event?.code == '4503'"
      tag: self_test_event_4503
      field: "message"
      description: "logs the selftest failure of a particular subsystem"
      pattern: "Selftest has failed on subsystem %{aruba.subsystem} with error code %{event.reason}"
  - dissect:
      if: "ctx.event?.code == '4504'"
      tag: self_test_event_4504
      field: "message"
      description: "logs the port selftest failure on a given subsystem"
      pattern: 'Selftest has failed on %{aruba.self_test.stack}/%{aruba.slot}/%{aruba.interface.id} with error code %{event.reason}'

# REST events (46xx)
# https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/RESTD.htm
  - grok:
      if: "['4601','4602'].contains(ctx.event?.code)"
      tag: rest_event_4601_4602
      field: "message"
      description: "logs a [failed|successful] authentication attempt of a user via REST"
      patterns:
        - "^Authentication (failed|succeeded) for user %{DATA:user.name} in session %{GREEDYDATA:aruba.session.id}"
  - dissect:
      if: "ctx.event?.code == '4603'"
      tag: rest_event_4603
      field: "message"
      description: "logs an authorization configuration conflict"
      pattern: 'Conflict in authorization configuration. Existing config::URL(%{aruba.rest.match}), type(%{aruba.rest.type}) New config::(%{url.original}), type(%{aruba.rest.autztype})'
  - grok:
      if: "['4606','4607','4608'].contains(ctx.event?.code)"
      tag: rest_event_4606_4607_4608
      field: "message"
      description: "logs a [failed|successful|allowed] authorization attempt of a user via REST "
      patterns:
        - "^Authorization (failed|succeeded|allowed) for user %{DATA:user.name}, for resource %{DATA:aruba.rest.resource}, with action %{GREEDYDATA:event.action}"
  - dissect:
      if: "ctx.event?.code == '4609'"
      tag: rest_event_4609
      field: "message"
      description: "logs a successful add of a user via REST"
      pattern: "User %{user.name} added %{aruba.rest.added_user} with role %{aruba.role}"
  - grok:
      if: "['4610','4653'].contains(ctx.event?.code)"
      tag: rest_event_4610_4653
      field: "message"
      description: "logs a successful deletion of a user via REST | Logs a message when a user changes the REST configuration lockout mode"
      patterns: 
        - "^User %{DATA:user.name} deleted %{GREEDYDATA:aruba.rest.deleted_user}"
        - "^User %{DATA:user.name} has configured %{DATA:aruba.rest.mode} for configuration lockout"
  - grok:
      if: "['4611','4612'].contains(ctx.event?.code)"
      tag: rest_event_4611_4612
      field: "message"
      description: "logs a [unsuccessful|successful] password change for a user via REST"
      patterns:
        - "^User %{DATA:user.name} (successfully changed password|password change failed)"
  - grok:
      if: "['4613','4614','4615','4616'].contains(ctx.event?.code)"
      tag: rest_event_4613_4614_4615_4616
      field: "message"
      description: "logs a success config write operation | success copy of saved | success when the nameserver is written to ovsdb | success when the nameserver is deleted from ovsdb"
      patterns:
        - "%{USER_PATTERN} written a new switch configuration to %{GREEDYDATA:aruba.rest.config_name}"
        - "%{USER_PATTERN} copied switch configuration %{DATA:aruba.rest.config_from_name} to %{GREEDYDATA:aruba.rest.config_to_name}"
        - "%{USER_PATTERN} configured %{DATA:aruba.rest.dns_nameserver} DNS nameserver to %{GREEDYDATA:aruba.rest.dns}"
        - "%{USER_PATTERN} deleted all DNS nameservers"
      pattern_definitions:
        USER_PATTERN: "^%{DATA:user.name} has"
  - grok:
      if: "['4617','4618','4619'].contains(ctx.event?.code)"
      tag: rest_event_4617_4618_4619
      field: "message"
      description: "A user has successfully [created|deleted|modified] a new resource in OVSDB"
      patterns:
        - "^%{DATA:user.name} (created|deleted|modified)( %{GREEDYDATA:url.original})?"
  - grok:
      if: "['4620','4621'].contains(ctx.event?.code)"
      tag: rest_event_4620_4621
      field: "message"
      description: "A user has [added|removed] new notification subscriber"
      patterns:
        - "^User: %{DATA:user.name} (added|removed) subscriber: %{GREEDYDATA:aruba.rest.subscriber}."
  - grok:
      if: "['4622','4623','4625'].contains(ctx.event?.code)"
      tag: rest_event_4622_4623_4625
      field: "message"
      description: "A subscriber has [added|removed] new subscription | Unable to add new subscription as max number reached for the specified subscriber"
      patterns:
        - "^Subscriber: %{DATA:aruba.rest.subscriber} (added|removed) subscription: %{GREEDYDATA:aruba.rest.subscription}."
        - "^Unable to add new subscription. Max number of subscriptions for %{DATA:aruba.rest.subscriber} has been reached."
  - grok:
      if: "['4626','4627','4628','4629','4630','4631'].contains(ctx.event?.code)"
      tag: rest_event_4626_4627_4628_4629_4630_4631
      field: "message"
      description: "NAE [Script|Agent] has been [created|deleted] successfully | Logs an error if a reboot fails"
      patterns:
        - "^NAE (Script|Agent) %{DATA:aruba.rest.name} has been (created|updated|deleted) by user %{GREEDYDATA:user.name}."
        - "^Error rebooting switch, reboot command: %{DATA:aruba.rest.command}, error received: %{GREEDYDATA:event.reason}"
  - grok:
      if: "['4632','4633','4634','4635','4636','4637','4639','4640','4642'].contains(ctx.event?.code)"
      tag: rest_event_4632_4633_4634_4635_4636_4637_4639_4640_4642
      field: "message"
      description: "HPE Aruba Networking Central type logs"
      patterns:
        - "location %{DATA:aruba.rest.central_location} on VRF %{DATA:aruba.vrf.id} (with|and) Source IP %{IP:source.ip}"
  - grok:
      if: "['4645','4649'].contains(ctx.event?.code)"
      tag: rest_event_4645_4649
      field: "message"
      description: "Aruba Activate server is reachable via an active VRF | Unable to sync switch time with Aruba Activate Server"
      patterns:
        - "(S|s)erver %{DATA:server.address}( is reachable)? via VRF %{GREEDYDATA:aruba.vrf.id}."
  - grok:
      if: "['4646','4648'].contains(ctx.event?.code)"
      tag: rest_event_4646_4648
      field: "message"
      description: "Aruba Activate server is not reachable through any supported VRF | Switch time is synced with Aruba Activate Server"
      patterns:
        - "server %{DATA:server.address} "
        - "Server %{GREEDYDATA:server.address}."
  - grok:
      if: "['4650', '4651'].contains(ctx.event?.code)"
      tag: rest_event_4650_4651
      field: "message"
      description: "(Unable|Successfully) to fetch HPE Aruba Networking Central location from Central Source (CLI/DHCP/Aruba Activate Server)"
      patterns:
        - "location( %{DATA:aruba.rest.central_location})? successfully fetched from %{DATA:aruba.rest.central_source} via VRF( %{GREEDYDATA:aruba.vrf.id})?"
        - "location( %{DATA:aruba.rest.central_location})? from %{DATA:aruba.rest.central_source} via VRF( %{GREEDYDATA:aruba.vrf.id})?."
  - grok:
      if: "ctx.event?.code == '4652'"
      tag: rest_event_4652
      field: "message"
      description: "Central connected, any config change through rest may not be persistent, Central can overwrite the change"
      patterns: 
        - "Central connected, any config change through rest %{DATA:aruba.rest.operation} operation may not be persistent. If central reapplies the config, change can be overwritten"
  - grok:
      if: "ctx.event?.code == '4654'"
      tag: rest_event_4654
      field: "message"
      description: "Logs a message when a HPE Aruba Networking Central support mode is enabled or disabled"
      patterns: 
        - "support mode is %{DATA:aruba.rest.mode} for a vtysh session"
  - grok:
      if: "['4655','4656','4657'].contains(ctx.event?.code)"
      tag: rest_event_4655_4656_4657
      field: "message"
      description: "Logs a message when a user login is [successful|failed] | Logs a message when a user logs out of a session"
      patterns:
        - "^User %{DATA:user.name} (logged in|login) from %{DATA:aruba.rest.identity} "
        - "^User %{DATA:user.name} logged out of REST session from %{GREEDYDATA:aruba.rest.identity}"
  - grok:
      if: "['4658','4659'].contains(ctx.event?.code)"
      tag: rest_event_4658_4659
      field: "message"
      description: "Logs a message when a user tries to login while maximum number of sessions are reached | when a REST session timed out due to the session being idle"
      patterns:
        - "^REST session from %{DATA:aruba.rest.identity} with User %{DATA:user.name} is rejected because maximum session limit is reached"
        - "^%{DATA:user_agent.name:} session from %{DATA:aruba.rest.identity} with User %{DATA:user.name} timed out due to idle timeout"
  - grok:
      if: "['4660','4661','4662'].contains(ctx.event?.code)"
      tag: rest_event_4660_4661_4662
      field: "message"
      description: "Logs a message when the REST server is [enabled|disabled] on a VRF | when a user login fails since the access through this management interface is not allowed"
      patterns:
        - "^REST server is (enabled|disabled) on VRF %{GREEDYDATA:aruba.vrf.name}"
        - "^User %{DATA:user.name} login from %{IP:client.ip} for REST session has failed since the user is trying to login through an interface which is not allowed. Allowed interfaces are: %{GREEDYDATA:aruba.interface.id}"

    # User management events (470x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/USER-MGMT.htm
  - dissect:
      field: message
      tag: user_mgmt_event_4701
      description: "Logs a message when a new user is added to the switch"
      if: "ctx.event?.code == '4701'"
      pattern: "User %{user.name} added %{aruba.user.added_user} with role %{aruba.user.role}"
  - dissect:
      field: message
      tag: user_mgmt_event_4702
      description: "Logs a message when a user is deleted from the switch"
      if: "ctx.event?.code == '4702'"
      pattern: "User %{user.name} deleted %{aruba.user.deleted_user} with role %{aruba.user.role}"
  - grok:
      field: message
      tag: user_mgmt_event_4703_4704_4705_4706
      description: "Logs a message when a user changes his/her password (failed)? | user sets export password | user restores default export password"
      if: "['4703','4704','4705','4706'].contains(ctx.event?.code)"
      patterns:
        - "^User %{DATA:user.name} "

    # MAC Learning events (480x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MAC-LEARN.htm
  - grok:
      field: message
      tag: mac_learn_event_4801_through_4805
      description: "The following are the events related to MAC learning."
      if: "['4801','4802','4803','4804','4805'].contains(ctx.event?.code)"
      patterns:
        - "^MAC %{MAC:server.mac} moved from port %{DATA:aruba.interface.prev_id} to port %{DATA:aruba.interface.id} on VLAN %{GREEDYDATA:network.vlan.id}"
        - "^All dynamic MAC addresses on VLAN %{DATA:network.vlan.id} were flushed"
        - "^All dynamic MAC addresses on port %{DATA:aruba.interface.id} were flushed"

    # OSPFv3 events (490x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/OSPFv3.htm
  - dissect:
      field: message
      tag: ospfv3_event_4901
      description: "Logs errors for OSPFv3 FP creation/installation."
      if: "['4901'].contains(ctx.event?.code)"
      pattern: "Failed to %{event.action} %{rule.name} error: %{event.reason}"
  - grok:
      field: message
      tag: ospfv3_event_4902
      description: "[DR FP|FP] creation/installation | changes to neighbour state machine | changes in the interface FSM state"
      if: "['4902','4903','4904','4905'].contains(ctx.event?.code)"
      patterns:
        - "^OSPF3 (all|designated) routers field entry added: group_id=%{DATA:group.id} fp_id=%{DATA:aruba.ospf.fp_id} stat_id=%{GREEDYDATA:aruba.ospf.stats_id}"
        - "^AdjChg: Nbr%{DATA:aruba.ospf.router_id} on %{INTERFACE_AREA}: %{STATE_CHANGE}"
        - "^%{INTERFACE_AREA} changed from %{STATE_CHANGE}, input: %{GREEDYDATA:aruba.ospf.input}"
      pattern_definitions:
        INTERFACE_AREA: "(I|i)nterface %{DATA:aruba.ospf.link_local} on %{DATA:aruba.interface.id}\\(%{DATA:aruba.ospf.area}\\)"
        STATE_CHANGE: "%{DATA:aruba.ospf.old_state} (->|to) %{GREEDYDATA:aruba.state}"

  # Rapid per VLAN Spanning Tree Protocol events (500x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/RPVST.htm
  - dissect:
      if: "ctx.event?.code == '5003'"
      tag: rpvst_event_5003
      field: "message"
      description: "This log event indicates that RPVST root on a VLAN has changed"
      pattern: "RPVST - Root changed from %{aruba.rpvst.old_priority}: %{aruba.rpvst.old_mac} to %{aruba.priority}: %{client.mac} on VLAN %{network.vlan.id}."
  - dissect:
      if: "ctx.event?.code == '5004'"
      tag: rpvst_event_5004
      field: "message"
      description: "This log event informs the user BPDU received on protected port"
      pattern: "Port %{aruba.port} disabled - BPDU received on protected port on VLAN %{network.vlan.id}."
  - dissect:
      if: "ctx.event?.code == '5005'"
      tag: rpvst_event_5005
      field: "message"
      description: "This log event informs the user that the Rx is starved in paticular port"
      pattern: "%{aruba.rpvst.proto} starved for %{aruba.rpvst.pkt_type} on port %{aruba.port} from %{client.mac} on VLAN %{network.vlan.id}."
  - grok:
      if: "['5006','5007'].contains(ctx.event?.code)"
      tag: rpvst_event_5006_5007
      field: "message"
      description: "This log event informs the user that the RPVST topology change is [received|generated]"
      patterns:
        - "^Topology change (received|generated) on port %{DATA:aruba.port}( from source: %{MAC:client.mac})? on VLAN %{DATA:network.vlan.id}."
  - grok:
      if: "['5008','5009'].contains(ctx.event?.code)"
      tag: rpvst_event_5008_5009
      field: "message"
      description: "This log event informs the user that the port is [unblocked|blocked] on the instance"
      patterns:
        - "^Port %{DATA:aruba.port} (unblocked|blocked) on RPVST %{GREEDYDATA:aruba.instance.id}"
  - dissect:
      if: "ctx.event?.code == '5010'"
      tag: rpvst_event_5010
      field: "message"
      description: "This log event informs the user that the root port is changed"
      pattern: "Root port changed from %{aruba.rpvst.old_port} to %{aruba.port} on VLAN %{network.vlan.id}."
  - grok:
      if: "ctx.event?.code == '5011'"
      tag: rpvst_event_5011
      field: "message"
      description: "Log event when the PVID mismatches between the switch and neighbor over an interface"
      patterns:
        - "^PVID mismatch detected on %{DATA:aruba.interface.id} with pvid = %{DATA:aruba.rpvst.pvid}, Neighbor pvid = %{GREEDYDATA:aruba.rpvst.npvid}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5012'"
      tag: rpvst_event_5012
      field: "message"
      description: "This log event informs the user that the spanning tree mode is changed."
      pattern: "spanning tree mode changed from %{aruba.rpvst.old_mode} to %{aruba.rpvst.new_mode}, it will trigger the reconvergence."
  - grok:
      if: "ctx.event?.code == '5013'"
      tag: rpvst_event_5013
      field: "message"
      description: "Log event when the current virtual port count crosses the maximum allowed value"
      patterns: 
        - "^Current Virtual Ports %{NUMBER:aruba.limit.read_value:long} exceeds the max supported limit %{GREEDYDATA:aruba.limit.threshold}"


  # PIM events (51xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PIM.htm
  - grok:
      if: "ctx.event?.code == '5101'"
      field: message
      tag: pim_event_5101
      description: "Send error packet"
      patterns:
        - "^Failed to send %{DATA:aruba.pim.pkt_type} packet on Interface %{GREEDYDATA:aruba.interface.name}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5102'"
      field: message
      tag: pim_event_5102
      description: "Pim IP config"
      pattern: "PIM interface %{aruba.interface.name} is configured with IP %{server.ip}"
  - grok:
      if: "ctx.event?.code == '5103'"
      field: message
      tag: pim_event_5103
      description: "Packet dropped"
      patterns: 
        - "^Packet dropped from %{IP:server.ip} on interface %{DATA:aruba.interface.name} %{DATA:event.reason} %{GREEDYDATA:aruba.pim.error_value}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event?.code == '5104'"
      field: message
      tag: pim_event_5104
      description: "Received packet from router"
      patterns: 
        - "^Received packet from router %{IP:server.ip}, unkwn pkt type %{GREEDYDATA:aruba.pim.pkt_type}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event?.code == '5105'"
      field: message
      tag: pim_event_5105
      description: "Failed to add flow"
      patterns: 
        - "^Failed to add flow %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, %{IP_BIT:aruba.pim.sip0}.%{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{IP_BIT:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{NUMBER:aruba.pim.totalvid:long} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
      pattern_definitions:
        IP_BIT: "(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])"
  - grok:
      if: "ctx.event?.code == '5106'"
      field: message
      tag: pim_event_5106
      description: "Failed to remove flow for Hardware"
      patterns:
        - "^Failed to remove flow g %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, s %{IP_BIT:aruba.pim.sip0}, %{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{DATA:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
        # Added another pattern in case the documentation is incorrect, aligned this pattern with the 5105 pattern
        - "^Failed to remove flow %{IP_BIT:aruba.pim.dip0}.%{IP_BIT:aruba.pim.dip1}.%{IP_BIT:aruba.pim.dip2}.%{IP_BIT:aruba.pim.dip3}, %{IP_BIT:aruba.pim.sip0}.%{IP_BIT:aruba.pim.sip1}.%{IP_BIT:aruba.pim.sip2}.%{IP_BIT:aruba.pim.sip3} \\(%{DATA:aruba.status} %{DATA:aruba.port} %{DATA:network.vlan.id} %{DATA:aruba.pim.flowtype} %{DATA:aruba.pim.callerid}\\)"
      pattern_definitions:
        IP_BIT: "(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])"
  - grok:
      if: "['5107', '5108'].contains(ctx.event?.code)"
      field: message
      tag: pim_event_5107_5108
      description: "Failed to program mroute as the limits are reached | sources per group limit is reached"
      patterns: 
        - "^Failed to add a mroute for s=%{IP:source.ip}, g=%{DATA:group.name} on interface %{DATA:aruba.interface.name} "
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5109'"
      field: message
      tag: pim_event_5109
      description: "PIM DR election log"
      pattern: "This router is elected as the %{aruba.pim.ip_version} %{aruba.state} for interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5110'"
      field: message
      tag: pim_event_5110
      description: "Multicast socket creation error"
      pattern: "%{aruba.pim.type} %{event.reason} failed with Fd: %{aruba.pim.fd} on Port: %{aruba.port}. Error description: %{aruba.error.description}"
  - grok:
      if: "ctx.event?.code == '5111'"
      field: message
      tag: pim_event_5111
      description: "DB Operation failed"
      patterns: 
        - "OVSDB operation failed with %{GREEDYDATA:event.reason}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5112'"
      field: message
      tag: pim_event_5112
      description: "Elected BSR"
      pattern: "New Elected BSR for VRF %{aruba.vrf.name} is %{aruba.pim.ebsr_ip} with priority %{aruba.priority}"
  - dissect:
      if: "ctx.event?.code == '5113'"
      field: message
      tag: pim_event_5113
      description: "Elected BSR removed"
      pattern: "Elected BSR removed on VRF %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event?.code == '5114'"
      field: message
      tag: pim_event_5114
      description: "Configured candidate BSR"
      pattern: "Candidate BSR %{server.ip} with priority %{aruba.priority} is %{aruba.status} on interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5115'"
      field: message
      tag: pim_event_5115
      description: "Neighbor status"
      pattern: "PIM Neighbor %{client.ip} is %{aruba.pim.event} on interface %{aruba.interface.name}"
  - grok:
      if: "ctx.event?.code == '5116'"
      field: message
      tag: pim_event_5116
      description: "Packet drop"
      patterns: 
        - "^%{NUMBER:network.packets:long} packet is discarded on interface %{DATA:aruba.interface.name}. Reason: %{GREEDYDATA:event.reason}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      if: "ctx.event?.code == '5117'"
      field: message
      tag: pim_event_5117
      description: "Interface operational status"
      pattern: "Forwarding state has changed to %{aruba.state} on %{aruba.pim.ip_version} enabled interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5118'"
      field: message
      tag: pim_event_5118
      description: "Interface PIM mode"
      pattern: "%{package.version} %{aruba.pim.mode} mode is %{aruba.status} on interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5119'"
      field: message
      tag: pim_event_5119
      description: "Router pim configuration status"
      pattern: "Router %{package.version} is %{aruba.pim.mode} on VRF %{aruba.vrf.name}"
  - dissect:
      if: "ctx.event?.code == '5120'"
      field: message
      tag: pim_event_5120
      description: "Learnt or removed candidate RP"
      pattern: "Candidate RP %{server.ip} is %{aruba.pim.event} on VRF %{aruba.vrf.name}"
  - grok:
      if: "ctx.event?.code == '5121'"
      field: message
      tag: pim_event_5121
      description: "Software Packet Queue reaches threshold"
      patterns: 
        - "^Software Packet Queue %{DATA:aruba.limit.threshold} threshold value %{NUMBER:aruba.limit.read_value:long} reached. Queue size: %{NUMBER:aruba.pim.qsize:long}"
  - dissect:
      if: "ctx.event?.code == '5122'"
      field: message
      tag: pim_event_5122
      description: "PIM VSX DR Election log"
      pattern: "This router is elected as the %{aruba.pim.ip_version} VSX %{aruba.state} for interface %{aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '5123'"
      field: message
      tag: pim_event_5123
      description: "VSX ISL Status update log"
      pattern: "VSX ISL Status changed to %{aruba.status}"
  - grok:
      if: "ctx.event?.code == '5124'"
      field: message
      tag: pim_event_5124
      description: "Configured candidate RP"
      patterns: 
        - "^Candidate RP %{IP:server.ip} is configured on interface %{GREEDYDATA:aruba.interface.name}"
  - grok:
      field: message
      tag: pim_event_5125_5126
      if: "['5125','5126'].contains(ctx.event?.code)"
      description: "BFD Session created or deleted"
      patterns:
        - "^BFD Session (created|deleted) for neighbor %{IP:server.ip} on interface %{GREEDYDATA:aruba.interface.name}"

  # SSH server events (520x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SSH_SERVER.htm
  - dissect:
      if: "ctx.event?.code == '5201'"
      tag: sftps_event_5201
      field: "message"
      description: "Logs a message when the SSH host-key generated"
      pattern: "SSH host-key %{aruba.ssh.key_name} is installed."
  - grok:
      if: "['5202', '5203'].contains(ctx.event?.code)"
      tag: sftps_event_5202_5203
      field: "message"
      description: "Logs a message when the SSH server is [enabled|disabled] on a VRF"
      patterns:
        - "^SSH server is (enabled|disabled) on VRF %{GREEDYDATA:aruba.vrf.name}."
  - grok:
      if: "['5204', '5205'].contains(ctx.event?.code)"
      tag: sftps_event_5204_5205
      field: "message"
      description: "Logs a message when [add|delete] ssh client-public-key into authorized_keys file"
      patterns:
        - "^SSH client-public-key %{DATA:aruba.ssh.key_name} was (installed|removed) for the user %{GREEDYDATA:user.name}."
  - dissect:
      if: "ctx.event?.code == '5207'"
      tag: sftps_event_5207
      field: "message"
      description: "Logs a message when the SSH host-key is corrupted"
      pattern: "An internal error occurred while reading the SSH host-key %{aruba.ssh.key_name}."
  - dissect:
      if: "ctx.event?.code == '5208'"
      tag: sftps_event_5208
      field: "message"
      description: "Logs a message when a user tries to enable SSH server without setting admin password"
      pattern: "Failed to enable SSH server on VRF %{aruba.vrf.name}. Admin password is not set."
  - grok:
      if: "['5209','5210','5211'].contains(ctx.event?.code)"
      tag: sftps_event_5209_5210_5211
      field: "message"
      description: "Logs a message when a user login is successful | failed | logout"
      patterns:
        - "^User %{DATA:user.name} (logged in|login) from %{IP:client.ip} "
        - "^User %{DATA:user.name} logged out of SSH session from %{IP:client.ip}."
  - grok:
      if: "['5212','5213','5214'].contains(ctx.event?.code)"
      tag: sftps_event_5212_5213_5214
      field: "message"
      description: "Logs a message when a user tries to login while maximum number of sessions are reached | user session is closed while maximum number of sessions per user are reached | session is closed due to host key failurE"
      patterns:
        - "^SSH session from %{IP:client.ip} "
        - "^SSH session from user %{DATA:user.name} closed because maximum number of sessions per user is reached."
  - grok:
      if: "['5215', '5216'].contains(ctx.event?.code)"
      tag: sftps_event_5215_5216
      field: "message"
      description: "Logs a message when a user login fails since the access through this management interface is not allowed | when a user login fails due to public key failure"
      patterns:
        - "^SSH session from %{IP:client.ip} for user %{DATA:user.name} denied. The allowed user management interfaces are: %{GREEDYDATA:aruba.interface.id}."
        - "^SSH session from %{IP:client.ip} for user %{DATA:user.name} rejected due to failed public key validation"
  - dissect:
      if: "ctx.event?.code == '5217'"
      tag: sftps_event_5217
      field: "message"
      description: "Logs a message when SSH server goes into an error state."
      pattern: "SSH server on VRF %{aruba.vrf.name} is in an error state."
  - grok:
      if: "['5218', '5219'].contains(ctx.event?.code)"
      tag: sftps_event_5218_5219
      field: "message"
      description: "Logs a message when SSH server (fails)? converts an IP address to CIDR format | "
      patterns:
        - "^Converting configured SSH server allow-list entry %{IP:client.ip} to CIDR format \\(%{GREEDYDATA:aruba.ssh.new_ip}\\)"
        - "^Failed to convert configured SSH server allow-list entry %{IP:client.ip} to CIDR format, using original address as-is"
  - grok:
      if: "['5220', '5221','5222'].contains(ctx.event?.code)"
      tag: sftps_event_5220_5221_5222
      field: "message"
      description: "Logs a message when SSH connection fails due to authorize-only attempt | authenticating username was searched for and not found in the authenticating certificate | when the authenticating IP is denied due to the SSH server allow list"
      patterns:
        - "^RADIUS authorize-only request failed for SSH session from %{IP:client.ip} for user %{GREEDYDATA:user.name}."
        - "^SSH session from %{IP:client.ip} (denied because username|for user) %{DATA:user.name} "

  # SFTP Client events (530x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SFTP_CLIENT.htm
  - grok:
      if: "['5301', '5302'].contains(ctx.event?.code)"
      tag: sftpc_event_5301_5302
      field: "message"
      description: "SFTP file transfer completed | failed"
      patterns:
        - "^SFTP file transfer from %{DATA:source.address} to %{DATA:destination.address} (completed|failed - %{GREEDYDATA:aruba.status})."

  # VRF Manager events (540x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VRF_MGR.htm
  - grok:
      if: "['5401','5402','5403'].contains(ctx.event?.code)"
      tag: vrf_mgr_event_5401_5402_5403
      field: "message"
      description: "Created | deleted | created field vrf entity"
      patterns:
        - "^(Created|Deleted) a vrf entity %{GREEDYDATA:aruba.vrf.name}"
        - "^vrf entity creation failed %{GREEDYDATA:aruba.vrf.name}"

  # HTTPS Server events (560x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/HTTPS_SERVER.htm
  - grok:
      if: "['5601','5602','5603','5604','5605'].contains(ctx.event?.code)"
      tag: server_event_5601_5602_5603_5604_5605
      field: "message"
      description: "Logs a message when a user changes REST mode | enable/disable VFR config | closes HTTPS session | changes max user sessions | changes idle timeout"
      patterns:
        - "^User %{DATA:server.user.name} (%{5601_PATTERN}|%{5602_PATTERN}|%{5603_PATTERN}|%{5604_PATTERN}|%{5605_PATTERN})$"
      pattern_definitions:
        5601_PATTERN: "has enabled %{DATA:aruba.server.mode} for REST mode"
        5602_PATTERN: "has %{DATA:aruba.status} HTTPS Server on VRF %{DATA:aruba.vrf.id}"
        5603_PATTERN: "closed all HTTPS sessions"
        5604_PATTERN: "changed the HTTPS Server max user sessions amount to %{NUMBER:aruba.server.sessions:long}"
        5605_PATTERN: "changed the HTTPS Server idle timeout to %{NUMBER:aruba.timeout:long}"

  # Quality of Service events (570x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/QOS.htm
  - grok:
      if: "['5701','5702'].contains(ctx.event?.code)"
      tag: qos_event_5701_5702
      field: "message"
      description: "QoS failed to retrieve default configuration | QoS error occurred"
      patterns:
        - "(E|e)rror: %{GREEDYDATA:event.reason}"

  # QoS ASIC Provider events (580x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/QOS_ASIC.htm
  - dissect:
      if: "ctx.event?.code == '5801'"
      tag: qos_asic_event_5801
      field: "message"
      description: "QoS initial initialization failed"
      pattern: "QoS failed initial initialization for slot %{aruba.slot}. Error: %{event.reason}"
  - dissect:
      if: "ctx.event?.code == '5802'"
      tag: qos_asic_event_5802
      field: "message"
      description: "QoS final initialization failed for new slot"
      pattern: "QoS failed final initialization on new slot %{aruba.qos.new_slot} for peer slot %{aruba.slot}"
  - dissect:
      if: "ctx.event?.code == '5803'"
      tag: qos_asic_event_5803
      field: "message"
      description: "QoS error after card removal"
      pattern: "QoS error after card removal from slot %{aruba.slot}"
  - dissect:
      if: "ctx.event?.code == '5804'"
      tag: qos_asic_event_5804
      field: "message"
      description: "Error while attempting QoS feature configuration"
      pattern: "Error during QoS feature configuration: %{event.reason}"
  - dissect:
      if: "ctx.event?.code == '5805'"
      tag: qos_asic_event_5805
      field: "message"
      description: "Error while attempting QoS HW configuration"
      pattern: "Error during QoS HW configuration: %{event.reason} error %{error.code}"
  - dissect:
      if: "ctx.event?.code == '5806'"
      tag: qos_asic_event_5806
      field: "message"
      description: "Warning PFC priority sharing a queue"
      pattern: "Port: %{aruba.port} PFC priority %{aruba.priority} using queue %{aruba.qos.queue} should not be sharing the queue with other local-priorities"

  # NAE events (60xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/TSDBD.htm
  - grok:
      if: "['6001','6002','6003','6008','6009','6010'].contains(ctx.event?.code)"
      tag: nae_event_6001_6002_6003_6008_6009_6010
      field: "message"
      description: "[started|stopped] to collect samples | error and cannot collect samples | Temporarily disabling processing updates | resuming to monitor data points | user clears the NAE time series database"
      patterns:
        - "^NAE agent %{DATA:aruba.nae.name} with URI %{DATA:url.original} has error and cannot collect samples"
        - "^NAE agent %{DATA:aruba.nae.name} %{GREEDYDATA} from %{GREEDYDATA:url.original}."
        - "NAE monitor %{DATA:aruba.nae.monitor_name}. "
        - "from NAE monitor %{GREEDYDATA:aruba.nae.monitor_name}"
        - "^User %{DATA:user.name} "
  - grok:
      if: "['6004','6005','6007'].contains(ctx.event?.code)"
      tag: nae_event_6004_6005_6007
      field: "message"
      description: "watching (stopped)? for condition | error and is not watched"
      patterns:
        - "^NAE agent %{DATA:aruba.nae.name} (is watching for|stopped to watch for|generated an alert based on) condition %{GREEDYDATA:aruba.nae.condition}."
  - dissect:
      if: "['6006'].contains(ctx.event?.code)"
      tag: nae_event_6006
      field: "message"
      description: "NAE agent with condition has error and is not watched."
      pattern: "NAE agent %{aruba.nae.name} with condition %{aruba.nae.condition} has error and is not watched."

  # NDM events (61xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/NDM.htm
  - grok:
      if: "['6101','6102','6104','6113'].contains(ctx.event?.code)"
      tag: server_event_6101_6102_6104_6113
      field: "message"
      description: "Logs a message when a user changes REST mode | enable/disable VFR config | closes HTTPS session | changes max user sessions | changes idle timeout"
      patterns:
        - "^Static Neighbor %{IP:client.ip} (created|deleted) on Port %{DATA:aruba.port}, VRF %{DATA:aruba.vrf.id}( and)? mac %{MAC:client.mac}"
        - "^EVPN Virtual Tunnel EndPoint Neighbor %{IP:client.ip} updated on Port%{DATA:aruba.port} and VRF %{DATA:aruba.vrf.id} with mac %{MAC:client.mac}"
        - "^IPDB neighbor %{IP:client.ip} added in port %{DATA:aruba.port}, VRF %{GREEDYDATA:aruba.vrf.id}"
  - grok:
      if: "['6105','6121','6122','6123'].contains(ctx.event?.code)"
      tag: ndm_event_6105_6121_6122_6123
      field: "message"
      description: "IPDB neighbor deleted from the neighbor Table | Static Neighbor add failed, subnet not matched | Static Neighbor add failed, it is own ip | Static Neighbor add failed, port is down"
      patterns:
        - "^(IPDB Neighbor|static neighbor) %{IP:client.ip} "
  - grok:
      if: "['6106','6107','6108','6109'].contains(ctx.event?.code)"
      tag: ndm_event_6106_6107_6108_6109
      field: "message"
      description: "Clear all [ARP|VSX Peer ARP] entries requested on Specific Port | Clear all [ARP|VSX Peer Arp] entries requested on Specific VRF"
      patterns:
        - "^Clear all (Arp|VSX Peer ARP) entries requested on Port %{DATA:aruba.port} and (VRF|vrf) %{GREEDYDATA:aruba.vrf.id}"
        - "^Clear all( VSX Peer)? Arp entries requested on VRF %{GREEDYDATA:aruba.vrf.id}"
  - dissect:
      if: "ctx.event.code == '6115'"
      tag: ndm_event_6115
      field: "message"
      description: "Processing Redundancy management"
      pattern: "Management Role set to %{aruba.role}"
  - dissect:
      if: "ctx.event.code == '6116'"
      tag: ndm_event_6116
      field: "message"
      description: "Management role changed to new role"
      pattern: "Management role changed from old %{aruba.ndm.old_role} to new role %{aruba.role}"
  - grok:
      if: "['6112','6114','6126','6127'].contains(ctx.event?.code)"
      tag: ndm_event_6112_6114_6126_6127
      field: "message"
      description: "EVPN Virtual Tunnel EndPoint Neighbor [deleted|added] to the neighbor table | VSX Peer IP [added|deleted] in port vsxPeerIpCache"
      patterns:
        - "^EVPN (Virtual Tunnel EndPoint|VTEP) Neighbor %{IP:client.ip} (added to|deleted from) Port%{DATA:aruba.port} (on|and) VRF %{GREEDYDATA:aruba.vrf.id}"
        - "^VSX Peer IP %{IP:client.ip} (added|deleted from) the port %{DATA:aruba.port} and VRF %{GREEDYDATA:aruba.vrf.id}"
  - grok:
      if: "['6117','6118','6128','6129'].contains(ctx.event?.code)"
      tag: ndm_event_6117_6118_6128_6129
      field: "message"
      description: "Proxy arp [disabled|enabled] for the given interface | [IPv4|IPv6] neighbor ageout time changed to new value"
      patterns:
        - "^Proxy arp (en|dis)abled for the port %{GREEDYDATA:aruba.port}"
        - "^(IPv4|IPv6) neighbor ageout time changed to %{NUMBER:aruba.time.seconds:long} seconds on port %{GREEDYDATA:aruba.port}"
  - grok:
      if: "['6103','6130'].contains(ctx.event?.code)"
      tag: ndm_event_6101_6130
      field: "message"
      description: "Neighbor or Static Neighbor modified"
      patterns:
        - "^(Static )?Neighbor %{IP:client.ip} modified on Port %{DATA:aruba.port} and VRF %{DATA:aruba.vrf.id} from mac %{MAC:aruba.ndm.old_mac} to new mac %{MAC:client.mac}"
  - grok:
      if: "['6132','6133','6134'].contains(ctx.event?.code)"
      tag: ndm_event_6132_6133_6134
      field: "message"
      description: "Duplicate IP detected from ARP reply | Duplicate IPv6 address detected from Neighbour advertisement | Duplicate IP detected from ARP request"
      patterns:
        - "^Duplicate (IPv4|IPv6) address %{IP:client.ip} is detected on port %{DATA:aruba.port} with a MAC address of %{MAC:client.mac}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  
  # Time management events (620x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/CREDMGR.htm
  - dissect:
      if: "ctx.event.code == '6201'"
      tag: timemgmt_event_6201
      field: "message"
      description: "Change the system timezone"
      pattern: "System timezone changed from %{aruba.time.old_tz} to %{aruba.time.new_tz}"
  - dissect:
      if: "ctx.event.code == '6202'"
      tag: timemgmt_event_6202
      field: "message"
      description: "Change the system date/time"
      pattern: "System date/time changed from %{aruba.time.old_time} to %{aruba.time.new_time}"

  # SYSMON events (63xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SYSMON.htm
  - grok:
      if: "ctx.event?.code == '6301'"
      tag: sysmon_event_6301
      field: "message"
      description: "System resource utilization poll change event"
      patterns: 
        - "^System resource utilization poll interval is changed to %{GREEDYDATA:aruba.sysmon.poll}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['6302','6303'].contains(ctx.event?.code)"
      tag: sysmon_event_6302_6303
      field: "message"
      description: "Warns a user when system memory usage read failed | Reports current system memory usage in percentage"
      patterns:
        - "^Failed to read system memory usage for module %{GREEDYDATA:aruba.sysmon.module_name}"
        - "^Current system memory usage for module %{DATA:aruba.sysmon.module_name} is %{NUMBER:aruba.sysmon.mem_usage:long}%"
  - grok:
      if: "['6304','6305'].contains(ctx.event?.code)"
      tag: sysmon_event_6304_6305
      field: "message"
      description: "Warns a user when the storage utilization has exceeded the warning limit | Raises high storage utilization alert when the utilization crosses higher utilization limit"
      patterns:
        - "^Storage( utilization for)? %{DATA:aruba.sysmon.partition_name} (partition is at|partition high utilization alert. Utilization is at) %{NUMBER:aruba.sysmon.utilization:long}% in module %{GREEDYDATA:aruba.sysmon.module_name}"
  - grok:
      if: "['6306','6307','6308','6309'].contains(ctx.event?.code)"
      tag: sysmon_event_6306_6307_6308_6309
      field: "message"
      description: "Warns a user when [higher|excessive] write to the [swap|storage] observed"
      patterns:
        - "^Excessive write to %{DATA:aruba.sysmon.partition_name} partition in module %{DATA:aruba.sysmon.module_name} observed. %{NUMBER:aruba.sysmon.mem_usage:long}GB written over past %{NUMBER:aruba.sysmon.unit_count:long} %{GREEDYDATA:aruba.sysmon.unit}"
        - "^Excessive write to swap in module %{DATA:aruba.sysmon.module_name} observed. %{NUMBER:aruba.sysmon.mem_usage:long}GB written over past %{NUMBER:aruba.sysmon.unit_count:long} %{GREEDYDATA:aruba.sysmon.unit}"
  
  # VRF events (640x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VRF.htm
  - grok:
      if: "['6401','6402','6403','6404'].contains(ctx.event?.code)"
      tag: vrf_event_6401_6402_6403_6404
      field: "message"
      description: "Logs a message when VRF is configured (failed)? in the switch | when VRF is deleted (failed)? from the switch"
      patterns: 
        - "VRF with vrf name %{DATA:aruba.vrf.name} "

  # Credential Manager events (65xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CREDMGR.htm
  - dissect:
      if: "ctx.event.code == '6506'"
      tag: credmgr_event_6506
      field: "message"
      description: "Logs a message when SSH authorized keys are added for a user"
      pattern: "SSH authorized keys were added for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6507'"
      tag: credmgr_event_6507
      field: "message"
      description: "Logs a message after a failure to write SSH authorized keys for a user"
      pattern: "Failed to write SSH authorized keys for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6508'"
      tag: credmgr_event_6508
      field: "message"
      description: "Logs a message after deleting SSH authorized keys for a user"
      pattern: "SSH authorized keys deleted for user %{user.name}"
  - dissect:
      if: "ctx.event.code == '6509'"
      tag: credmgr_event_6509
      field: "message"
      description: "Logs a message when SSH authorized key fails validation check"
      pattern: "User %{user.name} has configured an invalid SSH authorized key with key identifier %{user.id}"

    # Port Statistics events (660x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/COUNTERS.htm
  - grok:
      field: message
      tag: port_stats_event_6601_6602_6603_6604
      description: "Logs a message when the creation of a Layer 3 IPv4/IPv6 RX/TX counter fails"
      if: "['6601','6602','6603','6604'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to create layer 3 (IPv4|IPv6) (RX|TX) statistic for port:%{GREEDYDATA:aruba.port}"

    # Mirroring events (670x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MIRRORING.htm
  - grok:
      field: message
      tag: mirror_event_6701_through_6706
      description: "The following are the events related to mirroring."
      if: "['6701','6702','6703','6704','6705','6706'].contains(ctx.event?.code)"
      patterns:
        - "session %{DATA:aruba.session.id} (created|deleted|updated)"
        - "session %{GREEDYDATA:aruba.session.id}"

  # Config Management events (68xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CONFIG_MGMT.htm
  - dissect:
      if: "ctx.event.code == '6801'"
      tag: config_event_6801
      field: "message"
      description: "Logs a message when configs copying from one format to another"
      pattern: "Copying configs from: %{aruba.config.from} to: %{aruba.config.to}"
  - dissect:
      if: "['6802', '6804'].contains(ctx.event?.code)"
      tag: config_event_6802_6804
      field: "message"
      description: "Logs a message when copying config has some error | Logs a message when copying config to shadowdb has some error"
      pattern: "Error while copying configs. Error: %{event.reason}"
  - dissect:
      if: "ctx.event.code == '6803'"
      tag: config_event_6803
      field: "message"
      description: "Logs a message when config validation prunes tables/columns in startup-config or when errors are encountered"
      pattern: "%{aruba.config.type}:%{aruba.config.value}"
  - dissect:
      if: "ctx.event.code == '6805'"
      tag: config_event_6805
      field: "message"
      description: "Logs a message when copying config has some information"
      pattern: "Information while copying configs. Info: %{event.reason}"

  # NAE Agents events (690x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/NAE_ALERT.htm
  - dissect:
      if: "ctx.event.code == '6901'"
      tag: config_event_6801
      field: "message"
      description: "Action has been triggered by an NAE agent"
      pattern: "An action has been triggered by the NAE agent %{aruba.nae.name}"

  # Virtual Switching Extension (70xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VSX.htm
  - grok:
      if: "['7001','7002','7003','7004'].contains(ctx.event?.code)"
      tag: vsx_event_7001_7002_7003_7004
      field: "message"
      description: "VSX ISL link is [down|up] | VSX ISL is [In-Sync|Out-Of-Sync] with the peer"
      patterns:
        - "^VSX ISL port %{DATA:aruba.port} is (down|up|In-Sync)"
        - "^VSX ISL port %{DATA:aruba.port} is Out-Of-Sync with the peer: %{GREEDYDATA:event.reason}"
  - dissect:
      if: "ctx.event?.code == '7009'"
      tag: vsx_event_7009
      field: "message"
      description: "VSX Software version mismatch: peer sw version is not same as local sw version"
      pattern: "VSX Software version mismatch: peer version %{aruba.vsx.peer_sw_ver}, local version %{aruba.vsx.local_sw_ver}"
  - dissect:
      if: "ctx.event?.code == '7010'"
      tag: vsx_event_7010
      field: "message"
      description: "VSX Device type mismatch: peer device type is not same as local device type"
      pattern: "VSX Device mismatch: peer device %{aruba.vsx.peer_device_type}, local device %{aruba.vsx.local_device_type}"
  - grok:
      if: "['7011','7012','7013','7014'].contains(ctx.event?.code)"
      tag: vsx_event_7011_7012_7013_7014
      field: "message"
      description: "VSX local up remote down | local down remote up | local up remote up | local down remote down"
      patterns:
        - "^VSX %{DATA:aruba.instance.id} state local"
  - dissect:
      if: "ctx.event?.code == '7017'"
      tag: vsx_event_7017
      field: "message"
      description: "Switch reboot due to VSX software update"
      pattern: "Rebooting the VSX %{aruba.role} device with newly updated %{aruba.vsx.bank_name} image."
  - grok:
      if: "ctx.event?.code == '7018'"
      tag: vsx_event_7018
      field: "message"
      description: "VSX inter-switch-link protocol version mismatch after secondary reboot"
      patterns:
        - "^VSX primary ISL version %{DATA:aruba.vsx.primary_version} (dose|does) not match with VSX secondary ISL version %{DATA:aruba.vsx.secondary_version}. Performing a non-hitless image update."
  - grok:
      if: "['7019','7024'].contains(ctx.event?.code)"
      tag: vsx_event_7019_7024
      field: "message"
      description: "VSX image update failed | software update state change "
      patterns:
        - "^VSX %{DATA:aruba.role} image update failed due to %{GREEDYDATA:event.reason}."
        - "^VSX %{DATA:aruba.role} state changed from %{DATA:aruba.vsx.prev_state} to %{GREEDYDATA:aruba.state}."

  # There is an oddity with 7029 and 7036 event ID, it maps to two messages with a duplicate fir 7936, assuming this is NOT a documentation error, handling both messages
  - grok:
      if: "['7029','7036'].contains(ctx.event?.code)"
      tag: vsx_event_7029_7036
      field: "message"
      description: "VSX device roles are said to be consistent only if one VSX device is configured as primary and other VSX device is configured as secondary | VSX software update sub-state change "
      patterns:
        - "^VSX %{DATA:aruba.role} state changed to %{DATA:aruba.state}-%{GREEDYDATA:aruba.vsx.sub_state}."
        - "^VSX device roles are inconsistent: local VSX device role %{DATA:aruba.vsx.local_vsx_role}, peer VSX device role %{GREEDYDATA:aruba.vsx.peer_vsx_role}"
  - grok:
      if: "['7032','7033'].contains(ctx.event?.code)"
      tag: vsx_event_7032_7033
      field: "message"
      description: "Failed to program active-forwarding | active-gateway"
      patterns:
        - "^Active-(gateway|forwarding) is enabled on %{DATA:aruba.port}. Cannot program Active-(forwarding|gateway)"
  - grok:
      if: "['7034','7035'].contains(ctx.event?.code)"
      tag: vsx_event_7034_7035
      field: "message"
      description: "programmed active-gateway [IP4|IP6] address successfully"
      patterns:
        - "^Netdev %{DATA:aruba.interface.name} configured with (ipv4|ipv6) address %{IP:server.ip}"


  # SNMP events (71xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SNMP.htm
  - grok:
      if: "['7101','7102','7103','7104'].contains(ctx.event?.code)"
      tag: snmp_event_7101_7102_7103_7104
      field: "message"
      description: "SNMP (sub)? agent is [enabled|disabled]"
      patterns:
        - "namespace %{GREEDYDATA:aruba.vrf.id}"
  - dissect:
      if: "ctx.event.code == '7111'"
      tag: snmp_event_7111
      field: "message"
      description: "SNMP on demand idl sync."
      pattern: "SNMP cache sync on-demand is set to: %{aruba.snmp.truth_value}"

  # In-System Programming events (72xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ISP.htm
  - grok:
      if: "ctx.event?.code == '7200'"
      tag: system_event_7200
      field: "message"
      description: "ISP internal fatal error"
      patterns: 
        - "^Internal fatal error at %{DATA:file.name}\\s?:\\s?%{NUMBER:aruba.system.line:long}"
  - grok:
      if: "['7210','7211'].contains(ctx.event?.code)"
      tag: system_event_7210_7211
      field: "message"
      description: "A non-failsafe device update is needed, but the allow-unsafe-updates command has not yet been run | about to start, so do not interrupt it"
      patterns:
        - "^Non-failsafe update needed for %{DATA:aruba.system.devicespec}. Please run the allow-unsafe-updates command"
        - "^Do not interrupt non-failsafe update for %{GREEDYDATA:aruba.system.devicespec}"
  - grok:
      if: "['7212','7213'].contains(ctx.event?.code)"
      tag: system_event_7210_7211
      field: "message"
      description: "A device update is about to start | was successful or in some cases was successfully arranged to be performed later"
      patterns:
        - "^(Starting update|Update successful) for %{DATA:aruba.system.devicespec} from version %{DATA:service.version} to version %{GREEDYDATA:service.target.version}"
  - grok:
      if: "['7214','7215','7217'].contains(ctx.event?.code)"
      tag: system_event_7214_7215_7217
      field: "message"
      description: "A device update failed | was postponed until after an automatic reset of its module | Unable to update non-redundant power supply"
      patterns:
        - "^Update failed for %{GREEDYDATA:aruba.system.devicespec}"
        - "^Deferred update for %{DATA:aruba.system.devicespec} will be performed after an automatic module reset"
        - "^Insufficient redundant power is available to update %{GREEDYDATA:aruba.system.devicespec}"
  - grok:
      if: "ctx.event?.code == '7216'"
      tag: system_event_7216
      field: "message"
      description: "Indicates the approximate remaining update time for a module"
      patterns: 
        - "^Approximately %{NUMBER:aruba.system.time:long} minute\\(s\\) remaining to update %{NUMBER:aruba.system.numdevs:long} device\\(s\\) on %{GREEDYDATA:aruba.system.modspec}"
  - dissect:
      if: "ctx.event.code == '7219'"
      tag: system_event_7219
      field: "message"
      description: "Failed to write-protect a module or device"
      pattern: "Failed to write-protect %{aruba.system.devicespec} (pass %{aruba.system.pass})"

  # BFD events (73xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/BFD.htm
  - grok:
      if: "['7305','7306'].contains(ctx.event?.code)"
      tag: bfd_event_7305_7306
      field: "message"
      description: "Event raised when BFD echo is enabled/disable on an interface"
      patterns:
        - "^BFD echo was (en|dis)abled on interface %{GREEDYDATA:aruba.interface.id}"
  - grok:
      if: "['7307','7308','7309','7315'].contains(ctx.event?.code)"
      tag: bfd_event_7307_7308_7309_7315
      field: "message"
      description: "Event raised when BFD echo is enabled/disable on an interface | administratively down | becomes unidirectional"
      patterns:
        - "^BFD session is (up|down|administratively down|unidirectional). session_id=%{DATA:aruba.session.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}"
  - grok:
      if: "['7311', '7312'].contains(ctx.event?.code)"
      tag: bfd_event_7311_7312
      field: "message"
      description: "Port can[not] forward BFD traffic"
      patterns:
        - "^Port %{DATA:aruba.port} (can|can not) forward BFD traffic"
  - dissect:
      if: "ctx.event.code == '7314'"
      tag: bfd_event_7314
      field: "message"
      description: "Event raised when an Echo session is created without a valid echo_source IP address configured"
      pattern: "The echo function for the BFD session %{aruba.session.id} will not become active until a global echo source IP address is configured"
  - dissect:
      if: "ctx.event.code == '7316'"
      tag: bfd_event_7316
      field: "message"
      description: "Event raised when BFD echo is enabled on a Tunnel interface"
      pattern: "BFD echo cannot be enabled on tunnels. interface=%{aruba.interface.id}"
  - grok:
      if: "ctx.event.code == '7318'"
      tag: bfd_event_7318
      field: "message"
      description: "Event raised when SRC or DST IP Version doesn't match the session's IP Version"
      patterns:
        - "^IP Version mismatch for BFD. session_id=%{DATA:aruba.session.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}, from=%{DATA:aruba.bfd.from}, ip_version=%{DATA:aruba.bfd.ip_version}, Invalid IP address: %{IPORHOST:aruba.bfd.invalid_ip}"
  - dissect:
      if: "ctx.event.code == '7319'"
      tag: bfd_event_7319
      field: "message"
      description: "Event raised when a BFD single-hop session source port is a loopback"
      pattern: "BFD single-hop is not supported on interface %{aruba.interface.id}"
  - dissect:
      if: "ctx.event.code == '7320'"
      tag: bfd_event_7320
      field: "message"
      description: "Event raised when a BFD session specifies an interval for a protocol that does not support override"
      pattern: "BFD session interval override not supported for protocol %{aruba.bfd.from}"
  - grok:
      if: "ctx.event.code == '7321'"
      tag: bfd_event_7321
      field: "message"
      description: "Event raised when a BFD session specifies an interval outside the specified bounds"
      patterns:
        - "^BFD session %{DATA:aruba.bfd.direction} interval override of %{NUMBER:aruba.bfd.requested_interval:long} ms is out of bounds for protocol %{DATA:aruba.bfd.from}, using %{NUMBER:aruba.bfd.applied_interval:long} ms instead"

  # IP-SLA events (740x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IPSLA.htm
  - grok:
      if: "['7401','7402','7403','7404','7405','7406','7407','7408'].contains(ctx.event?.code)"
      tag: ipsla_7401_7402_7403_7404_7405_7406_7407_7408
      field: "message"
      description: "Event raised for IP-SLA events"
      patterns:
        - "^%{IP_SLA_SESSION_NAME} state changed to( failed)? %{DATA:aruba.state} due to reason %{GREEDYDATA:event.reason}"
        - "^%{IP_SLA_SESSION_NAME} failed to (bind source|initialize socket), reason:%{GREEDYDATA:event.reason}"
        - "^%{IP_SLA_SESSION_NAME}: %{GREEDYDATA:event.action}"
        - "^%{IP_SLA_SESSION_NAME} is incomplete to schedule"
        - "^%{IP_SLA_SESSION_NAME} interface %{DATA:aruba.interface.id} is( not)? ready and SLA is (disabled|enabled)"
      pattern_definitions:
        IP_SLA_SESSION_NAME: "IP-SLA (session:)?%{DATA:aruba.ip_sla.name}"

  # CPU_RX Events (75xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CPU_RX.htm
  - dissect:
      field: message
      tag: cpu_rx_event_7501
      description: "Event raised when a kernel filter cannot be created or deleted"
      if: "ctx.event?.code == '7501'"
      pattern: "Kernel filter \"%{event.action}\" failed on unit %{aruba.instance.id} for %{aruba.cpu_rx.filter_description}"
  - dissect:
      field: message
      tag: cpu_rx_event_7502
      description: "Event raised when a kernel filter cannot be created because all filters are in use"
      if: "ctx.event?.code == '7502'"
      pattern: "Cannot create kernel filter on unit %{aruba.instance.id} for %{aruba.cpu_rx.filter_description}. All filters are in use. Configuring fewer per-port features can help with this issue."

  # VSX Sync events (760x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VSX_SYNC.htm
  - grok:
      field: message
      tag: vsx_sync_event_7601_7602_7603
      description: "Logs event when error in synchronizing config between two VSX peers | when there is an update for config sync | when config is copied to startup-config on any of the VSX peer"
      if: "['7601','7602','7603'].contains(ctx.event?.code)"
      patterns: 
        - "(error|update|persistence): %{GREEDYDATA:aruba.instance.id}"

  # Certificate management events (77xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CERTMGR.htm
  - grok:
      if: "['7701', '7702', '7703', '7704'].contains(ctx.event?.code)"
      tag: cm_event_7701_7702_7703_7704
      field: "message"
      description: "Event raised when a ta profile is created/delete | Leaf certificate import/deleted"
      patterns:
        - "^(TA Profile|Leaf certificate) %{DATA:aruba.cm.cert_name} (created|deleted|imported|deleted)"
  - grok:
      if: "ctx.event.code == '7705'"
      tag: cm_event_7705
      field: "message"
      description: "Event raised when an installed certifiate will expire within 60 days"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} will expire within %{NUMBER:aruba.cm.days:long} days"
  - grok:
      if: "['7706', '7707', '7708'].contains(ctx.event?.code)"
      tag: cm_event_7706_7707_7708
      field: "message"
      description: "Event raised when an installed certifiate is not yet past its start date/expired or is verified"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} has not yet reached its start date"
        - "^Certificate %{DATA:aruba.cm.cert_name} has expired and can no longer be used"
        - "^Certificate %{DATA:aruba.cm.cert_name} verified and accepted"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event.code == '7709'"
      tag: cm_event_7709
      field: "message"
      description: "Event raised when a certificate chain is rejected"
      patterns: 
        - "^Certificate %{DATA:aruba.cm.cert_name} rejected due to verification failure \\(%{GREEDYDATA:event.reason}\\)"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['7710', '7711', '7712'].contains(ctx.event?.code)"
      tag: cm_event_7710_7711_7712
      field: "message"
      description: "Event raised when a (self-signed) certificate signing request is created on the switch | invalid certificate association is made"
      patterns:
        - "^(Certificate signing request|Self-signed certificate) %{DATA:aruba.cm.cert_name} created"
        - "^Application association with the %{DATA:aruba.cm.cert_name} certificate is not permitted"
  - grok:
      if: "ctx.event.code == '7713'"
      tag: cm_event_7713
      field: "message"
      description: "Event raised when a certificate is verified due to optional OCSP enforcement"
      patterns: 
        - "^Certificate %{DATA:aruba.cm.cert_name} failed OCSP verification \\(%{DATA:aruba.status}\\), but was accepted because OCSP enforcement is set to optional."
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['7714', '7715'].contains(ctx.event?.code)"
      tag: cm_event_7714_7715
      field: "message"
      description: "Event raised when CA certificates were [successfully|could not be] downloaded from an EST server"
      patterns:
        - "^(CA certificates successfully downloaded|Failed to download CA certificates) from EST server %{GREEDYDATA:aruba.cm.cert_name}"
  - grok:
      if: "['7716', '7717', '7718', '7719'].contains(ctx.event?.code)"
      tag: cm_event_7716_7717_7718_7719
      field: "message"
      description: "Certificate is successfully enrolled with EST | Certificate (re)enrollment with an EST server fails | Certificate is successfully reenrolled with EST"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} successfully (re)?enrolled by EST server %{GREEDYDATA:aruba.cm.est_name}"
        - "^Failed to (re)?enroll certificate %{DATA:aruba.cm.cert_name} with EST server %{GREEDYDATA:aruba.cm.est_name}"
  - grok:
      if: "['7720', '7721'].contains(ctx.event?.code)"
      tag: cm_event_7720_7721
      field: "message"
      description: "A signer certifiate is not set for signing | An installed certifiate is invalid or malformed"
      patterns:
        - "^Certificate %{DATA:aruba.cm.cert_name} is (not set for signing purpose|invalid or malformed)"

  # External Storage events (78xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/EXTERNAL-STORAGE.htm
  - grok:
      field: message
      tag: external_storage_event_7801_7802
      description: "Event raised when a share fails to mount | dismount"
      if: "['7801','7802'].contains(ctx.event?.code)"
      patterns:
        - "^Share %{DATA:aruba.storage.name} (dis)?mount failure"
  - grok:
      field: message
      tag: external_storage_event_7803_7804
      description: "Event raised when a share mounts | dismounts"
      if: "['7803','7804'].contains(ctx.event?.code)"
      patterns:
        - "^Share %{DATA:aruba.storage.name} is (dis)?mounted"
  - dissect:
      field: message
      tag: external_storage_event_7805
      description: "Event raised when a mount times out or aborts due to a config change"
      if: "ctx.event?.code == '7805'"
      pattern: "Share %{aruba.storage.name} mount is aborted"
  - dissect:
      field: message
      tag: external_storage_event_7806
      description: "USB device mounted or unmounted."
      if: "ctx.event?.code == '7806'"
      pattern: "USB device %{aruba.status}."

  # Power over Ethernet events (79xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POE.htm
  - dissect:
      if: "ctx.event?.code == '7901'"
      tag: poe_event_7901
      field: "message"
      description: "Detected powered device on interface. Type, Class."
      pattern: "Detected powered device on interface %{aruba.interface.name}. Type:%{aruba.poe.pd_type}, Class:%{aruba.poe.pd_class}"
  - grok:
      if: "['7902','7903','7905','7906','7907','7909','7911','7912','7913','7916','7924'].contains(ctx.event?.code)"
      tag: poe_event_7902_7903_7905_7906_7907_7909_7911_7912_7913_7916_7924
      field: "message"
      patterns:
        - "interface %{GREEDYDATA:aruba.interface.name}"
  - dissect:
      if: "ctx.event?.code == '7904'"
      tag: poe_event_7904
      field: "message"
      description: "Powered device fault on interface. Fault type."
      pattern: "Powered device fault on interface %{aruba.interface.name}. Fault type %{aruba.poe.fault_type}"
  - dissect:
      if: "ctx.event?.code == '7908'"
      tag: poe_event_7908
      field: "message"
      description: "Detected dual signature powered device on interface. Type, ClassA, ClassB"
      pattern: "Detected dual signature powered device on interface %{aruba.interface.name}. Type:%{aruba.poe.pd_type}, ClassA:%{aruba.poe.paira_class}, ClassB:%{aruba.poe.pairb_class}"
  - dissect:
      if: "ctx.event?.code == '7910'"
      tag: poe_event_7910
      field: "message"
      description: "Dual signature powered device fault on interface. Fault type."
      pattern: "Dual signature powered device fault on interface %{aruba.interface.name} pair %{aruba.poe.pair}. Fault type %{aruba.poe.fault_type}"
  - dissect:
      if: "ctx.event?.code == '7914'"
      tag: poe_event_7914
      field: "message"
      description: "Powered device got class demoted on interface"
      pattern: "Powered device got class demoted on interface %{aruba.interface.name}. Requested_class %{aruba.poe.req_class} Assigned_class %{aruba.poe.assigned_class}"
  - dissect:
      if: "ctx.event?.code == '7915'"
      tag: poe_event_7915
      field: "message"
      description: "Dual signature powered device got class demoted on interface"
      pattern: "Dual signature powered device got class demoted on interface %{aruba.interface.name}. Requested_classA %{aruba.poe.req_class_a} Requested_classB %{aruba.poe.req_class_b} Assigned_classA %{aruba.poe.assigned_class_a} Assigned_classB %{aruba.poe.assigned_class_b}"
  - grok:
      if: "['7917', '7926'].contains(ctx.event?.code)"
      tag: poe_event_7917_7926
      field: "message"
      description: "PoE usage exceeded threshold limit | PoE usage is below threshold"
      patterns: 
        - "^PoE usage (exceeded|is below) threshold( limit)? of %{GREEDYDATA:aruba.limit.threshold}"
  - grok:
      if: "['7918', '7919'].contains(ctx.event?.code)"
      tag: poe_event_7918_7919
      field: "message"
      description: "PoE controller got into fault | reset"
      patterns:
        - "^PoE controller %{DATA:aruba.poe.cntrl_name} got"
  - dissect:
      if: "ctx.event?.code == '7920'"
      tag: poe_event_7920
      field: "message"
      description: "Powered device got class promoted"
      pattern: "Powered device got class promoted on interface %{aruba.interface.name}.Requested_class %{aruba.poe.req_class} Assigned_class %{aruba.poe.assigned_class}"
  - dissect:
      if: "ctx.event?.code == '7921'"
      tag: poe_event_7921
      field: "message"
      description: "Dual signature powered device got class promoted"
      pattern: "Dual signature powered device got class promoted on interface %{aruba.interface.name}.Requested_classA %{aruba.poe.req_class_a} Requested_classB %{aruba.poe.req_class_b} Assigned_classA %{aruba.poe.assigned_class_a} Assigned_classB %{aruba.poe.assigned_class_b}"
  - dissect:
      if: "ctx.event?.code == '7922'"
      tag: poe_event_7922
      field: "message"
      description: "Powered device is drawing power more than its class"
      pattern: "Powered device is drawing power more than its class on interface %{aruba.interface.name}, type:%{aruba.poe.pd_type} class:%{aruba.poe.pd_class} power:%{aruba.power.value} is exceeding the max average power of the PD class. Check the PD max power draw, cabling type and length to improve interoperability"
  - grok:
      if: "['7923','7931','7932','7934','7935','7936','7937','7938','7940'].contains(ctx.event?.code)"
      tag: poe_event_7923_7931_7932_7934_7935_7936_7937_7938_7940
      field: "message"
      patterns:
        - "interface %{DATA:aruba.interface.name} "
  - dissect:
      if: "ctx.event?.code == '7925'"
      tag: poe_event_7925
      field: "message"
      description: "Dual signature powered device is drawing power more than its class"
      pattern: "Dual signature powered device is drawing power more than its class on interface %{aruba.interface.name}, type:%{aruba.poe.pd_type} classA:%{aruba.poe.paira_class} classB:%{aruba.poe.pairb_class} power:%{aruba.power.value}"
  - dissect:
      if: "ctx.event?.code == '7927'"
      tag: poe_event_7927
      field: "message"
      description: "PoE drawn power is more than available PoE power"
      pattern: "Total power drawn: %{aruba.power.value}W by powered device is exceeding the total available PoE power:%{aruba.power.available}W. Check the PD max power draw, cabling type and length to avoid system crowbar."
  - dissect:
      if: "ctx.event?.code == '7928'"
      tag: poe_event_7928
      field: "message"
      description: "Powered device invalid signature indication"
      pattern: "Powered device invalid signature indication on interface %{aruba.interface.name}."
  - dissect:
      if: "ctx.event?.code == '7933'"
      tag: poe_event_7933
      field: "message"
      description: "Subsystem came up with quick PoE"
      pattern: "Subsystem %{aruba.poe.subsys_name} came up with quick PoE"
  - dissect:
      if: "ctx.event?.code == '7939'"
      tag: poe_event_7939
      field: "message"
      description: "Powered device requested power down on interface."
      pattern: "Powered device requested power down on interface %{aruba.interface.name} %{aruba.poe.duration}"

  # Bluetooth Management events (800x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/BLUETOOTH_MGMT.htm
  - grok:
      if: "['8001', '8003'].contains(ctx.event?.code)"
      tag: btm_event_8001
      field: "message"
      description: "Event raised when Bluetooth is enabled or disabled | receives signal for Bluetooth adapter"
      patterns:
        - "^Bluetooth (has been|adapter) %{GREEDYDATA:event.action}"
  - grok:
      if: "ctx.event.code == '8004'"
      tag: btm_event_8004
      field: "message"
      description: "Event raised when btd receives signal for Bluetooth device event"
      patterns:
        - "^Bluetooth device %{DATA:event.action}: %{MAC:client.mac}"

  # VXLAN events (81xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VXLAN.htm
  - grok:
      if: "['8101','8102','8103','8104'].contains(ctx.event?.code)"
      tag: vxlan_event_8101_8102_8103_8104
      field: "message"
      description: "Event raised when VNI creation fails | when VNI created | when VNI deletion fails | when VNI is deleted"
      patterns:
        - "^VNI id %{DATA:aruba.vxlan.vni_id} "
  - grok:
      if: "['8105','8106','8107'].contains(ctx.event?.code)"
      tag: vxlan_event_8105_8106_8107
      field: "message"
      description: "Event raised when Vtep-Peer is created | has been deleted | deletion fails"
      patterns:
        - "^Vtep-Peer %{DATA:aruba.vxlan.vtep_peer} "
  - grok:
      if: "['8108','8109'].contains(ctx.event?.code)"
      tag: vxlan_event_8108_8109
      field: "message"
      description: "Event raised when Access-Port has been created | has been deleted"
      patterns:
        - "^Access-Port with vlan %{DATA:network.vlan.id} and port %{DATA:aruba.port} has been created"
        - "^Access-Port with port %{DATA:aruba.port} and vlan %{DATA:network.vlan.id} has been deleted"
  - grok:
      if: "['8110','8111','8112','8113'].contains(ctx.event?.code)"
      tag: vxlan_event_8110_8111_8112_8113
      field: "message"
      description: "Event raised when Vtep-Peer status is changed to operational | to configuration error | to no hardware resources | to activating"
      patterns:
        - "^Vtep-Peer %{DATA:aruba.vxlan.vtep} state is"
  - grok:
      if: "['8114','8115','8116','8117'].contains(ctx.event?.code)"
      tag: vxlan_event_8114_8115_8116_8117
      field: "message"
      description: "Event raised when a VxLAN tunnel is deleted from hardware | has its deletion deferred by L3PD | has its deferred deletion canceled"
      patterns:
        - "^Tunnel %{IP:client.ip} (added|deleted|delete|deferred)"
  - dissect:
      if: "ctx.event?.code == '8119'"
      tag: vxlan_event_8119
      field: "message"
      description: "Event raised when nexthop operation add/delete/modify is triggered on a vtep-peer"
      pattern: "Nexthop %{event.action} received for tunnel %{aruba.vxlan.vtep_peer}"
  - dissect:
      if: "ctx.event?.code == '8120'"
      tag: vxlan_event_8120
      field: "message"
      description: "Event raised when Vtep-Peer forwarding_state is changed"
      pattern: "Tunnel %{aruba.vxlan.vtep_peer} forwarding_state is %{aruba.state}"
  - dissect:
      if: "ctx.event?.code == '8121'"
      tag: vxlan_event_8121
      field: "message"
      description: "Event raised when unsupported underlay port configured as tunnel nexthop"
      pattern: "Unsupported underlay port %{aruba.port} configured for tunnel %{aruba.vxlan.vtep_peer}"

  # DHCPv4 Snooping events (82xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DHCPv4-SNOOPING.htm
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8201
      description: "Log event when packet dropped while server packet received on untrusted port."
      if: "ctx.event?.code == '8201'"
      patterns:
        - "^Server %{IP:server.ip} packet received on untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8202
      description: "Log event when client packet dropped while packet destined to untrusted port."
      if: "ctx.event?.code == '8202'"
      patterns:
        - "^Client packet destined to untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8203
      description: "Log event when packet dropped while packet received from unauthorized server."
      if: "ctx.event?.code == '8203'"
      patterns:
        - "^Packet received from unauthorized server %{IP:server.ip} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8204
      description: "Log event when client packet received with untrusted relay info."
      if: "ctx.event?.code == '8204'"
      patterns:
        - "^Received untrusted relay info from client %{MAC:client.mac} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8205
      description: "Log event when client address not equal to source MAC."
      if: "ctx.event?.code == '8205'"
      patterns:
        - "^Client address %{MAC:client.mac} not equal to source MAC %{MAC:source.mac} detected on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8206
      description: "Log event when release packet received on incorrect port."
      if: "ctx.event?.code == '8206'"
      patterns:
        - "^Binding for %{IP:client.ip}:%{MAC:client.mac} exists on port %{DATA:aruba.port}. Dropping release request received for the binding on %{DATA:aruba.dhcp.new_port}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8207
      description: "Log event when dynamic binding for a port was replaced with a manual binding."
      if: "ctx.event?.code == '8207'"
      patterns:
        - "^The dynamic binding for %{MAC:client.mac} on port %{DATA:aruba.port} was replaced with a manual binding.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8208
      description: "Log event when drop client request for already assigned ip."
      if: "ctx.event?.code == '8208'"
      patterns:
        - "^Drop request from %{MAC:client.mac} for already assigned address %{IP:client.ip}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8209
      description: "Log event when drop server offer for already assigned ip."
      if: "ctx.event?.code == '8209'"
      patterns:
        - "^Drop offer from %{IP:server.ip} of already assigned address %{IP:client.ip} to %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8210
      description: "Log event when drop server offer for illegal ip."
      if: "ctx.event?.code == '8210'"
      patterns:
        - "^Drop offer from %{IP:server.ip} of %{IP:client.ip} address is illegal.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8211
      description: "Log event when binding limit reached on port."
      if: "ctx.event?.code == '8211'"
      patterns:
        - "^Maximum bindings limit reached on port %{DATA:aruba.port}, dropping request from %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8213
      description: "Log event when all dynamic binding entries on a port are cleared."
      if: "ctx.event?.code == '8213'"
      patterns:
        - "^Dynamic binding entries on the port %{DATA:aruba.port} were cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8214
      description: "Log event when all dynamic binding entries on a vlan are cleared."
      if: "ctx.event?.code == '8214'"
      patterns:
        - "^Dynamic binding entries on the VLAN %{DATA:network.vlan.id} were cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8215
      description: "Log event when a specific dynamic binding entry on a vlan is cleared."
      if: "ctx.event?.code == '8215'"
      patterns:
        - "^Dynamic binding entry with ip %{IP:client.ip} on the VLAN %{DATA:network.vlan.id} was cleared.$"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8216
      description: "Log event when failed to import dynamic ip binding entries from external storage."
      if: "ctx.event?.code == '8216'"
      patterns:
        - "^Failed to import dynamic ip binding entries from external storage. volume: %{DATA:aruba.dhcp.volume_name}, filename: %{DATA:file.name}.$"
  - dissect:
      field: message
      tag: dhcpv4_snoop_event_8217
      description: "Log event when failed to import dynamic ip binding entries from local storage."
      if: "ctx.event?.code == '8217'"
      pattern: "Failed to import dynamic ip binding entries from local storage. filepath: %{file.path}."
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8219_8220
      description: "Log event when dynamic ip binding entries from external storage are successfully imported | from local storage are successfully imported"
      if: "['8219','8220'].contains(ctx.event?.code)"
      patterns:
        - "^Successfully imported %{DATA:aruba.dhcp.bindings_imported} dynamic ip binding entries from (external|local) storage.( volume: %{DATA:aruba.dhcp.volume_name}, filename: %{GREEDYDATA:file.name}.)?"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8221_8222_8223_8224
      description: "Log event when a client receives IP from DHCP server along with static attributes. | when a client releases | when a client's lease period expires | when a client's static attributes are updated"
      if: "['8221','8222','8223','8224'].contains(ctx.event?.code)"
      patterns:
        - "^Client %{MAC:client.mac} on vlan %{DATA:network.vlan.id}, port %{DATA:aruba.port} received %{IP:client.ip} from server %{IP:server.ip} with lease %{DATA:aruba.dhcp.lease}. Nameserver:%{IP:aruba.dhcp.nameserver_ip}, Gateway:%{IP:aruba.dhcp.gateway_ip}."
        - "^Client %{MAC:client.mac} on vlan %{DATA:network.vlan.id}, port %{DATA:aruba.port} (released|lease period expired for|with) %{IP:client.ip}.( Client attributes updated: Gateway %{IP:aruba.dhcp.gateway_ip}, Nameserver %{IP:aruba.dhcp.nameserver_ip}, Lease period %{GREEDYDATA:aruba.dhcp.lease}.)?"
  - grok:
      field: message
      tag: dhcpv4_snoop_event_8225_8226
      description: "DHCP server packet received on an untrusted port | An unauthorized server detected on a trusted port"
      if: "['8225','8226'].contains(ctx.event?.code)"
      patterns:
        - "^DHCPv4-Snooping dropped DHCP %{DATA:aruba.dhcp.message_type} packet received on untrusted port %{DATA:aruba.port} from %{IP:server.ip}"
        - "^DHCPv4-Snooping dropped DHCP %{DATA:aruba.dhcp.message_type} packet received from unauthorized server %{IP:server.ip} on trusted port %{GREEDYDATA:aruba.port}"

  # DHCPv6 snooping events (83xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DHCPv6-SNOOPING.htm
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8301
      description: "Log event when packet dropped while server packet received on untrusted port."
      if: "ctx.event?.code == '8301'"
      patterns:
        - "^Server %{IPV6:server.ip} packet received on untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8302
      description: "Log event when client packet dropped while packet destined to untrusted port."
      if: "ctx.event?.code == '8302'"
      patterns:
        - "^Client packet destined to untrusted port %{DATA:aruba.port} dropped.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8303
      description: "Log event when packet dropped while packet received from unauthorized server."
      if: "ctx.event?.code == '8303'"
      patterns:
        - "^Packet received from unauthorized server %{IPV6:server.ip} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8304
      description: "Log event when client packet received with untrusted relay info."
      if: "ctx.event?.code == '8304'"
      patterns:
        - "^Received untrusted relay info from client %{MAC:client.mac} on port %{DATA:aruba.port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8305
      description: "Log event when release packet received on incorrect port."
      if: "ctx.event?.code == '8305'"
      patterns:
        - "^Binding for %{IPV6:client.ip}:%{MAC:client.mac} exists on port %{DATA:aruba.port}. Dropping release request received for the binding on %{DATA:aruba.dhcp.new_port}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8306
      description: "Log event when dynamic binding for a port was replaced with a manual binding."
      if: "ctx.event?.code == '8306'"
      patterns:
        - "^The dynamic binding for %{MAC:client.mac} on port %{DATA:aruba.port} was replaced with a manual binding.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8307
      description: "Log event when drop client request for already assigned ip."
      if: "ctx.event?.code == '8307'"
      patterns:
        - "^Drop request from %{MAC:client.mac} for already assigned address %{IPV6:client.ip}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8308
      description: "Log event when binding limit reached on port."
      if: "ctx.event?.code == '8308'"
      patterns:
        - "^Maximum bindings limit reached on port %{DATA:aruba.port}, dropping request from %{MAC:client.mac}.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8310
      description: "Log event when all dynamic binding entries on a port are cleared."
      if: "ctx.event?.code == '8310'"
      patterns:
        - "^Dynamic binding entries on the port %{DATA:aruba.port} were cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8311
      description: "Log event when all dynamic binding entries on a vlan are cleared."
      if: "ctx.event?.code == '8311'"
      patterns:
        - "^Dynamic binding entries on the VLAN %{DATA:network.vlan.id} were cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8312
      description: "Log event when a specific dynamic binding entry on a vlan is cleared."
      if: "ctx.event?.code == '8312'"
      patterns:
        - "^Dynamic binding entry with ip %{IP:client.ip} on the VLAN %{DATA:network.vlan.id} was cleared.$"
  - grok:
      field: message
      tag: dhcpv6_snooping_event_8313
      description: "Log event when import of dynamic binding entries from external storage is failed."
      if: "ctx.event?.code == '8313'"
      patterns:
        - "^Failed to import dynamic ip binding entries from external storage. volume: %{DATA:aruba.dhcp.volume_name}, filename: %{DATA:file.name}.$"
  - dissect:
      field: message
      tag: dhcpv6_snooping_event_8314
      description: "Log event when import of dynamic binding entries from local storage is failed."
      if: "ctx.event?.code == '8314'"
      pattern: "Failed to import dynamic ip binding entries from local storage. filepath: %{file.path}."
  - grok:
      field: message
      tag: dhcpv6_snoop_event_8316_8317
      description: "Log event when dynamic ip binding entries from external storage are successfully imported | from local storage are successfully imported"
      if: "['8316','8317'].contains(ctx.event?.code)"
      patterns:
        - "^Successfully imported %{DATA:aruba.dhcp.bindings_imported} dynamic ip binding entries from (external|local) storage.( volume: %{DATA:aruba.dhcp.volume_name}, filename: %{GREEDYDATA:file.name}.)?"
  - grok:
      field: message
      tag: dhcpv6_snoop_event_8318_8319_8320_8321
      description: "Log event when a client receives IPv6 address from DHCP server along with static attributes | when a client releases IPv6 address | when a client's lease period expires | when a client's static attributes are updated"
      if: "['8318','8319','8320','8321'].contains(ctx.event?.code)"
      patterns:
        - "^Client %{MAC:client.mac} on vlan %{DATA:network.vlan.id}, port %{DATA:aruba.port} received %{IP:client.ip} from server %{IP:server.ip} with lease %{DATA:aruba.dhcp.lease}. Nameserver:%{IP:aruba.dhcp.nameserver_ip}."
        - "^Client %{MAC:client.mac} on vlan %{DATA:network.vlan.id}, port %{DATA:aruba.port} (released|lease period expired for|with) %{IP:client.ip}.( Client attributes updated: Gateway %{IP:aruba.dhcp.gateway_ip}, Nameserver %{IP:aruba.dhcp.nameserver_ip}, Lease period %{GREEDYDATA:aruba.dhcp.lease}.)?"
  - grok:
      field: message
      tag: dhcpv6_snoop_event_8322_8323
      description: "Packet dropped on an untrusted port | An unauthorized server detected on port"
      if: "['8322','8323'].contains(ctx.event?.code)"
      patterns:
        - "^DHCPv6-Snooping dropped DHCP %{DATA:aruba.dhcp.message_type} packet received on untrusted port %{DATA:aruba.port} from %{IP:server.ip}"
        - "^DHCPv6-Snooping dropped DHCP %{DATA:aruba.dhcp.message_type} packet received from unauthorized server %{IP:server.ip} on trusted port %{GREEDYDATA:aruba.port}"

  # ND snooping events (840x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ND-SNOOPING.htm
  - grok:
      field: message
      tag: ND_snooping_event_8402_8403_8404_8405
      description: ""
      if: "['8402','8403','8404','8405'].contains(ctx.event?.code)"
      patterns:
        - "^Dynamic binding entries on the (port %{DATA:aruba.port}|VLAN %{DATA:network.vlan.id}) were cleared."
        - "^Dynamic binding entry with ip %{IP:server.ip} on the VLAN %{DATA:network.vlan.id} was cleared."
        - "^ND packet of type=%{DATA:aruba.nd.type} received on port:%{DATA:aruba.port} vlan:%{DATA:network.vlan.id} with src_mac:%{MAC:source.mac} is %{DATA:aruba.status}. count=%{NUMBER:aruba.count:long}"

  # ERPS Events (85xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ERPS.htm
  - dissect:
      field: message
      tag: erps_event_8501
      description: "Log event when RAPS messages are not received for a certain time interval"
      if: "ctx.event?.code == '8501'"
      pattern: "Expected R-APS packets not received on %{aruba.interface.id} in ring %{aruba.erps.ring_id} with control VLAN %{network.vlan.id}"
  - grok:
      field: message
      tag: erps_event_8502
      description: "Log event when a ring misconfiguration happens"
      if: "ctx.event?.code == '8502'"
      patterns:
        - "^Misconfiguration detected on ring %{DATA:aruba.erps.ring_id} with control VLAN %{DATA:network.vlan.id}. Another node in the ring with mac %{MAC:client.mac} is also operating as an RPL owner"
  - dissect:
      field: message
      tag: erps_event_8503
      description: "Log state transition of ring instance"
      if: "ctx.event?.code == '8503'"
      pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to %{aruba.state}"
  - dissect:
      field: message
      tag: erps_event_8504
      description: "Log event when ring is configured with a non-L2 port"
      if: "ctx.event?.code == '8504'"
      pattern: "%{aruba.interface.name} is not an L2 port"
  - dissect:
      field: message
      tag: erps_event_8505
      description: "Log event when an interface which is already associated to a ring port is getting mapped to other ring port as well"
      if: "ctx.event?.code == '8505'"
      pattern: "%{aruba.interface.name} is already associated with %{aruba.port} of ERPS ring %{aruba.erps.ring_id}"
  - dissect:
      field: message
      tag: erps_event_8506
      description: "Log event when control-channel VLAN is part of the protected-vlans"
      if: "ctx.event?.code == '8506'"
      pattern: "Configured control-channel VLAN %{network.vlan.id} is already protected by ERPS ring %{aruba.erps.ring_id}, instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8507
      description: "Log event when control-channel VLAN overlaps with another control-channel of same ring"
      if: "ctx.event?.code == '8507'"
      pattern: "VLAN %{network.vlan.id} is already configured as control-channel for instance %{aruba.instance.id} of ring %{aruba.erps.ring_id}"
  - dissect:
      field: message
      tag: erps_event_8508
      description: "Log event when protected-vlan(s) overlap"
      if: "ctx.event?.code == '8508'"
      pattern: "Vlan %{network.vlan.id} is already part of the protected VLAN set of ring %{aruba.erps.ring_id} instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8510
      description: "Log event when parent-ring id is configured to be the same as sub-ring"
      if: "ctx.event?.code == '8510'"
      pattern: "Parent-ring %{aruba.erps.ring_id} is same as sub-ring"
  - dissect:
      field: message
      tag: erps_event_8511
      description: "Log event when VLAN from the protected-vlans list is already configured as control-channel VLAN"
      if: "ctx.event?.code == '8511'"
      pattern: "VLAN %{network.vlan.id} in the protected VLANs list is also configured as the control-channel"
  - dissect:
      field: message
      tag: erps_event_8512
      description: "Log event if the same ring port is configured as RPL port for more than one instance"
      if: "ctx.event?.code == '8512'"
      pattern: "%{aruba.port} is already configured as RPL port for instance %{aruba.instance.id}"
  - dissect:
      field: message
      tag: erps_event_8513
      description: "Log event if ring port which is also an ISL is being configured as RPL"
      if: "ctx.event?.code == '8513'"
      pattern: "RPL configuration is not allowed on ISL port %{aruba.interface.name}"
  - dissect:
      field: message
      tag: erps_event_8515
      description: "Log transition of state of ring instance to initializing and the reason for it"
      if: "ctx.event?.code == '8515'"
      pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to Initializing with reason %{event.reason}"

    # MSDP events (860x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MSDP.htm
  - grok:
      field: message
      tag: msdp_event_8601_through_8609
      description: "The following are the events related to MSDP"
      if: "['8601','8602','8603','8604','8605','8606','8607','8608','8609'].contains(ctx.event?.code)"
      patterns:
        - "^Router MSDP is %{DATA:aruba.status} on VRF %{GREEDYDATA:aruba.vrf.name}"
        - "^Forwarding state of interface %{DATA:aruba.interface.name} has been changed to %{GREEDYDATA:aruba.state}"
        - "^MSDP Peer %{IP:client.ip}\\(%{DATA:aruba.msdp.tcp_entity}\\) with connection source %{DATA:aruba.interface.name} has entered %{DATA:aruba.state} state"
        - "^Port %{DATA:aruba.port} is %{DATA:aruba.status} to MSDP Peer %{IP:client.ip}"
        - "^MSDP Peer %{IP:client.ip} is %{DATA:aruba.status} on VRF %{DATA:aruba.vrf.name}. Interface %{DATA:aruba.interface.name} is added to the Peer"
        - "^Start %{DATA:aruba.msdp.tcp_entity} role for MSDP peer %{IP:client.ip}"
        - "^Finish packet was received on MSDP Peer %{IP:client.ip}"
        - "^Failed to add SA Cache entry: S=%{IP:source.ip}, G=%{IP:aruba.msdp.grp_ip}, R=%{IP:aruba.msdp.rp_ip} for Peer %{IP:client.ip} as MSDP SA Cache Limit is reached"

    # Zero touch provisioning events (87xx)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ZTPD.htm
  - dissect:
      field: message
      tag: ztp_event_8718
      description: "Logs related to ztp configurations - TFTP IP received"
      if: "ctx.event?.code == '8718'"
      pattern: "ZTP: Received TFTP server %{server.ip} from dhcp server"
  - dissect:
      field: message
      tag: ztp_event_8719
      description: "Logs related to ztp configurations - TFTP IP received"
      if: "ctx.event?.code == '8719'"
      pattern: "ZTP: Received image file %{file.name} from dhcp server"
  - dissect:
      field: message
      tag: ztp_event_8720
      description: "Logs related to ztp configurations - Config filename received"
      if: "ctx.event?.code == '8720'"
      pattern: "ZTP: Received config file %{file.name} from dhcp server"
  - dissect:
      field: message
      tag: ztp_event_8721
      description: "Logs related to ztp configurations - HPE Aruba Networking Central FQDN or IPv4 received"
      if: "ctx.event?.code == '8721'"
      pattern: "ZTP: Received HPE Aruba Networking Central location %{aruba.ztp.central_location} from DHCP server"
  - dissect:
      field: message
      tag: ztp_event_8724
      description: "Logs related to ztp configurations - Aruba HTTP proxy FQDN or IPv4 received"
      if: "ctx.event?.code == '8724'"
      pattern: "ZTP: Received HTTP proxy location %{aruba.ztp.http_proxy_location} from DHCP server."
  - grok:
      field: message
      tag: ztp_event_8727_8728_8730
      description: "Log event when ZTP fails because of unexpected error in config/image file download | because of config/image file download error | because of unexpected error in config file download"
      if: "['8727','8728','8730'].contains(ctx.event?.code)"
      patterns:
        - "^ZTP service status changed to failed because %{DATA:file.name} file download encountered unexpected error.( Reason: %{GREEDYDATA:event.reasonreason})?"
        - "^ZTP service status changed to failed because %{DATA:file.name} file did not get downloaded."
  - dissect:
      field: message
      tag: ztp_event_8731
      description: "Log event when ZTP receives the Alternative HPE Aruba Networking Central location."
      if: "ctx.event?.code == '8731'"
      pattern: "Received Alternative HPE Aruba Networking Central location %{aruba.ztp.alt_aruba_central_loc} from dhcp server."


  # Hardware switch controller sync events (88xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/HSC-SYNCD.htm
  - grok:
      if: "['8802','8803'].contains(ctx.event?.code)"
      tag: hardware_event_8802_8803
      field: message
      description: "Log when physical port is [created|deleted] in hardware VTEP DB"
      patterns:
        - "^Physical Port %{DATA:aruba.port} is (created|deleted) (in|from) Hardware VTEP DB"
  - grok:
      if: "['8806','8807'].contains(ctx.event?.code)"
      tag: hardware_event_8806_8807
      field: "message"
      description: "Logs when local MAC learn on VLAN is [updated|removed] in the Hardwar VTEP DB"
      patterns:
        - "^Local MAC %{MAC:server.mac} learnt on VLAN %{DATA:network.vlan.id} is (updated in|removed from) the Hardware VTEP DB"
  - grok:
      if: "['8808','8809'].contains(ctx.event?.code)"
      tag: hardware_event_8808_8809
      field: "message"
      description: "Logs when VXLAN IP is [updated|removed] in the Hardware VTEP DB"
      patterns:
        - "^VXLAN IP %{IP:server.ip} is (updated in the|removed from Switch and) Hardware VTEP DB"
  - grok:
      if: "['8810','8811'].contains(ctx.event?.code)"
      tag: hardware_event_8810_8811
      field: "message"
      description: "Logs when unicast remote MAC learnt on VNI is [added|removed] to the switch"
      patterns:
        - "^Unicast Remote MAC %{MAC:destination.mac} learnt on VNI %{DATA:network.vlan.id} is (added to|removed from) the switch"
  - grok:
      if: "ctx.event?.code == '8812'"
      tag: hardware_event_8812
      field: "message"
      description: "Logs when tunnel is removed from Hardware VTEP DB"
      patterns:
        - "^Tunnel %{IP:server.ip} is removed from Hardware VTEP DB"

  # CDP events (89xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CDP.htm
  - grok:
      if: "['8903','8904','8905'].contains(ctx.event?.code)"
      tag: cdp_event_8903_8904_8905
      field: "message"
      description: "Log to indicate CDP neighbor addition/modification/deletion"
      patterns:
        - "^CDP neighbor %{MAC:source.mac} is (added|updated|deleted) on %{GREEDYDATA:aruba.interface.name}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"

  # SSH client events (900x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SSH_CLIENT.htm
  - grok:
      if: "['9001','9002','9003'].contains(ctx.event?.code)"
      tag: sshc_event_9001_9002_9003
      field: "message"
      description: "SSH client session is successful|denied"
      patterns:
        - "^Connection to SSH server %{IP:server.ip} on VRF %{DATA:aruba.vrf.name} is (established|successfully closed) for user %{DATA:user.name} over port %{GREEDYDATA:aruba.port}"
        - "^Connection to SSH server %{IP:server.ip} on VRF %{DATA:aruba.vrf.name} over port %{DATA:aruba.port} is denied"
        
  # Internal storage events (910x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/INTERNAL-STORAGE.htm
  - grok:
      if: "['9101','9102','9103','9104'].contains(ctx.event?.code)"
      tag: storage_event_9101_9102_9103_9104
      field: "message"
      description: "Event raised when there is a storage reporting failure | health deteriorates | change in storage endurance | failure is imminent"
      patterns:
        - "^Failed to report storage %{DATA:aruba.storage.name} details for module %{NUMBER:aruba.slot:long}. Error: %{GREEDYDATA:event.reason}"
        - "^Storage %{DATA:aruba.storage.name} (health alert. E|e)ndurance utilization at %{NUMBER:aruba.storage.usage:long}\\% in module %{NUMBER:aruba.slot:long}(. Failure is imminent. Please backup data)?"

  # Discovery and Capability Exchange (DCBx) events (92xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DCBX.htm
  - grok:
      field: message
      tag: dcbx_event_9203_9204
      if: "['9203','9204'].contains(ctx.event?.code)"
      description: "Log event when DCBX is enabled on the interface | when DCBX is disabled on the interface"
      patterns:
        - "^DCBX is (dis|en)abled on interface %{DATA:aruba.interface.name}$"
  - grok:
      field: message
      tag: dcbx_event_9205_9206
      if: "['9205','9206'].contains(ctx.event?.code)"
      description: "Log event when DCBX oper status is active on an interface | when DCBX oper status is inactive on an interface"
      patterns:
        - "^DCBX status (in)?active on interface %{DATA:aruba.interface.name}$"
  - grok:
      field: message
      tag: dcbx_event_9207_9208
      if: "['9207','9208'].contains(ctx.event?.code)"
      description: "Log event when PFC TLVs are active on an interface | when PFC TLVs are inactive on an interface"
      patterns:
        - "^PFC TLV status (in)?active on interface %{DATA:aruba.interface.name}$"
  - grok:
      field: message
      tag: dcbx_event_9209
      if: "ctx.event?.code == '9209'"
      description: "Log event when there is PFC TLV priority mismatch on an interface"
      patterns:
        - "^PFC TLV status priority mismatch on interface %{DATA:aruba.interface.name}$"

  # Port access roles events (930x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/ROLE.htm
  - grok:
      field: message
      tag: port_access_event_9301_9302
      if: "['9301','9302'].contains(ctx.event?.code)"
      description: "Logs an event if there are errors when applying a ClearPass role | maximum limit is reached while creating a Port Access Role"
      patterns:
        - "^Failed to apply ClearPass role - %{GREEDYDATA:event.reason}"
        # There is a spelling error in the documentation removing the matching for "Failed"
        - "to create the role - %{DATA:aruba.role}, maximum limit reached"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"

  # Port security events (940x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PORT-SECURITY.htm
  - grok:
      field: message
      tag: port_security_event_9401_9402
      if: "['9401','9402'].contains(ctx.event?.code)"
      description: "Log event when an intruder is detected on the port | sticky mac is moved to other port"
      patterns:
        - "^Client limit exceeded on port %{DATA:aruba.interface.name}, caused by an unauthorized client %{MAC:client.mac}"
        - "^Port security sticky client move violation triggered on port %{DATA:aruba.port} for client with MAC address %{MAC:client.mac}"

  # EVPN Events (95xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/EVPN.htm
  - grok:
      field: message
      tag: evpn_event_9501_9502
      description: "Logs EVPN EVI create|delete event."
      if: "['9501','9502'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN EVI: %{DATA:network.vlan.id} (created|deleted)"
  - dissect:
      field: message
      tag: evpn_event_9503
      description: "Logs EVPN RD update event for an EVI."
      if: "ctx.event?.code == '9503'"
      pattern: "EVPN RD: %{aruba.evpn.rd} updated for EVI: %{network.vlan.id}"
  - dissect:
      field: message
      tag: evpn_event_9504
      description: "Logs EVPN RD delete event for an EVI."
      if: "ctx.event?.code == '9504'"
      pattern: "EVPN RD deleted for EVI: %{network.vlan.id}"
  - grok:
      field: message
      tag: evpn_event_9505_9506_9507
      description: "Logs EVPN RT create|delete|update event for an EVI."
      if: "['9505','9506','9507'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN RT: %{DATA:aruba.evpn.rt} (created|deleted|updated) for EVI: %{DATA:network.vlan.id}$"
  - grok:
      field: message
      tag: evpn_event_9508_9509
      description: "Logs EVPN VTEP VNI add|delete event."
      if: "['9508','9509'].contains(ctx.event?.code)"
      patterns:
          - "^VNI: %{DATA:aruba.evpn.vni} is (added|deleted) for EVPN Peer VTEP: %{DATA:aruba.evpn.vtep_ip}$"
  - grok:
      field: message
      tag: evpn_event_9510
      description: "Logs EVPN static MAC conflict event."
      if: "ctx.event?.code == '9510'"
      patterns:
        - "^EVPN static MAC conflict %{DATA:event.action}, MAC: %{MAC:client.mac}, IP address: %{IP:client.ip}, VTEP: %{IP:aruba.evpn.vtep_ip}$"
  - grok:
      field: message
      tag: evpn_event_9511
      description: "Logs EVPN static MAC conflict event."
      if: "ctx.event?.code == '9511'"
      patterns:
        - "^EVPN static MAC conflict %{DATA:event.action}, MAC: %{MAC:client.mac}$"
  - grok:
      field: message
      tag: evpn_event_9512
      description: "Logs EVPN duplicate MAC dampening event."
      if: "ctx.event?.code == '9512'"
      patterns:
        - "^EVPN duplicate MAC dampening %{DATA:event.action}, MAC: %{MAC:client.mac}$"
  - grok:
      field: message
      tag: evpn_event_9513_9514
      description: "Logs EVPN VRF create|delete event."
      if: "['9513','9514'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN VRF: %{DATA:aruba.vrf.id} (created|deleted)"
  - dissect:
      field: message
      tag: evpn_event_9515
      description: "Logs EVPN VRF RD update event."
      if: "ctx.event?.code == '9515'"
      pattern: "EVPN RD: %{aruba.evpn.rd} updated for VRF: %{aruba.vrf.id}"
  - grok:
      field: message
      tag: evpn_event_9516_9517_9518
      description: "Logs EVPN VRF RT create|delete|update event."
      if: "['9516','9517','9518'].contains(ctx.event?.code)"
      patterns:
          - "^EVPN RT: %{DATA:aruba.evpn.rt} (created|deleted|updated) for VRF: %{DATA:aruba.vrf.id}$"
  - grok:
      field: message
      tag: evpn_event_9521_9522_9523_9524
      description: "Log event when EVPN VLAN Aware bundle created | bundle deleted | bundle disabled | bundle enabled"
      if: "['9521','9522','9523','9524'].contains(ctx.event?.code)"
      patterns:
        - "^EVPN VLAN Aware Bundle : %{DATA:package.name} (created|deleted|disable|enabled)"
  - dissect:
      field: message
      tag: evpn_event_9525
      description: "Log event when VLAN ethernet-tag is updated"
      if: "ctx.event?.code == '9525'"
      pattern: "EVPN EVI : %{network.vlan.id} updated with ethernet-tag : %{aruba.evpn.eth_tag}."
  - dissect:
      field: message
      tag: evpn_event_9526
      description: "Logs EVPN duplicate IP dampening event"
      if: "ctx.event?.code == '9526'"
      pattern: "EVPN duplicate IP dampening %{event.action}, MAC: %{client.mac}, IP address: %{client.ip}, VTEP: %{aruba.evpn.vtep_ip}"
  - dissect:
      field: message
      tag: evpn_event_9527
      description: "Logs EVPN RT update event for an EVI"
      if: "ctx.event?.code == '9527'"
      pattern: "EVPN EVI: RT %{aruba.evpn.rtt} %{aruba.evpn.rt} updated for EVI: %{network.vlan.id}"
  - grok:
      field: message
      tag: evpn_event_9529_9530
      description: "Log event when EVPN Ethernet Segment created | deleted"
      if: "['9529','9530'].contains(ctx.event?.code)"
      patterns:
        - "^EVPN Ethernet Segment with ESI %{DATA:aruba.evpn.esi} is (created|deleted)"

  # IP tunnels events (96xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IP_TUNNEL.htm
  - grok:
      if: "['9601','9602','9603','9604','9605','9606','9607','9608','9609','9610','9611','9612','9613','9614','9615','9616'].contains(ctx.event?.code)"
      tag: ip_tunnels_event_9601_9602_9603_9604_9605_9606_9607_9608_9609_9610_9611_9612_9613_9614_9615_9616
      field: "message"
      description: "Event raised when tunnel events"
      patterns:
        - "^Tunnel (Creation Failed|Created|Deletion Failed|Deleted) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}"
        - "^Tunnel (Source|Destination) IP Modified - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}"
        - "^Tunnel (TTL Modified|Modification Failed) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP} TTL \\(%{DATA:aruba.tunnel.ttl}\\)"
        - "^Tunnel MTU (Modified|Modification Failed) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP} MTU \\(%{DATA:aruba.mtu}\\)"
        - "^Tunnel Nexthop (Add Failed|Added|Modify Failed|Modified|Delete Failed|Deleted) - %{TUNNEL_NAME} %{TUNNEL_TYPE} %{TUNNEL_VFR} %{TUNNEL_LOCAL_IP} %{TUNNEL_REMOTE_IP}" 
      pattern_definitions:
        TUNNEL_NAME: "Name \\(%{DATA:aruba.tunnel.name}\\)"
        TUNNEL_TYPE: "Type \\(%{DATA:aruba.tunnel.type}\\)"
        TUNNEL_VFR: "VRF \\(%{DATA:aruba.vrf.id}\\)"
        TUNNEL_LOCAL_IP: "Local IP \\(%{IP:source.ip}\\)"
        TUNNEL_REMOTE_IP: "Remote IP \\(%{IP:destination.ip}\\)"

  # User-based tunnels events (97xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/USER_BASED_TUNNEL.htm

  - dissect:
      if: "ctx.event?.code == '9701'"
      tag: user_tunnel_event_9701
      field: "message"
      description: "Event raised when controller is selected as Active/Standby"
      pattern: 'Tunnel Node Server SAC (%{server.ip}) is selected as (%{aruba.state})'
  - grok:
      if: "['9702','9704'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9702_9704
      field: "message"
      description: "Event raised when heartbeat not received from a SAC | Event raised when SAC bootstapping to a SAC is re-initialized"
      patterns:
        - "^Tunnel Node Server (Heartbeat|SAC bootstrapping) has (failed for SAC|reinitialized to) \\(%{IP:server.ip}\\)"
  - grok:
      if: "['9703','9706'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9703_9706
      field: "message"
      description: "Event raised when keepalive not received from a UAC | Event raised when UAC node is down"
      patterns:
        - "^Tunnel Node Server keepalive has failed for UAC \\(%{IP:client.ip}\\)"
        - "^Tunnel Node Server UAC node is down \\(%{IP:client.ip}\\)"
  - grok:
      if: "['9707','9708','9711','9712'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9707_9708_9711_9712
      field: "message"
      description: "Event raised when user based tunnel is created | user based tunnel creation fails | user based tunnel state is [up|down]"
      patterns:
        - "Gre Key \\(%{DATA:aruba.tunnel.gre_key}\\) VRF \\(%{DATA:aruba.vrf.id}\\) Source IP \\(%{IP:source.ip}\\) Destination IP \\(%{IP:destination.ip}\\)"
        - "Tunnel Id \\(%{DATA:aruba.instance.id}\\) Gre Key \\(%{DATA:aruba.tunnel.gre_key}\\) Source IP \\(%{IP:source.ip}\\) Destination IP \\(%{IP:destination.ip}\\)"
  - grok:
      if: "['9709','9710'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9709_9710
      field: "message"
      description: "Event raised when user based tunnel is deleted | user based tunnel deletion fails"
      patterns:
        - "Tunnel Id \\(%{DATA:aruba.instance.id}\\)"
  - grok:
      if: "['9713','9714','9715','9716'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9713_9714_9715_9716
      field: "message"
      description: "Event raised when user is gets binded to tunnel (failed)? | user is gets binded to tunnel | user unbind to tunnel id failed"
      patterns:
        - "^Client \\(%{MAC:client.mac}\\) (is bound|binding|unbinding) to tunnel id \\(%{DATA:aruba.instance.id}\\)"
        - "^Client \\(%{MAC:client.mac}\\) is removed from tunnel"
  - grok:
      if: "ctx.event?.code == '9717'"
      tag: user_tunnel_event_9717
      field: "message"
      description: "Event raised when already binded user to a tunnel gets modified"
      patterns:
        - "^Client \\(%{MAC:client.mac}\\) is getting modified to bind to tunnel id \\(%{DATA:aruba.instance.id}\\)"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "ctx.event?.code == '9718'"
      tag: user_tunnel_event_9718
      field: "message"
      description: "Event raised when modification of already binded user to a tunnel fails"
      patterns:
        - "^Modification of Client \\(%{MAC:client.mac}\\) binded to \\(%{DATA:aruba.instance.id}\\) has failed"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['9719','9720'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9719_9720
      field: "message"
      description: "Event raised on NFD port creation | failure"
      patterns:
        - "^NFD port \\(%{DATA:aruba.tunnel.nfd_id}\\) (is created|creation) for client \\(%{MAC:client.mac}\\) vlan id \\(%{DATA:network.vlan.id}\\) port \\(%{DATA:aruba.port}\\) ecmp id \\(%{DATA:aruba.tunnel.ecmp_id}\\)"
  - grok:
      if: "['9721','9722'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9721_9722
      field: "message"
      description: "Event raised on NFD port deletion | fails"
      patterns:
        - "^NFD port \\(%{DATA:aruba.tunnel.nfd_id}\\) (is deleted|deletion) for ecmp id\\s?\\(%{DATA:aruba.tunnel.ecmp_id}\\)"
  - grok:
      if: "['9723','9724','9725','9726'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9723_9724_9725_9726
      field: "message"
      description: "Event raised on ECMP group creation | group creation failure | group deletion | group deletion fails"
      patterns:
        - "^ECMP group is (created|deleted) for ecmp id \\(%{DATA:aruba.tunnel.ecmp_id}\\)"
        - "^ECMP group (creation|deletion) for ecmp id\\s?\\(%{DATA:aruba.tunnel.ecmp_id}\\) has failed"
  - grok:
      if: "['9727','9728'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9727_9728
      field: "message"
      description: "Event raised when mdest rx user based tunnel is created | tunnel creation fails"
      patterns:
        - "Gre Key \\(%{DATA:aruba.tunnel.gre_key}\\) VLAN \\(%{DATA:network.vlan.id}\\) VRF \\(%{DATA:aruba.vrf.id}\\) Source IP \\(%{IP:source.ip}\\) Destination IP \\(%{IP:destination.ip}\\)"
  - grok:
      if: "['9729','9730'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9729_9730
      field: "message"
      description: "Event raised when mdest rx user based tunnel is deleted | tunnel deletion fails"
      patterns:
        - "Tunnel Id \\(%{DATA:aruba.instance.id}\\)"
  - grok:
      if: "['9731','9732'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9731_9732
      field: "message"
      description: "Event raised when mdest rx user based tunnel state is [up|down]"
      patterns:
        - "Tunnel Id \\(%{DATA:aruba.instance.id}\\) Gre Key \\(%{DATA:aruba.tunnel.gre_key}\\) Source IP \\(%{IP:source.ip}\\) Destination IP \\(%{IP:destination.ip}\\)"
  - grok:
      if: "ctx.event?.code == '9733'"
      tag: user_tunnel_event_9733
      field: "message"
      description: "Event raised when user bootstrap is failed"
      patterns:
        - "^User bootstrap is failed for client \\(%{MAC:client.mac}\\) on port \\(%{DATA:aruba.port}\\) due to %{GREEDYDATA:event.reason}."
  - grok:
      if: "['9734','9735'].contains(ctx.event?.code)"
      tag: user_tunnel_event_9734_9735
      field: "message"
      description: "Event raised when zone operational state is up | down"
      patterns:
        - "^Operational state of %{DATA:aruba.tunnel.zone} zone is UP."
        - "^Operational state of %{DATA:aruba.tunnel.zone} zone is DOWN due to %{GREEDYDATA:event.reason}."
  - dissect:
      if: "ctx.event?.code == '9736'"
      tag: user_tunnel_event_9736
      field: "message"
      description: "Event raised when WoL VLAN bootstrap response received from controller (Active/Standby)"
      pattern: "Tunnel Node Server WoL VLAN bootstrap %{aruba.state} with controller %{server.ip}"
  - dissect:
      if: "ctx.event?.code == '9737'"
      tag: user_tunnel_event_9737
      field: "message"
      description: "Event raised when controller version does not support WoL VLAN bootstrap"
      pattern: 'Tunnel Node Server WoL VLAN bootstrap failed due to incompatible controller (%{server.ip}) version %{service.version}'


  # IP source lockdown events (980x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IP_SOURCE_LOCKDOWN.htm
  - grok:
      if: "['9801','9802','9803','9804','9805','9806','9807'].contains(ctx.event?.code)"
      tag: ip_source_lockdown_9801_9802_9803_9804_9805_9806_9807
      field: "message"
      description: "This log event informs the user that IP_SOURCE_LOCKDOWN resource utilization has reached 80 percent of the supported limits"
      patterns:
        - "^IP_SOURCE_LOCKDOWN resource utilization has (reached|reduced)( below)? 80 percent of the supported limit of %{DATA:aruba.limit.threshold} on the system"
        - "^IP_SOURCE_LOCKDOWN resource utilization has exceeded maximum supported limit of %{DATA:aruba.limit.threshold} on the system. IP source-lockdown functionality will not work for new entries"
        - "^(IPV4_SOURCE_LOCKDOWN|IPV6_SOURCE_LOCKDOWN) is (enabled|disabled) on interface %{GREEDYDATA:aruba.interface.id}"

  # Virtual Switching Framework (VSF) events (99xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VSF.htm
  - grok:
      if: "['9901','9902','9903','9905','9906','9910'].contains(ctx.event?.code)"
      tag: vsf_event_9901_9902_9903_9905_9906_9910
      field: "message"
      description: "log event for [standby|member|Conductor] boot complete | Event log indicates that member is reseting | Event log for Failed processing Hello packet because of member number conflict | indicates the member has been removed due to user request"
      patterns:
        - "^(Member|Standby|Conductor) %{DATA:aruba.vsf.member_id} boot complete"
        - "^Resetting member %{GREEDYDATA:aruba.vsf.member_id}"
        - "^Member %{DATA:aruba.vsf.member_id} conflict detected on link %{GREEDYDATA:aruba.vsf.link}"
        - "^Member %{DATA:aruba.vsf.member_id} removed"
  - dissect:
      if: "ctx.event?.code == '9908'"
      tag: vsf_event_9908
      field: "message"
      description: "Event log indicates the current topology"
      pattern: "Topology is %{aruba.vsf.topo_type}"
  - grok:
      if: "ctx.event?.code == '9911'"
      tag: vsf_event_9911
      field: "message"
      description: "Event log indicates that we would exceed the MAX switches if we add this new switch"
      patterns:
        - "^Maximum number of switches in the stack has reached. Cannot add MAC %{MAC:aruba.vsf.mac_addr1} product type %{GREEDYDATA:aruba.vsf.product_type}"
  - grok:
      if: "ctx.event?.code == '9912'"
      tag: vsf_event_9912
      field: "message"
      description: "log event for stack state active"
      patterns:
        - "^Stack state is no-split with conductor id %{GREEDYDATA:aruba.vsf.member_id}"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      if: "['9913','9915','9916'].contains(ctx.event?.code)"
      tag: vsf_event_9913_9915_9916
      field: "message"
      description: "Event log for lost member | log event for the switch won as [conductor|standby] "
      patterns:
        - "^Lost member %{DATA:aruba.vsf.member_id} with %{GREEDYDATA:event.reason}"
        - "^Member %{DATA:aruba.vsf.member_id} elected as (conductor|standby) reason-%{GREEDYDATA:event.reason}"
  - grok:
      if: "['9914','9917','9919'].contains(ctx.event?.code)"
      tag: vsf_event_9914_9917_9919
      field: "message"
      description: "Event log for status of a reboot request | log event for the member was not allowed to join due to a mismatched product-id | log event for switch running on a different platform and trying to join the stack"
      patterns:
        - "^Reboot of MAC %{MAC:aruba.vsf.mac_addr1} status-%{GREEDYDATA:aruba.status}"
        - "^Switch with MAC %{MAC:aruba.vsf.mac_addr1} cannot join stack due to incorrect product id %{GREEDYDATA:aruba.vsf.product_id}"
        - "^Found Unsupported switch with MAC %{MAC:aruba.vsf.mac_addr1} and Product type %{DATA:aruba.vsf.product_type}, connected to switch with MAC %{MAC:aruba.vsf.mac_addr2} on stack port %{GREEDYDATA:aruba.port}"
  - grok:
      if: "['9920','9921','9922'].contains(ctx.event?.code)"
      tag: vsf_event_9920_9921_9922
      field: "message"
      description: "log event for heart beat lost | log event when os_version_mismatch happened on standby and member | log event when member attempt to connect to a different stack"
      patterns:
        - "for member %{GREEDYDATA:aruba.vsf.member_id}"
        - "^Attempt to connect member %{DATA:aruba.vsf.member_id} from a different stack"
  - grok:
      if: "['9923','9924'].contains(ctx.event?.code)"
      tag: vsf_event_9923_9924
      field: "message"
      description: "log event when vsf link is up|down"
      patterns:
        - "^VSF link %{DATA:aruba.vsf.link} "
  - grok:
      if: "ctx.event?.code == '9925'"
      tag: vsf_event_9925
      field: "message"
      description: "log event when different MAC address on the same link"
      patterns:
        - "^Invalid MAC %{MAC:aruba.vsf.mac_addr1} detected on link %{DATA:aruba.vsf.link} with peer MAC %{MAC:aruba.vsf.mac_addr2}"
  - grok:
      if: "['9927','9928','9930'].contains(ctx.event?.code)"
      tag: vsf_event_9927_9928_9930
      field: "message"
      description: "log event for [inactive|active] fragment | log event for standby configuration"
      patterns:
        - "^Fragment with conductor %{DATA:aruba.vsf.member_id} is (Active|Inactive)"
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
        - "^Member %{DATA:aruba.vsf.member_id} is configured as Secondary"
  - grok:
      if: "ctx.event?.code == '9932'"
      tag: vsf_event_9932
      field: "message"
      description: "log event when Mater SKU device joins the stack"
      patterns:
        - "^Attempt to connect a member with MAC %{MAC:aruba.vsf.mac_addr1} and product type %{DATA:aruba.vsf.product_id} having different airflows"
  - grok:
      if: "['9933','9934'].contains(ctx.event?.code)"
      tag: vsf_event_9933_9934
      field: "message"
      description: "log event for peer time out as it did not receive any packet | log event for loop detection in link"
      patterns:
        - "on interface %{GREEDYDATA:aruba.port}"
  - grok:
      if: "['9935','9936','9937'].contains(ctx.event?.code)"
      tag: vsf_event_9935_9936_9937
      field: "message"
      description: "log event when peer switch is in different VSF handshake version | when interface [added|removed] to a particular link"
      patterns:
        - "^Interface %{DATA:aruba.port} detected a peer with a different VSF handshake version"
        - "^Interface %{DATA:aruba.port} (added to|removed from) VSF link %{GREEDYDATA:aruba.vsf.link}"
  - grok:
      if: "['9938','9939','9943'].contains(ctx.event?.code)"
      tag: vsf_event_9938_9939_9943
      field: "message"
      description: "log event when the switch is not able to autojoin as it is connected with a non default VSF interface | there is an inconsistency detected between conductors provisioned VSF link configuration and the interface on which switch is attempting to autojoin | when two different switches are attempting to autojoin by connecting to the same VSF link on the peer"
      patterns:
        - "^%{BEGINNING_PATTERN} not able to autojoin as it is connected (on|to) interface %{DATA:aruba.port} which is (a non default autojoin VSF interface|not provisioned on the conductor for member %{DATA:aruba.vsf.member_id})"
        - "^%{BEGINNING_PATTERN} failed to autojoin on link %{DATA:aruba.vsf.link}, port %{GREEDYDATA:aruba.port}"
        - "^%{BEGINNING_PATTERN} failed to autojoin. Connect the device %{MAC:aruba.vsf.mac_addr2} to member %{DATA:aruba.vsf.mbr_id} link %{DATA:aruba.vsf.link} to proceed"
      pattern_definitions:
        BEGINNING_PATTERN: "^Switch with (mac|MAC) %{MAC:aruba.vsf.mac_addr1}"
  - grok:
      if: "['9940','9941','9942'].contains(ctx.event?.code)"
      tag: vsf_event_9940_9941_9942
      field: "message"
      description: "log event when peer switch is not autojoin eligible | when there is more than one interface physically connected to same switch VSF link for autojoin | when switch is not allowed to autojoin because of insufficient resources"
      patterns:
        - "^Switch with MAC %{MAC:aruba.vsf.mac_addr1} "
  - grok:
      if: "ctx.event?.code == '9947'"
      tag: vsf_event_9947
      field: "message"
      description: "log event when member connected to an unsupported interface"
      patterns: 
        - "^Switch with MAC %{MAC:aruba.vsf.mac_addr1} failed to autojoin. Connect the device %{MAC:aruba.vsf.mac_addr2} to member %{DATA:aruba.vsf.mbr_id} link %{DATA:aruba.vsf.link} to proceed"
  - dissect:
      if: "ctx.event?.code == '9948'"
      tag: vsf_event_9948
      field: "message"
      description: "log event when interface is in inconsistent link configuration error"
      pattern: "Interface %{aruba.port} in VSF link %{aruba.vsf.link} detected a peer with inconsistent VSF link configuration"
  - dissect:
      if: "ctx.event?.code == '9949'"
      tag: vsf_event_9949
      field: "message"
      description: "log event when existing secondary changes to new specified secondary member"
      pattern: "Secondary member changed from %{aruba.vsf.old_standby_id} to %{aruba.vsf.new_standby_id}"
  - grok:
      if: "ctx.event?.code == '9950'"
      tag: vsf_event_9950
      field: "message"
      description: "log event when a VSF interface is connected to another interface with MACsec configuration"
      patterns: 
        - "^Switch with MAC %{MAC:aruba.vsf.mac_addr1} failed to autojoin as it is connected on interface %{DATA:aruba.port} which has MACsec configuration"
  - dissect:
      if: "ctx.event?.code == '9951'"
      tag: vsf_event_9951
      field: "message"
      description: "Log event when an interface with MACsec configuration is added to VSF link"
      pattern: "Bringing down MACsec configured interface %{aruba.port} as it is added to a VSF link. VSF link and MACsec configurations needs to be removed from the interface %{aruba.vsf.port2} and VSF link needs to be reconfigured for it to take into effect"
  - grok:
      if: "['9953','9954','9956'].contains(ctx.event?.code)"
      tag: vsf_event_9953_9954_9956
      field: "message"
      description: "VSF_Member issu_state failed in conductor | when standby/member goes out of the stack | when ISSU timer expires before ISSU is complete"
      patterns:
        - "(member|switch) %{DATA:aruba.instance.id} during ISSU operation: \"%{DATA:aruba.vsf.operation}\""
        - "^VSF member %{DATA:aruba.instance.id} going out of stack during ISSU operation: \"%{DATA:aruba.vsf.operation}\", rebooting the stack"
  - grok:
      if: "['9952','9955'].contains(ctx.event?.code)"
      tag: vsf_event_9952_9955
      field: "message"
      description: "Log event when ISSU switchover is detected | when unintentional failover occurs during issu in_progress"
      patterns:
        - "detected during ISSU operation: \"%{DATA:aruba.vsf.operation}\""
  - grok:
      if: "ctx.event?.code == '9957'"
      tag: vsf_event_9957
      field: "message"
      description: "Log event when member attempt to connect to incompatible peer jtypes"
      patterns:
        - "^Member %{DATA:aruba.vsf.member_id} interface %{DATA:aruba.port} in VSF link %{DATA:aruba.vsf.link} detected a peer %{MAC:aruba.vsf.mac_addr1} with incompatible product type %{GREEDYDATA:aruba.vsf.product_type}"
  - grok:
      if: "['9958','9959','9960'].contains(ctx.event?.code)"
      tag: vsf_event_9958_9959_9960
      field: "message"
      description: "Log event when port shape is updated with uniform speed | capture the QOS applied failures"
      patterns:
        - "^Egress port shape rate %{DATA:aruba.vsf.lowest_speed}( will be)? applied for all VSF interfaces"
        - "^Egress port shape rate %{DATA:aruba.vsf.lowest_speed} update is failed to apply for interface %{GREEDYDATA:aruba.interface.name}"

  # ACLs events (100xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ACL.htm
  - grok:
      if: "ctx.event.code == '10002'"
      tag: acl_event_10002
      field: "message"
      description: "ACL log statistics"
      patterns:
        # OS 10.7
        - "^%{DATA:aruba.acl.name} on %{DATA:aruba.interface.name} \\(%{DATA:aruba.acl.direction}\\): %{NUMBER:aruba.acl.hit_delta:long} %{GREEDYDATA:aruba.acl.ace_string}"
        # OS 10.15
        - "^ACL %{DATA:aruba.acl.name} \\(%{DATA:aruba.acl.type}\\) %{DATA:aruba.interface.name} \\(%{DATA:aruba.acl.direction}\\): %{NUMBER:aruba.acl.hit_delta:long} %{GREEDYDATA:aruba.acl.ace_string}"
  - dissect:
      if: "ctx.event.code == '10003'"
      tag: acl_event_10003
      field: "message"
      description: "ACL application failure"
      pattern: "ACL %{aruba.acl.type} %{aruba.acl.name} failed to apply on %{aruba.acl.application}"

  # Policies events (1010x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/POLICY.htm
  - dissect:
      if: "ctx.event?.code == '10101'"
      tag: policies_event_10101
      field: "message"
      description: "Policy application failure"
      pattern: "Policy %{aruba.policy.name} failed to apply on %{aruba.policy.application}"

  # TCAM events (102xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TCAM.htm
  - grok:
      if: "['10202','10203','10204','10205','10209','10210'].contains(ctx.event?.code)"
      tag: tcam_event_10202_10203_10204_10205_10209_10210
      field: "message"
      description: "[entry|table] [installation|uninstallation] failure | High-capacity TCAM/LPM [entry|table] [installation|uninstallation] failure "
      patterns:
        - "TCAM(/LPM)? table %{DATA:aruba.tcam.table_name} "
        - "in table %{GREEDYDATA:aruba.tcam.table_name}"

  # RBAC events (1030x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/RBACD.htm
  - grok:
      if: "['10301', '10302'].contains(ctx.event?.code)"
      tag: policies_event_10301_10302
      field: "message"
      description: "Log event when local tac_plus server has been started | server failed to start"
      patterns: 
        # Note: Adding more tolerances as the documentation might be wrong ('d' at the end)
        - "^Local authorization has been %{GREEDYDATA:aruba.status}"
        - "^Failed to %{DATA:aruba.status} local authorization"

  # ARP security events (104xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ARP-SECURITY.htm
  - grok:
      if: "['10401','10402'].contains(ctx.event?.code)"
      tag: arp_event_10401_10402
      field: "message"
      description: "ARP inspection configuration on VLAN | ARP inspection port mode configuration"
      patterns:
        - "^ARP inspection %{DATA:aruba.status} on vlan %{GREEDYDATA:network.vlan.id}."
        - "^ARP inspection %{DATA:aruba.status} on port %{GREEDYDATA:aruba.port}."

  # PORT_ACCESS events (1050x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/PORT_ACCESS.htm
  - grok:
      if: "['10501','10502','10503'].contains(ctx.event?.code)"
      tag: port_access_event_10501_10502_10503
      field: "message"
      description: "Client was logged-off administratively through command-line interface | port is [unblocked|blocked] by port-access daemon"
      patterns:
        - "^Client %{MAC:client.mac} was logged-off administratively through command-line interface"
        - "^Port %{DATA:aruba.port} is (blocked|unblocked) by port-access"
  - grok:
      if: "['10504','10505'].contains(ctx.event?.code)"
      tag: port_access_event_10504_10505
      field: "message"
      description: "The authentication mode associated with the port is changed | The client limit associated with the port is changed"
      patterns:
        - "^Clients were logged-off on the port %{DATA:aruba.port} due to a change in (%{AUTH_MODE_CHANGE}|%{LIMIT_CHANGE})"
      pattern_definitions:
        AUTH_MODE_CHANGE: "authentication mode from %{DATA:aruba.port_access.old_mode} to %{GREEDYDATA:aruba.port_access.mode}"
        LIMIT_CHANGE: "client limit from %{DATA:aruba.port_access.old_limit} to %{GREEDYDATA:aruba.limit.threshold}"
  - dissect:
      if: "ctx.event?.code == '10506'"
      tag: port_access_event_10506
      field: "message"
      description: "The name associated with a VLAN in use by port-access daemon changed"
      pattern: "The name associated with VLAN %{network.vlan.id} changed from %{aruba.port_access.old_name} to %{aruba.port_access.name}"
  - dissect:
      if: "ctx.event?.code == '10507'"
      tag: port_access_event_10507
      field: "message"
      description: "The policy configuration is updated by the user"
      pattern: "Clients using policy %{aruba.policy.name} were logged-off due to a configuration change in the policy"
  - dissect:
      if: "ctx.event?.code == '10508'"
      tag: port_access_event_10508
      field: "message"
      description: "VLAN is configured as Trunk for some clients and access for others. This could potentially result in traffic loss"
      pattern: "VLAN conflict detected on port %{aruba.port}"

  # L3 Encap capacity events (1060x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/L3_ENCAP.htm
  - grok:
      field: message
      tag: l3_event_10601_10602_10603
      description: "Logs event when a L3 encapsulation is added to a port"
      if: "['10601','10602','10603'].contains(ctx.event?.code)"
      patterns:
        - "^L3 resources critical for neighbor and route forwarding are (at safe levels|low). %{L3_ENCAP_COMMON}"
        - "^Out of L3 resources critical for neighbor and route forwarding. %{L3_ENCAP_COMMON}"
      pattern_definitions:
        L3_ENCAP_COMMON: "Used: %{DATA:aruba.l3.encaps_allocated}, Available: %{GREEDYDATA:aruba.l3.encaps_free}"

  # ASIC table full error for L3PD events (108xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/L3_ASIC_RESOURCE.htm
  - grok:
      field: message
      tag: asic_event_10804
      description: "Router MAC limit exceeded, MAC cannot be programmed"
      if: "ctx.event?.code == '10804'"
      patterns:
        - "^Router MAC limit exceeded. Failed to program MAC: %{MAC:client.mac}"
  - grok:
      field: message
      tag: asic_event_10807_10808
      description: "Log configured [ip|ipv6] prefix-priority list"
      if: "['10807','10808'].contains(ctx.event?.code)"
      patterns:
        - "^Using configured (IPv4|IPv6) prefix-priority list %{GREEDYDATA:aruba.asic.prefix_list}."
  - grok:
      field: message
      tag: asic_event_10809_10810
      description: "Logs failure while configuring hardware for [ipv4|ipv6] prefix-priority"
      if: "['10809','10810'].contains(ctx.event?.code)"
      patterns:
        - "^HW programming failed for (IPv4|IPv6) prefix-priority %{GREEDYDATA:aruba.asic.route_prefix}"

  # DPSE daemon events (109xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DPSE.htm
  - dissect:
      field: message
      tag: dpse_event_10901
      description: "A line card hit a backplane sequence error that triggered a recovery operation"
      if: "ctx.event?.code == '10901'"
      pattern: "Line card module %{aruba.dpse.linecard_name} triggered backplane sequence recovery"
  - dissect:
      field: message
      tag: dpse_event_10904
      description: "The system completed backplane sequence recovery triggered by line card error"
      if: "ctx.event?.code == '10904'"
      pattern: "Line card module %{aruba.dpse.linecard_name} completed backplane sequence recovery"
  - dissect:
      field: message
      tag: dpse_event_10906
      description: "An ops-switchd plugin failed executing an operation"
      if: "ctx.event?.code == '10906'"
      pattern: 'Control Plane (%{aruba.dpse.operation_name}) failure during (%{aruba.dpse.plugin_name}) configuration'

  # MAC Address mode configuration events (1100x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/FAULT_MONITOR.htm
  - grok:
      field: message
      tag: mac_event_11001_11002_11003
      description: "The following are the events related to MAC Address mode configuration"
      if: "['11001','11002','11003'].contains(ctx.event?.code)"
      patterns:
        - "^The MAC Address (configured|operational) mode changed from %{DATA:aruba.mac.old_mode} to %{GREEDYDATA:aruba.mac.new_mode}"
        - "^Station MAC add failure due to hardware full, mac=%{MAC:server.mac} vlan=%{GREEDYDATA:network.vlan.id}"

  # Fault Monitor Events (111xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/FAULT_MONITOR.htm
  - grok:
      field: message
      tag: fault_monitor_event_11101_11102
      description: >
        Logs event when a fault is detected on an interface.
        Logs event and shutdown the interface when a fault is detected on an interface.
      if: "['11101', '11102'].contains(ctx.event?.code)"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault detected( and port disabled)?"
  - grok:
      field: message
      tag: fault_monitor_event_11103
      description: "Interface is auto-enabled on timer expiry."
      if: "ctx.event?.code == '11103'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault re-enable time expired, port enabled"
  - grok:
      field: message
      tag: fault_monitor_event_11104
      description: "Interface is auto-enabled on profile configuration change."
      if: "ctx.event?.code == '11104'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault disable cancelled due to configuration change"
  - grok:
      field: message
      tag: fault_monitor_event_11105
      description: "Interface is auto-enabled on admin state change."
      if: "ctx.event?.code == '11105'"
      patterns:
          - "^Admin state changed and interface: %{DATA:aruba.interface.name} is auto-enabled"
  - grok:
      field: message
      tag: fault_monitor_event_11106
      description: "Logs event when disabling of a faulty interface failed."
      if: "ctx.event?.code == '11106'"
      patterns:
          - "^Interface %{DATA:aruba.interface.name}: %{DATA:aruba.fault.type} fault detected, port is already disabled by another fault"
  - grok:
      field: message
      tag: fault_monitor_event_11107
      description: "Logs event when a packet drop is detected for MAC Lockout MAC as source address."
      if: "ctx.event?.code == '11107'"
      patterns:
          # OS 10.07
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as source address: %{NUMBER:aruba.fault.sa_diff_count:long}"
          # OS 10.15
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as destination address with packet count: %{NUMBER:aruba.fault.da_diff_count:long}"
  - grok:
      field: message
      tag: fault_monitor_event_11108
      description: "Logs event when a packet drop is detected for MAC Lockout MAC as destination address."
      if: "ctx.event?.code == '11108'"
      patterns:
          # OS 10.07
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as destination address: %{NUMBER:aruba.fault.da_diff_count:long}"
          # OS 10.15
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as destination address with packet count: %{NUMBER:aruba.fault.da_diff_count:long}"
  - grok:
      field: message
      tag: fault_monitor_event_11109
      description: "Logs event when a packet drop is detected for MAC Lockout."
      if: "ctx.event?.code == '11109'"
      patterns:
          # OS 10.07
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as source: %{NUMBER:aruba.fault.sa_diff_count:long} and destination: %{NUMBER:aruba.fault.da_diff_count:long} address"
          # OS 10.15
          - "^MAC Lockout packet drop detected for %{MAC:client.mac} as source & destination address with source packet count: %{NUMBER:aruba.fault.sa_diff_count:long} and destination packet count: %{NUMBER:aruba.fault.da_diff_count:long}"

    # MACsec events (1120x)
    # https://www.arubanetworks.com/techdocs/AOS-CX/10.07/HTML/5200-8214/Content/events/MACSEC.htm
  - grok:
      field: message
      tag: macsec_event_11201_through_11204
      description: "The following are the events related to MACsec"
      if: "['11201','11202','11203','11204'].contains(ctx.event?.code)"
      patterns:
        - "^MACsec session established on Rx Secure Channel %{DATA:aruba.mac.sci} on interface %{GREEDYDATA:aruba.interface.name}"
        - "^MKA session secured for Connectivity Association %{DATA:aruba.mac.ckn} on interface %{GREEDYDATA:aruba.interface.name}"
        - "^Secure Association key updated for Connectivity Association %{DATA:aruba.mac.ckn} on interface %{DATA:aruba.interface.name} - Latest AN/KN %{DATA:aruba.mac.latest_an}/%{DATA:aruba.mac.latest_kn}, Old AN/KN %{DATA:aruba.mac.old_an}/%{GREEDYDATA:aruba.mac.old_kn}"
        - "^Possible replay attempt detected on the Secure Channel %{GREEDYDATA:aruba.mac.sci}."

  # Smartlink events (1130x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SMARTLINK.htm
  - grok:
      field: message
      tag: smartlink_event_11301_11302_11303
      if: "['11301','11302','11303'].contains(ctx.event?.code)"
      description: "flush message received on interface with control vlan | when [active|backup] link changed in the smartlink group"
      patterns:
        - "^Flush message received on %{DATA:aruba.interface.name} with control VLAN %{GREEDYDATA:network.vlan.id}"
        - "^(Active|Backup) link of the smartlink group %{DATA:group.id} changed to %{GREEDYDATA:aruba.interface.name}"

  # L3 Resource Manager events (1150x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/L3_RESMGR.htm
  - grok:
      field: message
      tag: l3_rsmgr_event_11501
      if: "ctx.event?.code == '11501'"
      description: "logs warning for route addition attempt."
      patterns: 
        # 10.07 OS
        - "^IPv6 route prefix %{DATA:aruba.prefix} is not supported on this platform"
        # 10.15 OS
        - "^IPv6 route prefix %{DATA:aruba.prefix} is recommended for transit network use only. The traffic would be software routed. Routing performance to local destination addresses on this network may be impacted."
  - grok:
      field: message
      tag: l3_rsmgr_event_11502
      if: "ctx.event?.code == '11502'"
      description: "logs error for running out of resources."
      patterns:
        - "^Exceeded resource '%{DATA:aruba.l3.resource}' capacity adding %{DATA:aruba.l3.object}. Use 'show capacities-status' for more information."
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - grok:
      field: message
      tag: l3_rsmgr_event_11503
      if: "ctx.event?.code == '11503'"
      description: "logs warning for hitting certain capacity limits."
      patterns:
        - "^Resource '%{DATA:aruba.l3.resource}' usage is at %{NUMBER:aruba.l3.percent:long}% of capacity. Use 'show capacities-status' for more information."
        - "^Throttled %{NUMBER:aruba.throttle_count:long} Messages"
  - dissect:
      field: message
      tag: l3_rsmgr_event_11504
      if: "ctx.event?.code == '11504'"
      description: "logs warning when overlay ECMP group is programmed as single route."
      pattern: "Overlay ECMP route %{aruba.prefix} has been programmed as a single route."
  - dissect:
      field: message
      tag: l3_rsmgr_event_11505
      if: "ctx.event?.code == '11505'"
      description: "Logs warning that traffic might be routed in software for new route."
      pattern: "Traffic for IPv6 route prefix %{aruba.prefix} will be software routed and performance impacted if no other matching route prefixes from 0-64 for the same destination exist."
  - grok:
      field: message
      tag: l3_rsmgr_event_11506
      if: "['11506','11507'].contains(ctx.event?.code)"
      description: "L3RM received event [removing|adding] resolved nexthop from tunnel."
      patterns:
        - "^Tunnel %{DATA:aruba.l3.vtep} resolved nexthop %{DATA:aruba.l3.nexthop} (added|removed)."

  # Connectivity Fault Management (CFM) events (1160x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ETH_OAM_CFM.htm
  - dissect:
      field: message
      tag: cfm_event_11601
      if: "ctx.event?.code == '11601'"
      pattern: "Connection lost for Maintenance Endpoint %{aruba.instance.id} on %{aruba.interface.id}."
  - dissect:
      field: message
      tag: cfm_event_11602
      if: "ctx.event?.code == '11602'"
      pattern: "Connection restored for Maintenance Endpoint %{aruba.instance.id} on %{aruba.interface.id}."

  # Alarm events (117xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ALARM.htm
  - dissect:
      field: message
      tag: alarm_event_11701
      if: "ctx.event?.code == '11701'"
      description: "Event reported when there is a change in input alarm configuration."
      pattern: "Input alarm %{aruba.instance.id} config change: name: %{aruba.alarm.name}, relay: %{aruba.alarm.relay}, log_and_trap: %{aruba.alarm.log_and_trap}, trigger: %{aruba.alarm.trigger}"
  - dissect:
      field: message
      tag: alarm_event_11702
      if: "ctx.event?.code == '11702'"
      description: "Event reported when there is a change in system alarm configuration."
      pattern: 'System alarm (%{aruba.alarm.type}) config change: relay: %{aruba.alarm.relay}, log_and_trap: %{aruba.alarm.log_and_trap}'
  - grok:
      field: message
      tag: alarm_event_11703_11704
      if: "['11703','11704'].contains(ctx.event?.code)"
      description: "Event reported when system alarm has activated | when input alarm has activated"
      patterns:
        - "^(System|Input) alarm %{DATA:aruba.alarm.name} has activated through log-and-trap(, triggered at %{GREEDYDATA:aruba.alarm.trigger})?"
  - grok:
      field: message
      tag: alarm_event_11705_11708
      if: "['11705','11708'].contains(ctx.event?.code)"
      description: "Event reported when alarm snooze timer has activated | Event reported when alarm snooze timer repeats"
      patterns:
        - "^Snooze alarm (activated|repeats), disabling relay function for %{NUMBER:aruba.len:long} min"
  - grok:
      field: message
      tag: alarm_event_11709_11710
      if: "['11709','11710'].contains(ctx.event?.code)"
      description: "Event reported when system alarm has activated through relay | when input alarm has activated through relay"
      patterns:
        - "^(System|Input) alarm %{DATA:aruba.alarm.name} has activated through relay(, triggered at %{GREEDYDATA:aruba.alarm.trigger})?"

  # Container Manager Events (118xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CONTAINER.htm
  - dissect:
      field: message
      tag: container_manager_event_11801_11802_11803
      if: "['11801','11802','11803'].contains(ctx.event?.code)"
      pattern: "Container %{container.name} is %{?ignore_action}"
  - grok:
      field: message
      tag: container_manager_event_11804_11805_11806_11807_11808_11809_11810_11811
      if: "['11804','11805','11806','11807','11808','11809','11810','11811'].contains(ctx.event?.code)"
      patterns:
        - "^Endpoint has been executed for container %{DATA:container.name} (with parameters: %{GREEDYDATA:aruba.container.params}|with no parameters.)"
        - "^Endpoint has been executed for container %{DATA:container.name} with no parameters."
        - "^Container %{DATA:container.name} (stopped|image)"

  # DNS Client Events (119xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DNS_CLIENT.htm
  - grok:
      field: message
      tag: dns_client_event_11901
      description: "Event reported when DNS event triggered"
      if: "ctx.event?.code == '11901'"
      patterns:
        - "%{DATA:aruba.dns.type} event for VRF %{DATA:aruba.vrf.name}$"

  # UFD events (1200x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/UFD.htm
  - grok:
      field: message
      tag: ufd_event_12001_12002
      description: "Event reported when Links-to-Disable go down | Event reported when Links-to-Disable ports are restored"
      if: "['12001','12002'].contains(ctx.event?.code)"
      patterns:
        - "^Uplink Failure Detection session-id %{DATA:aruba.instance.id}, state changed from %{DATA:aruba.ufd.from_state} to %{GREEDYDATA:aruba.state}."

  # Job scheduler events (1220x && 1370x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/SCHEDULE.htm
  - dissect:
      field: message
      tag: job_scheduler_event_12201
      description: "Event reported when a schedule is created"
      if: "ctx.event?.code == '12201'"
      # Unable to get real logs to parse <start_datetime><details>, stuffing both fields into aruba.scheduler.details
      pattern: "Creating schedule %{aruba.scheduler.name}, trigger time(s): %{aruba.scheduler.details}"
  - grok:
      field: message
      tag: job_scheduler_event_12202
      description: "Event reported when a schedule triggers"
      if: "ctx.event?.code == '12202'"
      patterns:
        - "^Schedule %{DATA:aruba.scheduler.name} triggered, trigger_count: %{NUMBER:aruba.count:long}"
  - dissect:
      field: message
      tag: job_scheduler_event_12203
      description: "Event reported when the schedules are recreated due to timezone change."
      if: "ctx.event?.code == '12203'"
      # Unable to get real logs to parse <start_datetime><details>, stuffing both fields into aruba.scheduler.details
      pattern: "Timezone changed. Re-creating schedule %{aruba.scheduler.name}, trigger time(s): %{aruba.scheduler.details}"
  - dissect:
      field: message
      tag: job_scheduler_event_13701
      description: "Event reported when a job is executed"
      if: "ctx.event?.code == '13701'"
      pattern: "Starting Job %{aruba.scheduler.job_name} due to Schedule %{aruba.scheduler.name}'s trigger"

  # Dot1x supplicant events (1230x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DOT1X_SUPPLICANT.htm
  - grok:
      field: message
      tag: dot1x_event_12301_12302_12303_12304
      description: ""
      if: "['12301','12302','12303','12304'].contains(ctx.event?.code)"
      patterns:
        - "^802.1X supplicant has (blocked|unblocked) the interface %{GREEDYDATA:aruba.interface.id}."
        - "^802.1X supplicant PAE restarted on interface %{GREEDYDATA:aruba.interface.id} due to change in policy %{GREEDYDATA:aruba.dot1x.policy}."
        - "^802.1X supplicant is not supported on the port %{GREEDYDATA:aruba.port}."

  # Device fingerprinting events (1240x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DFP.htm
  - dissect:
      field: message
      tag: device_fingerprinting_event_12402
      description: "Log the event when the per port clients limit for device fingerprinting is reached."
      if: "ctx.event?.code == '12402'"
      pattern: "Reached the maximum clients limit of %{aruba.limit.threshold} on the interface %{aruba.interface.id} for device fingerprinting"

  # VXLAN agent events (1250x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/VXLAN_AGENT.htm
  - grok:
      field: message
      tag: vxlan_event_12501_12502
      description: "Event raised when netvp add fails in agent | Event raised when tunnel add fails in agent"
      if: "['12501','12502'].contains(ctx.event?.code)"
      patterns:
        - "^Netvp add failed for vni_id: %{DATA:aruba.vxlan.vni_id}, tunnel_id: %{DATA:aruba.vxlan.tunnel_id}, vlan: %{GREEDYDATA:network.vlan.id}."
        - "^Tunnel add failed for tunnel_id: %{DATA:aruba.vxlan.tunnel_id}, ecmp_id: %{GREEDYDATA:aruba.vxlan.ecmp_id}."

# Telnet server events (1290x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TELNET_SERVER.htm
  - grok:
      field: message
      tag: telnet_server_event_12901_12902_12903
      description: "Logs a message when the Telnet server is [enabled|disabled] on a VRF | Logs a message when a user tries to enable Telnet server without setting admin password"
      if: "['12901','12902','12903'].contains(ctx.event?.code)"
      patterns:
        - "^Failed to enable Telnet server on VRF %{DATA:aruba.vrf.name}. Admin password is not set."
        - "on VRF %{GREEDYDATA:aruba.vrf.name}."
  - grok:
      field: message
      tag: telnet_server_event_12904_12905_12906_12907
      description: "Logs a message when a user login is [successful|fails] | when a user logs out of a session | when a user tries to login while maximum number of sessions are reached."
      if: "['12904','12905','12906','12907'].contains(ctx.event?.code)"
      patterns:
        - "^User %{DATA:user.name} (logged in|login|logged out of TELNET session) from %{IP:client.ip}"
        - "^TELNET session from %{IP:client.ip} is rejected because maximum number of TELNET sessions is reached."
  - grok:
      field: message
      tag: telnet_server_event_12908_12909
      description: ""
      # Possible documentation error with duplicate definition of 12908, will parse 12908 and 12909 together in the same grok
      if: "['12908','12909'].contains(ctx.event?.code)"
      patterns:
        - "^TELNET session from User %{DATA:user.name} is closed because maximum number of sessions per user is reached."
        - "^User %{DATA:user.name} login from %{IP:client.ip} for TELNET session has failed since the user is trying to login through an interface which is not allowed. Allowed interfaces are: %{GREEDYDATA:aruba.interface.id}."

  # Console events (1300x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CONSOLE.htm
  - grok:
      field: message
      tag: console_event_13001_13002
      description: "Logs a message when a user login is successful | Logs a message when a user login fails"
      if: "['13001','13002'].contains(ctx.event?.code)"
      patterns:
        - "^User %{DATA:user.name} (logged in|login) from %{IP:client.ip} (through|for) CONSOLE"
  - grok:
      field: message
      tag: console_event_13003
      description: "Logs a message when a user logs out of a session"
      if: "ctx.event?.code == '13003'"
      patterns: 
        - "^User %{DATA:user.name} logged out of CONSOLE session from %{IP:client.ip}."
  - dissect:
      field: message
      tag: console_event_13004
      description: "Logs a message when a user tries to login while maximum number of sessions per user are reached."
      if: "ctx.event?.code == '13004'"
      pattern: "CONSOLE session from User %{user.name} is closed because maximum number of sessions per user is reached."
  - dissect:
      field: message
      tag: console_event_13005
      description: "Logs a message when a user login fails since the access through this management interface is not allowed"
      if: "ctx.event?.code == '13005'"
      pattern: "User %{user.name} login from %{client.ip} for CONSOLE session has failed since the user is trying to login through an interface which is not allowed. Allowed interfaces are: %{aruba.interface.id}"

  # Accounting events (1310x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ACCOUNTING.htm
  - grok:
      field: message
      tag: accounting_event_13101_13102_13103
      description: "Logs a message when a SSH session timed out due to the session being idle | when a TELNET session timed out due to the session being idle | when a CONSOLE session timed out due to the session being idle"
      if: "['13101','13102','13103'].contains(ctx.event?.code)"
      patterns:
        - "^(SSH|TELNET|CONSOLE) session from %{IP:client.ip} (for|with) (U|u)ser %{DATA:user.name} "

  # Hot Patch events (132xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/HOT_PATCH.htm
  - grok:
      field: message
      tag: hotpatch_event_13201_13202_13203_13204_13205_13206_13207_13208_13209_13210_13211_13212_13213_13216_13217_13218_13219_13220_13221_13222_13223_13224_13225
      if: "['13201','13202','13203','13204','13205','13206','13207','13208','13209','13210','13211','13212','13213','13216','13217','13218','13219','13220','13221','13222','13223','13224','13224','13224','13225'].contains(ctx.event?.code)"
      patterns:
        - "^Hot-patch %{DATA:package.name}\\s+"
  - grok:
      field: message
      tag: hotpatch_event_13214_13215
      description: "Indicates that the hot-patch file could not be installed due to low disk space | Indicates that the hot-patch file could not be installed due to low memory"
      if: "['13214','13215'].contains(ctx.event?.code)"
      patterns:
        - "^Not enough (disk space|memory) available to install hot-patch %{GREEDYDATA:package.name}."
  - dissect:
      field: message
      tag: hotpatch_event_13226
      description: "Status of the Hot-patch attempted to be applied at boot"
      if: "ctx.event?.code == '13226'"
      pattern: 'Attempt to Hot-Patch %{package.name} on %{aruba.hotpatch.ss} at boot: "%{aruba.status}".'

  # Config validator events (1340x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CONFIG-VALIDATOR.htm
  - dissect:
      field: message
      tag: config_validator_event_13401
      description: "The following are the events related to configuration validation."
      if: "ctx.event?.code == '13401'"
      pattern: "Config %{aruba.config.name} failed to validate. Reason %{event.reason}"

  # ISSU events (135xx)
  # (https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ISSU.htm)
  - dissect:
      field: message
      tag: issu_event_13501
      description: "Event to indicate ISSU has started or completed"
      if: "ctx.event?.code == '13501'"
      pattern: "%{event.action} in-service software upgrade to %{aruba.issu.location} operating system image %{host.os.version}"
  - dissect:
      field: message
      tag: issu_event_13502
      description: "Event to indicate progress of ISSU'"
      if: "ctx.event?.code == '13502'"
      pattern: "In-service software upgrade started operation %{aruba.issu.operation}"
  - dissect:
      field: message
      tag: issu_event_13503
      description: "A critical error occurred during ISSU'"
      if: "ctx.event?.code == '13503'"
      pattern: "%{error.type} during ISSU operation %{aruba.issu.operation}"
  - dissect:
      field: message
      tag: issu_event_13504
      description: ""
      if: "ctx.event?.code == '13504'"
      pattern: "ISSU %{aruba.issu.condition}: %{event.reason}"
  - grok:
      field: message
      tag: issu_event_13505_13506
      description: "Indicates ISSU was aborted due to a feature not being ready | due to a feature failing to prepare for ISSU"
      if: "['13505','13506'].contains(ctx.event?.code)"
      patterns:
        - "^ISSU %{DATA:aruba.issu.condition}: Feature \"%{DATA:aruba.issu.feature}\" (failed to prepare for ISSU|not ready: %{GREEDYDATA:event.reason})"
  - grok:
      field: message
      tag: issu_event_13507_13508
      description: "Indicates ISSU rollback timer has been started | timer is running"
      if: "['13507','13508'].contains(ctx.event?.code)"
      patterns:
        - "^ISSU rollback timer (has been started|is running), %{NUMBER:aruba.issu.wait_time:long} minutes remaining before reboot"
  - dissect:
      field: message
      tag: issu_event_13511
      description: "Indicates ISSU rollback timer expired and the system boot to new software version"
      if: "ctx.event?.code == '13511'"
      pattern: "ISSU rollback timer expired. WARNING: previous software version %{aruba.issu.previous_software_version} was not found, booting system to active bank %{aruba.issu.active_bank} with %{aruba.issu.new_software_version} software version. This may cause issues with the current configuration"
  - grok:
      field: message
      tag: issu_event_13512
      description: "Indicates ISSU rollback timer is running after an ISSUd restart'"
      if: "ctx.event?.code == '13512'"
      patterns: 
        - "^ISSU rollback timer has been recreated, %{NUMBER:aruba.issu.wait_time:long} minutes remaining before reboot"

  # TPM events (1360x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TPMD.htm
  - dissect:
      field: message
      tag: tpm_event_13601
      description: "Indicates a TPM_Sign operation was successfully executed"
      if: "ctx.event?.code == '13601'"
      pattern: "TPM_Sign requested by %{process.name} was successful"
  - dissect:
      field: message
      tag: tpm_event_13602
      description: "Indicates a TPM_Sign operation failed"
      if: "ctx.event?.code == '13602'"
      pattern: "TPM_Sign requested by %{process.name} failed with code %{event.reason}"
  - dissect:
      field: message
      tag: tpm_event_13604
      description: "Indicates the system was rebooted some number of time to recovery from a TPM selftest error"
      if: "ctx.event?.code == '13604'"
      pattern: "Rebooted %{aruba.tpm.reboot_num} times to retry TPM selftests"

  # Distributed services events (1390X)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DIST-SERV.htm
  - dissect:
      field: message
      tag: dist_service_event_13901
      description: "Log event that indicates the chassis requires a reboot."
      if: "ctx.event?.code == '13901'"
      pattern: "Chassis Reboot Requested: %{event.reason}"
  # Event ID 13902 already defined in FQTSS events, handling both event categories in the same grok
  - grok:
      field: message
      tag: dist_service_and_fqtss_event_13902
      description: "Log event that indicates admission to PSM was rejected.' event_description_template | Event reported when FQTSS received alloc request"
      if: "ctx.event?.code == '13902'"
      patterns: 
        - "^Distributed Services Admission Rejected. Reason: %{GREEDYDATA:event.reason}"
        - "^FQTSS alloc requested"
# Event ID 13903 already defined in FQTSS events, handling both event categories in the same grok
  - grok:
      field: message
      tag: dist_service_and_fqtss_event_13903
      description: "Log event that indicates mismatch of PSM coordinates | Event reported when FQTSS received dealloc request"
      if: "ctx.event?.code == '13903'"
      patterns: 
        - "^PSM coordinates mismatch. Active coordinates: %{DATA:aruba.distributed.active_coordinates}, Configured coordinates: %{GREEDYDATA:aruba.distributed.configured_coordinates}."
        - "^Event reported when FQTSS received dealloc request"

  # Forwarding and Queuing for Time-Sensitive Streams (FQTSS) events (1390x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/FQTSS.htm
  - dissect:
      field: message
      tag: fqtss_event_13904
      description: "Event reported when stream is requesting for hardware resource"
      if: "ctx.event?.code == '13904'"
      pattern: "Resource %{aruba.fqtss.request_type} requested: %{aruba.instance.id} stream_meter %{aruba.fqtss.stream_meter_id} port_name %{aruba.port} classA_ded %{aruba.fqtss.classA_ded} classB_ded %{aruba.fqtss.classB_ded} classA_max %{aruba.fqtss.classA_max} classB_max %{aruba.fqtss.classB_max}"
  - dissect:
      field: message
      tag: fqtss_event_13905
      description: "Event reported when stream received a response from the hardware"
      if: "ctx.event?.code == '13905'"
      pattern: "Stream %{aruba.instance.id} port %{aruba.port} request_type %{aruba.fqtss.request_type} response stream_status %{aruba.fqtss.per_stream_status} port_status %{aruba.fqtss.per_port_status} memory_status %{aruba.fqtss.dedicate_mem_status}"
  - dissect:
      field: message
      tag: fqtss_event_13906
      description: "Event reported when all the hardware status updates are received"
      if: "ctx.event?.code == '13906'"
      pattern: "consolidated status for stream %{aruba.instance.id} port %{aruba.port} is %{aruba.fqtss.stream_hw_status}, per_stream_consolidate_status %{aruba.fqtss.per_stream_consolidate_status}, per_port_consolidate_status %{aruba.fqtss.per_port_consolidate_status},per_port_per_stream_consolidate_status %{aruba.fqtss.per_port_per_stream_consolidate_status}, status_code %{aruba.status}"

  # Traffic Insight events (1400x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/TRAFFIC_INSIGHT.htm
  - grok:
      field: message
      tag: traffic_insight_event_14001_14002
      description: "Event indicates new traffic insight instance is [c]reated|deleted]"
      if: "['14001','14002'].contains(ctx.event?.code)"
      patterns:
        - "^Instance %{DATA:aruba.instance.id} (created|deleted)"
  - grok:
      field: message
      tag: traffic_insight_event_14003_14004
      description: "Flow running-statistics timeout expired | aggregate-statistics timeout expired"
      if: "['14003','14004'].contains(ctx.event?.code)"
      patterns:
        - "^Top-N flows (running|aggregate)-statistics cleared for the monitor %{DATA:aruba.traffic.monitor_name} and instance %{GREEDYDATA:aruba.instance.id}"
  - grok:
      field: message
      tag: traffic_insight_event_14005_14006
      description: "Event indicates traffic insight instance is [enabled|disabled] "
      if: "['14005','14006'].contains(ctx.event?.code)"
      patterns:
        - "^Traffic Insight instance %{DATA:aruba.instance.id} (enabled|disabled)"
  - grok:
      field: message
      tag: traffic_insight_event_14007_14008
      description: "Event indicates maximum application flow cache limit reached for a traffic insight instance | DNS average latency statistics cache gets cleared after the timeout"
      if: "['14007','14008'].contains(ctx.event?.code)"
      patterns:
        - "^Ignoring the flow for monitor %{DATA:aruba.traffic.monitor_name} instance %{DATA:aruba.instance.id}, maximum application flow cache limit reached"
        - "^DNS Average Latency statistics cache cleared for the monitor %{DATA:aruba.traffic.monitor_name} and instance %{GREEDYDATA:aruba.instance.id}"

  # ARC events (141xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/ARC.htm
  - dissect:
      field: message
      tag: arc_event_14101
      description: "Log event that indicates global configuration for App Recognition feature"
      if: "ctx.event?.code == '14101'"
      pattern: "%{aruba.arc.log}App Recognition feature has been %{aruba.status} - event_name: ARCD_LC_STATUS_CHANGE"
  - grok:
      field: message
      tag: arc_event_14102_14106
      description: "linecard up event | flush timer start/expire status"
      if: "['14102','14106'].contains(ctx.event?.code)"
      patterns: 
        - "(Linecard|LC) %{DATA:aruba.instance.id} is %{DATA:aruba.status}(.| )- event_name:"
  - grok:
      field: message
      tag: arc_event_14103_14107_14108
      description: "Bulk sync event received | IP Flow table utilization reached high threshold on a LC | IP Flow table utilization back to lower threshold on a LC"
      if: "['14103','14107','14108'].contains(ctx.event?.code)"
      patterns: 
        - "linecard %{DATA:aruba.instance.id} - "
  - grok:
      field: message
      tag: arc_event_14105_14109
      description: "ARCD Publisher status | Log event that indicates global configuration for App Recognition feature"
      if: "['14105','14109'].contains(ctx.event?.code)"
      patterns: 
        - "(is|been) %{DATA:aruba.status} - event_name"

  # Client insight events (143xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CLIENT_INSIGHT.htm
  - dissect:
      field: message
      tag: insight_event_14301
      description: "Client on-boarding successful"
      if: "ctx.event?.code == '14301'"
      pattern: "Client %{client.mac} successfully on-boarded on VLAN %{network.vlan.id}. Client on-boarding started at %{aruba.insight.ob_start_ts}; L2 complete at %{aruba.insight.l2_end_ts}; L3 complete at %{aruba.insight.l3_end_ts} is_security_log : no"
  - dissect:
      field: message
      tag: insight_event_14302
      description: "Client on-boarding partially success"
      if: "ctx.event?.code == '14302'"
      pattern: "Client %{client.mac} partial success while on-boarding on VLAN %{network.vlan.id}. L2 status:%{aruba.insight.l2_ob_state} L3 status:%{aruba.insight.l3_ob_state}. Client on-boarding started at %{aruba.insight.ob_start_ts};L2 complete at %{aruba.insight.l2_end_ts}; L3 complete at %{aruba.insight.l3_end_ts}. is_security_log : no"
  - dissect:
      field: message
      tag: insight_event_14303
      description: "Client on-boarding failed"
      if: "ctx.event?.code == '14303'"
      pattern: "Client %{client.mac} failed to on-board with status: %{aruba.status} reason_code: %{aruba.insight.failure_phase_id} is_security_log : no"
  - dissect:
      field: message
      tag: insight_event_14304
      description: "Maximum system wide client limit reached"
      if: "ctx.event?.code == '14304'"
      pattern: "Maximum system wide client limit %{aruba.limit.threshold} reached. throttle_time : 15 throttle_count : 1 is_security_log: no"
  - dissect:
      field: message
      tag: insight_event_14305
      description: "Client on-boarding successful"
      if: "ctx.event?.code == '14305'"
      pattern: "Client %{client.mac} successfully on-boarded on VLAN %{network.vlan.id}; Client on-boarding started at %{aruba.insight.ob_start_ts}; L2 complete at %{aruba.insight.l2_end_ts}; L3 complete at %{aruba.insight.l3_end_ts}; ARP to GW response received at %{aruba.insight.arp_end_ts}; DNS on-boarding to %{server.ip} completed at %{aruba.insight.dns_end_ts} is_security_log : no"
  - dissect:
      field: message
      tag: insight_event_14306
      description: "Client on-boarding partially success"
      if: "ctx.event?.code == '14306'"
      pattern: "Client %{client.mac} on-boarded on VLANs %{network.vlan.id} and failed on VLANs %{aruba.insight.failed_vlans}; Client on-boarding started at %{aruba.insight.ob_start_ts}; L2 complete at %{aruba.insight.l2_end_ts}; L3 complete at %{aruba.insight.l3_end_ts}; ARP to GW response received at %{aruba.insight.arp_end_ts}; DNS on-boarding to %{server.ip} completed at %{aruba.insight.dns_end_ts}; L2 status %{aruba.insight.l2_ob_state} failure_reason_code - %{aruba.insight.l2_failure_reason}; L3 status %{aruba.insight.l3_ob_state} failure_reason_code - %{aruba.insight.l3_failure_reason}; DNS on-boarding status %{aruba.status} failure_reason_code - %{event.reason}"
  - dissect:
      field: message
      tag: insight_event_14307
      description: "Client on-boarding failed"
      if: "ctx.event?.code == '14307'"
      pattern: "Client %{client.mac} failed to on-board with status: %{aruba.status} in failure phase: %{aruba.insight.failure_phase_id} with reason: %{event.reason} is_security_log : no"
  - dissect:
      field: message
      tag: insight_event_14308
      description: "Client L2 on-boarding details"
      if: "ctx.event?.code == '14308'"
      pattern: "Client %{client.mac} on-boarded on VLAN %{network.vlan.id} and failed on VLANs %{aruba.insight.failed_vlans} Port %{aruba.port} auth-status %{aruba.status} auth-type %{aruba.insight.auth_type} auth-latency %{aruba.insight.auth_latency} dot1x-auth-failure-reason %{aruba.insight.dot1x_auth_failure_reason} mac-auth-failure-reason %{aruba.insight.mac_auth_failure_reason} radius-server %{aruba.insight.radius_server} assigned-role %{aruba.role} assigned-role-type %{aruba.insight.role_type}"
  - grok:
      field: message
      tag: insight_event_14309_14310
      description: "Client DHCPV4 on-boarding details | Client DHCPV6 on-boarding details"
      if: "['14309','14310'].contains(ctx.event?.code)"
      patterns:
        - "^Client %{MAC:client.mac} on-boarded on VLAN %{DATA:aruba.insight.successfulvlan} Port %{DATA:aruba.port} (dhcpv4|dhcpv6)-status %{DATA:aruba.status} (dhcpv4|dhcpv6)-failure-reason %{DATA:event.reason} (dhcpv4|dhcpv6)-server%{DATA:aruba.insight.dhcp_server} (dhcpv4|dhcpv6)-client %{DATA:aruba.insight.dhcp_client} (dhcpv4|dhcpv6)-latency %{GREEDYDATA:aruba.insight.dhcp_latency}"
  - dissect:
      field: message
      tag: insight_event_14311
      description: "Client DNS on-boarding details"
      if: "ctx.event?.code == '14311'"
      pattern: "Client %{client.mac} on-boarded on Port %{aruba.port} dns-status %{aruba.status} dns-failure-reason %{event.reason} dns-server %{aruba.insight.dns_server} dns-latency %{aruba.insight.dns_latency}"

  # Feature Pack events (144xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/FEATURE_PACK.htm
  - grok:
      field: message
      tag: feature_pack_event_14401_14402_14403
      description: "Event raised when a feature pack is installed | when a feature pack is erased | when a feature pack expires"
      if: "['14401','14402','14403'].contains(ctx.event?.code)"
      patterns: 
        - "^%{DATA:aruba.feature_pack.name} (installed|erased|expired on %{GREEDYDATA:aruba.feature_pack.expiry_date}.)"
  - dissect:
      field: message
      tag: feature_pack_event_14404
      description: "Event raised when a feature pack serial number or MAC address does not match that of the device"
      if: "ctx.event?.code == '14404'"
      pattern: "Feature pack %{aruba.feature_pack.parameter_type} %{aruba.feature_pack.subscription_parameter} does not match device %{aruba.feature_pack.parameter_type_mismatch} %{aruba.feature_pack.device_parameter}"
  - dissect:
      field: message
      tag: feature_pack_event_14407
      description: "Event raised when a feature pack subscription through HPE Aruba Networking Central becomes connected or disconnected"
      if: "ctx.event?.code == '14407'"
      pattern: "Feature pack subscription through HPE Aruba Networking Central is %{aruba.state}"
  - dissect:
      field: message
      tag: feature_pack_event_14408
      description: "Event raised when a VSF member is not subscribed as part of the installed feature pack"
      if: "ctx.event?.code == '14408'"
      pattern: "VSF member serial number %{aruba.feature_pack.device_serial} not subscribed as part of installed feature pack"
  - dissect:
      field: message
      tag: feature_pack_event_14409
      description: "Periodic event raised to indicate that a feature is operating in honor mode"
      if: "ctx.event?.code == '14409'"
      pattern: "Feature %{aruba.feature_pack.name} is operating in honor mode without a valid feature pack."
  - dissect:
      field: message
      tag: feature_pack_event_14410
      description: "Event raised when a connection to the feature pack server has been lost and the feature pack subscription cannot be validated"
      if: "ctx.event?.code == '14410'"
      pattern: "Connection to feature pack server lost and subscription for %{aruba.feature_pack.name} cannot be validated. Subscribed features will continue to operate in honor mode."
  - dissect:
      field: message
      tag: feature_pack_event_14413
      description: "Event raised when a feature pack is revoked by the feature pack server"
      if: "ctx.event?.code == '14413'"
      pattern: "Software feature pack %{aruba.feature_pack.name} revoked by the server."
  - dissect:
      field: message
      tag: feature_pack_event_14414
      description: "Event raised when the feature pack mode configured does not match the feature pack type installed on the device."
      if: "ctx.event?.code == '14414'"
      pattern: "Feature pack mode %{aruba.feature_pack.mode} does not match installed feature pack type %{aruba.feature_pack.type}."

  # Download events (145xx)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/DOWNLOAD.htm
  - grok:
      field: message
      tag: download_event_14501_14502_14503_14509_14510
      description: "Indicates that a file download has been started | file has been successfully downloaded | file download has been aborted | file download has been retried | file upload has been retried"
      if: "['14501','14502','14503','14509','14510'].contains(ctx.event?.code)"
      patterns:
        - "from %{GREEDYDATA:url.original}"
  - grok:
      field: message
      tag: download_event_14505_14506_14507
      description: "Indicates that a file upload has been started | file has been successfully uploaded | file upload has been aborted"
      if: "['14505','14506','14507'].contains(ctx.event?.code)"
      patterns:
        - "to %{GREEDYDATA:url.original}"
  - grok:
      field: message
      tag: download_event_14504_14508
      description: "Indicates that a file download has been retried | file upload has been retried"
      if: "['14504','14508'].contains(ctx.event?.code)"
      patterns:
        - "^File (upload|download) failed (to|from) %{DATA:url.original} with error code: %{DATA:error.code}, %{GREEDYDATA:aruba.error.description}"

  # Central Source events (1460x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/CENTRAL_SOURCE.htm
  - grok:
      field: message
      tag: central_source_event_14601_14602_14603_14604_14605
      description: ""
      if: "['14601','14602','14603','14604','14605'].contains(ctx.event?.code)"
      patterns: 
        - "^Activate server %{DATA:aruba.rest.activate_address} is reachable via VRF %{GREEDYDATA:aruba.vrf.id}."
        - "^Received certificate from Activate server, processing with certificate manager. Certificate length: %{NUMBER:aruba.len:long}."
        - "Central location %{DATA:aruba.rest.central_location}( successfully fetched)? from %{DATA:aruba.rest.central_source} via VRF %{GREEDYDATA:aruba.vrf.id}."
        - "^Switch time is synced with Activate Server %{GREEDYDATA:aruba.rest.activate_address}"

  # IPSec tunnel offload events (1480x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IPSEC.htm
  - grok:
      field: message
      tag: ipsec_tunnel_event_14801_14802_14803
      description: "Event raised when IPSec tunnel state is up | tunnel state is down | is down due to VSX passive mode"
      if: "['14801','14802','14803'].contains(ctx.event?.code)"
      patterns: 
        - "- Tunnel( Id)? \\(%{DATA:aruba.instance.id}\\)"

  # Launch Daemon (LaunchD) events (1490x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/LAUNCHD.htm
  - grok:
      field: message
      tag: launchd_event_14901_14902_14903_14904
      description: "Event raised when a daemon is started on config availability | when a daemon failed to start on config availability | when a daemon is stopped on config removal | when a daemon failed to stop on config removal"
      if: "['14901','14902','14903','14904'].contains(ctx.event?.code)"
      patterns: 
        - "(start|stop|for) %{DATA:aruba.launchd.daemon} daemon"

  # IP Flow Monitoring Advertisement events (1510x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/IPFM.htm
  - dissect:
      field: message
      tag: ipfm_event_15101
      description: ""
      if: "ctx.event?.code == '15101'"
      pattern: "Flow Tracking feature has been %{aruba.status}"
  - grok:
      field: message
      tag: ipfm_event_15102_15106
      description: "linecard up event | flush timer start/expire status"
      if: "['15102','15106'].contains(ctx.event?.code)"
      patterns: 
        - "(Linecard|LC) %{DATA:aruba.instance.id} is %{OPTIONAL_SENTENCE:aruba.status}(\\.)?"
      pattern_definitions:
        OPTIONAL_SENTENCE: "[\\p{L},\":;\\s\\-]*"
  - dissect:
      field: message
      tag: ipfm_event_15103
      description: ""
      if: "ctx.event?.code == '15103'"
      pattern: "BULK SYNC event received from linecard %{aruba.instance.id}"
  - dissect:
      field: message
      tag: ipfm_event_15105
      description: ""
      if: "ctx.event?.code == '15105'"
      pattern: "IPFMD Publisher is %{aruba.status}"
  - grok:
      field: message
      tag: ipfm_event_15107_15108
      description: "IP Flow table utilization reached high threshold on a LC | IP Flow table utilization back to lower threshold on a LC"
      if: "['15107','15108'].contains(ctx.event?.code)"
      patterns: 
        - "^IP Flow table utilization (has exceeded high|back to lower) threshold on linecard %{GREEDYDATA:aruba.instance.id}"

  # Bidirectional PIM (PIM-BIDI) events (1530x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/PIM-BIDI.htm
  - dissect:
      field: message
      tag: pim_event_15301
      description: "This log event informs about router PIM status of a VRF"
      if: "ctx.event?.code == '15301'"
      pattern: "Router pim %{aruba.status} on vrf %{aruba.vrf.name}"
  - dissect:
      field: message
      tag: pim_event_15302
      description: "This log event informs about interface status"
      if: "ctx.event?.code == '15302'"
      pattern: "Interface %{aruba.interface.name} state %{aruba.state}"
  - dissect:
      field: message
      tag: pim_event_15303
      description: "This log event informs about dropping packet"
      if: "ctx.event?.code == '15303'"
      pattern: "Dropping Packet on interface %{aruba.interface.id}, Due to %{event.reason}"
  - dissect:
      field: message
      tag: pim_event_15304
      description: "This log event informs about interface status"
      if: "ctx.event?.code == '15304'"
      pattern: "PIM Bidi %{aruba.state} on Interface %{aruba.interface.name}"
  - grok:
      field: message
      tag: pim_event_15305_15306
      description: "This log event informs about the creation and deletion of a PIM Bidi Neighbor | This log event informs about Non Bidir PIM Neighbor"
      if: "['15305','15306'].contains(ctx.event?.code)"
      patterns:
        - "^PIM Bidi Neighbor %{IP:client.ip} is %{DATA:aruba.state} on Interface %{GREEDYDATA:aruba.interface.name}"

  # Injected Views (1580x)
  # https://www.arubanetworks.com/techdocs/AOS-CX/10.15/HTML/elmrg/Content/events/INJECTED-VIEWS.htm
  - grok:
      field: message
      tag: injected_view_event_15801
      description: "Event reported when an injected view is loaded|unloaded|in failed state "
      if: "['15801','15802','15803'].contains(ctx.event?.code)"
      patterns:
        - "^Injected view %{DATA:aruba.injected_view.name} "

  # Cleanup MAC addresses for different fields
  - uppercase:
      field: client.mac
      ignore_missing: true
  - gsub:
      field: client.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: source.mac
      ignore_missing: true
  - gsub:
      field: source.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: host.mac
      ignore_missing: true
  - gsub:
      field: host.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: server.mac
      ignore_missing: true
  - gsub:
      field: server.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: destination.mac
      ignore_missing: true
  - gsub:
      field: destination.mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.mstp.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.mstp.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.ndm.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.ndm.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.rpvst.old_mac
      ignore_missing: true
  - gsub:
      field: aruba.rpvst.old_mac
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.vsf.mac_addr1
      ignore_missing: true
  - gsub:
      field: aruba.vsf.mac_addr1
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true
  - uppercase:
      field: aruba.vsf.mac_addr2
      ignore_missing: true
  - gsub:
      field: aruba.vsf.mac_addr2
      pattern: "[:.]"
      replacement: "-"
      ignore_missing: true

  # Make sure that host.ip and host.mac are arrays
  - set:
      field: host.ip
      value: ['{{{host.ip}}}']
      if: ctx.host?.ip instanceof String
  - set:
      field: host.mac
      value: ['{{{host.mac}}}']
      if: ctx.host?.mac instanceof String

  # Convert due to dissect processing
  # - aruba.slot
  - convert:
      field: aruba.slot
      type: long
      ignore_missing: true

  - remove:
      field:
        - _temp.config
      ignore_missing: true

  - remove:
      field: aruba.sequence
      ignore_missing: true
      if: "ctx.aruba?.sequence == '-'"

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
